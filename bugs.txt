Found 647 issues

app/src/main/java/androidx/media/filterfw/SlotFilter.java:12: error: NULL_DEREFERENCE
  object returned by `getFrameManager()` could be null and is dereferenced at line 12.
  10.   
  11.       protected final FrameType getSlotType() {
  12. >         return getFrameManager().getSlot(this.mSlotName).getType();
  13.       }
  14.   

app/src/main/java/androidx/media/filterfw/SlotFilter.java:16: error: NULL_DEREFERENCE
  object returned by `getFrameManager()` could be null and is dereferenced at line 16.
  14.   
  15.       protected final boolean slotHasFrame() {
  16. >         return getFrameManager().getSlot(this.mSlotName).hasFrame();
  17.       }
  18.   }

app/src/main/java/com/google/android/libraries/social/licenses/LicenseActivity.java:18: error: NULL_DEREFERENCE
  object returned by `getSupportActionBar()` could be null and is dereferenced at line 18.
  16.           setContentView(R.layout.libraries_social_licenses_license_activity);
  17.           License license = (License) getIntent().getParcelableExtra("license");
  18. >         getSupportActionBar().setTitle(license.getLibraryName());
  19.           getSupportActionBar().setDisplayShowHomeEnabled(true);
  20.           getSupportActionBar().setDisplayHomeAsUpEnabled(true);

app/src/main/java/androidx/media/filterpacks/base/FrameSlotTarget.java:18: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("frame")` could be null and is dereferenced at line 18.
  16.   
  17.       protected void onProcess() {
  18. >         getFrameManager().storeFrame(getConnectedInputPort("frame").pullFrame(), this.mSlotName);
  19.       }
  20.   }

app/src/main/java/androidx/media/filterpacks/base/FrameSlotTarget.java:18: error: NULL_DEREFERENCE
  object returned by `getFrameManager()` could be null and is dereferenced at line 18.
  16.   
  17.       protected void onProcess() {
  18. >         getFrameManager().storeFrame(getConnectedInputPort("frame").pullFrame(), this.mSlotName);
  19.       }
  20.   }

app/src/main/java/androidx/media/filterpacks/base/NullFilter.java:18: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("input")` could be null and is dereferenced at line 18.
  16.   
  17.       protected void onProcess() {
  18. >         getConnectedInputPort("input").pullFrame();
  19.       }
  20.   }

app/src/main/java/com/mp/android/apps/utils/AssertFileUtils.java:28: error: RESOURCE_LEAK
  resource of type `java.io.InputStreamReader` acquired by call to `new()` at line 23 is not released after line 28.
**Note**: potential exception at line 25
  26.                   sb.append(next);
  27.               }
  28. >         } catch (IOException e) {
  29.               // TODO Auto-generated catch block
  30.               e.printStackTrace();

app/src/main/java/androidx/media/filterpacks/text/StringLogger.java:19: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("string").pullFrame()` could be null and is dereferenced at line 19.
  17.   
  18.       protected void onProcess() {
  19. >         Log.i("StringLogger", (String) getConnectedInputPort("string").pullFrame().asFrameValue().getValue());
  20.       }
  21.   }

app/src/main/java/androidx/media/filterpacks/text/StringLogger.java:19: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("string")` could be null and is dereferenced at line 19.
  17.   
  18.       protected void onProcess() {
  19. >         Log.i("StringLogger", (String) getConnectedInputPort("string").pullFrame().asFrameValue().getValue());
  20.       }
  21.   }

app/src/main/java/androidx/media/filterpacks/text/ToStringFilter.java:20: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("object").pullFrame()` could be null and is dereferenced at line 20.
  18.   
  19.       protected void onProcess() {
  20. >         String outStr = getConnectedInputPort("object").pullFrame().asFrameValue().getValue().toString();
  21.           OutputPort outPort = getConnectedOutputPort("string");
  22.           FrameValue stringFrame = outPort.fetchAvailableFrame(null).asFrameValue();

app/src/main/java/androidx/media/filterpacks/text/ToStringFilter.java:20: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("object")` could be null and is dereferenced at line 20.
  18.   
  19.       protected void onProcess() {
  20. >         String outStr = getConnectedInputPort("object").pullFrame().asFrameValue().getValue().toString();
  21.           OutputPort outPort = getConnectedOutputPort("string");
  22.           FrameValue stringFrame = outPort.fetchAvailableFrame(null).asFrameValue();

app/src/main/java/androidx/media/filterpacks/miscellaneous/DimensionsFilter.java:21: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("frame")` could be null and is dereferenced at line 21.
  19.   
  20.       protected void onProcess() {
  21. >         Frame inFrame = getConnectedInputPort("frame").pullFrame();
  22.           OutputPort outPort = getConnectedOutputPort("dimensions");
  23.           FrameValue outFrame = outPort.fetchAvailableFrame(null).asFrameValue();

app/src/main/java/androidx/media/filterpacks/colorspace/RgbToYcbcrFilter.java:23: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("image")` could be null and is dereferenced at line 23.
  21.       protected void onProcess() {
  22.           OutputPort outPort = getConnectedOutputPort("image");
  23. >         FrameImage2D inputImage = getConnectedInputPort("image").pullFrame().asFrameImage2D();
  24.           int[] dim = inputImage.getDimensions();
  25.           FrameImage2D outputImage = outPort.fetchAvailableFrame(dim).asFrameImage2D();

app/src/main/java/androidx/media/filterpacks/base/FrameSlotSource.java:23: error: NULL_DEREFERENCE
  object returned by `getFrameManager()` could be null and is dereferenced at line 23.
  21.   
  22.       protected void onProcess() {
  23. >         Frame frame = getFrameManager().fetchFrame(this.mSlotName);
  24.           getConnectedOutputPort("frame").pushFrame(frame);
  25.           frame.release();

app/src/main/java/androidx/media/filterpacks/colorspace/ColorfulnessFilter.java:25: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("histogram").pullFrame()` could be null and is dereferenced at line 25.
  23.       protected void onProcess() {
  24.           int c;
  25. >         FrameBuffer2D histogramFrame = getConnectedInputPort("histogram").pullFrame().asFrameBuffer2D();
  26.           ByteBuffer byteBuffer = histogramFrame.lockBytes(1);
  27.           byteBuffer.order(ByteOrder.nativeOrder());

app/src/main/java/androidx/media/filterpacks/colorspace/ColorfulnessFilter.java:25: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("histogram")` could be null and is dereferenced at line 25.
  23.       protected void onProcess() {
  24.           int c;
  25. >         FrameBuffer2D histogramFrame = getConnectedInputPort("histogram").pullFrame().asFrameBuffer2D();
  26.           ByteBuffer byteBuffer = histogramFrame.lockBytes(1);
  27.           byteBuffer.order(ByteOrder.nativeOrder());

app/src/main/java/androidx/media/filterpacks/audio/Speaker.java:25: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("audio").pullFrame()` could be null and is dereferenced at line 25.
  23.   
  24.       protected void onProcess() {
  25. >         AudioSample sample = (AudioSample) getConnectedInputPort("audio").pullFrame().asFrameValue().getValue();
  26.           if (sample != null) {
  27.               if (!(sample.sampleRate == this.mSampleRate && sample.channelCount == this.mChannelCount)) {

app/src/main/java/androidx/media/filterpacks/audio/Speaker.java:25: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("audio")` could be null and is dereferenced at line 25.
  23.   
  24.       protected void onProcess() {
  25. >         AudioSample sample = (AudioSample) getConnectedInputPort("audio").pullFrame().asFrameValue().getValue();
  26.           if (sample != null) {
  27.               if (!(sample.sampleRate == this.mSampleRate && sample.channelCount == this.mChannelCount)) {

app/src/main/java/androidx/media/filterpacks/numeric/NormFilter.java:25: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("x").pullFrame()` could be null and is dereferenced at line 25.
  23.   
  24.       protected void onProcess() {
  25. >         float norm = (float) Math.hypot((double) ((Float) getConnectedInputPort("x").pullFrame().asFrameValue().getValue()).floatValue(), (double) ((Float) getConnectedInputPort("y").pullFrame().asFrameValue().getValue()).floatValue());
  26.           if (mLogVerbose) {
  27.               Log.v(TAG, "Norm = " + norm);

app/src/main/java/androidx/media/filterpacks/numeric/NormFilter.java:25: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("x")` could be null and is dereferenced at line 25.
  23.   
  24.       protected void onProcess() {
  25. >         float norm = (float) Math.hypot((double) ((Float) getConnectedInputPort("x").pullFrame().asFrameValue().getValue()).floatValue(), (double) ((Float) getConnectedInputPort("y").pullFrame().asFrameValue().getValue()).floatValue());
  26.           if (mLogVerbose) {
  27.               Log.v(TAG, "Norm = " + norm);

app/src/main/java/androidx/media/filterpacks/base/ArrayToSequenceFilter.java:50: error: NULL_DEREFERENCE
  object `inputPort` last assigned on line 26 could be null and is dereferenced at line 50.
  48.               return;
  49.           }
  50. >         inputPort.setWaitsForFrame(false);
  51.           setMinimumAvailableInputs(0);
  52.       }

app/src/main/java/androidx/media/filterpacks/base/ArrayToSequenceFilter.java:41: error: NULL_DEREFERENCE
  object `outPortSeq` last assigned on line 40 could be null and is dereferenced at line 41.
  39.           if (this.mValues.size() > 0) {
  40.               OutputPort outPortSeq = getConnectedOutputPort("outputSequence");
  41. >             FrameValue outFrameSeq = outPortSeq.fetchAvailableFrame(null).asFrameValue();
  42.               outFrameSeq.setValue(this.mValues.remove());
  43.               outPortSeq.pushFrame(outFrameSeq);

app/src/main/java/androidx/media/filterpacks/base/ArrayToSequenceFilter.java:41: error: NULL_DEREFERENCE
  object returned by `outPortSeq.fetchAvailableFrame(null)` could be null and is dereferenced at line 41.
  39.           if (this.mValues.size() > 0) {
  40.               OutputPort outPortSeq = getConnectedOutputPort("outputSequence");
  41. >             FrameValue outFrameSeq = outPortSeq.fetchAvailableFrame(null).asFrameValue();
  42.               outFrameSeq.setValue(this.mValues.remove());
  43.               outPortSeq.pushFrame(outFrameSeq);

app/src/main/java/androidx/media/filterpacks/image/ToRgbValuesFilter.java:28: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("image")` could be null and is dereferenced at line 28.
  26.       protected void onProcess() {
  27.           OutputPort outPort = getConnectedOutputPort("image");
  28. >         FrameImage2D inputImage = getConnectedInputPort("image").pullFrame().asFrameImage2D();
  29.           int[] dims = inputImage.getDimensions();
  30.           FrameBuffer2D outputFrame = outPort.fetchAvailableFrame(new int[]{dims[0] * 3, dims[1]}).asFrameBuffer2D();

app/src/main/java/com/google/android/apps/photolab/storyboard/download/MD5Utils.java:41: error: RESOURCE_LEAK
  resource of type `java.io.FileInputStream` acquired to `in` by call to `FileInputStream(...)` at line 36 is not released after line 41.
**Note**: potential exception at line 37
  39.               }
  40.               in.close();
  41. >         } catch (Exception e) {
  42.               e.printStackTrace();
  43.               return null;

app/src/main/java/androidx/media/filterpacks/colorspace/RgbToHsvFilter.java:29: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("image")` could be null and is dereferenced at line 29.
  27.       protected void onProcess() {
  28.           OutputPort outPort = getConnectedOutputPort("image");
  29. >         FrameImage2D inputImage = getConnectedInputPort("image").pullFrame().asFrameImage2D();
  30.           FrameImage2D outputImage = outPort.fetchAvailableFrame(inputImage.getDimensions()).asFrameImage2D();
  31.           this.mConverter.convertImage(inputImage, outputImage);

app/src/main/java/androidx/media/filterpacks/image/ToGrayValuesFilter.java:29: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("image")` could be null and is dereferenced at line 29.
  27.       protected void onProcess() {
  28.           OutputPort outPort = getConnectedOutputPort("image");
  29. >         FrameImage2D inputImage = getConnectedInputPort("image").pullFrame().asFrameImage2D();
  30.           FrameBuffer2D outputGrayValuesFrame = outPort.fetchAvailableFrame(this.mGrayValuesExtractor.getOutputFrameDimensions(inputImage.getDimensions())).asFrameBuffer2D();
  31.           this.mGrayValuesExtractor.toGrayValues(inputImage, outputGrayValuesFrame);

app/src/main/java/androidx/media/filterpacks/base/RepeaterFilter.java:37: error: NULL_DEREFERENCE
  object `control` last assigned on line 29 could be null and is dereferenced at line 37.
  35.               this.mCachedFrame = inputPort.pullFrame().retain();
  36.           }
  37. >         this.mRepeat = ((Integer) control.pullFrame().asFrameValue().getValue()).intValue();
  38.           inputPort.setWaitsForFrame(this.mRepeat <= 1);
  39.           if (this.mRepeat > 0) {

app/src/main/java/androidx/media/filterpacks/base/RepeaterFilter.java:37: error: NULL_DEREFERENCE
  object returned by `control.pullFrame()` could be null and is dereferenced at line 37.
  35.               this.mCachedFrame = inputPort.pullFrame().retain();
  36.           }
  37. >         this.mRepeat = ((Integer) control.pullFrame().asFrameValue().getValue()).intValue();
  38.           inputPort.setWaitsForFrame(this.mRepeat <= 1);
  39.           if (this.mRepeat > 0) {

app/src/main/java/androidx/media/filterpacks/colorspace/PremultiplyAlphaFilter.java:30: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("image")` could be null and is dereferenced at line 30.
  28.       protected void onProcess() {
  29.           OutputPort outPort = getConnectedOutputPort("image");
  30. >         FrameImage2D inputImage = getConnectedInputPort("image").pullFrame().asFrameImage2D();
  31.           FrameImage2D outputImage = outPort.fetchAvailableFrame(inputImage.getDimensions()).asFrameImage2D();
  32.           this.mShader.process(inputImage, outputImage);

app/src/main/java/androidx/media/filterpacks/colorspace/UnpremultiplyAlphaFilter.java:30: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("image")` could be null and is dereferenced at line 30.
  28.       protected void onProcess() {
  29.           OutputPort outPort = getConnectedOutputPort("image");
  30. >         FrameImage2D inputImage = getConnectedInputPort("image").pullFrame().asFrameImage2D();
  31.           FrameImage2D outputImage = outPort.fetchAvailableFrame(inputImage.getDimensions()).asFrameImage2D();
  32.           this.mShader.process(inputImage, outputImage);

app/src/main/java/androidx/media/filterpacks/image/CrossProcessFilter.java:30: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("image")` could be null and is dereferenced at line 30.
  28.       protected void onProcess() {
  29.           OutputPort outPort = getConnectedOutputPort("image");
  30. >         FrameImage2D inputImage = getConnectedInputPort("image").pullFrame().asFrameImage2D();
  31.           FrameImage2D outputImage = outPort.fetchAvailableFrame(inputImage.getDimensions()).asFrameImage2D();
  32.           this.mShader.process(inputImage, outputImage);

app/src/main/java/androidx/media/filterpacks/image/InvertFilter.java:30: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("image")` could be null and is dereferenced at line 30.
  28.       protected void onProcess() {
  29.           OutputPort outPort = getConnectedOutputPort("image");
  30. >         FrameImage2D inputImage = getConnectedInputPort("image").pullFrame().asFrameImage2D();
  31.           FrameImage2D outputImage = outPort.fetchAvailableFrame(inputImage.getDimensions()).asFrameImage2D();
  32.           this.mShader.process(inputImage, outputImage);

app/src/main/java/androidx/media/filterpacks/image/NegativeFilter.java:30: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("image")` could be null and is dereferenced at line 30.
  28.       protected void onProcess() {
  29.           OutputPort outPort = getConnectedOutputPort("image");
  30. >         FrameImage2D inputImage = getConnectedInputPort("image").pullFrame().asFrameImage2D();
  31.           FrameImage2D outputImage = outPort.fetchAvailableFrame(inputImage.getDimensions()).asFrameImage2D();
  32.           this.mShader.process(inputImage, outputImage);

app/src/main/java/androidx/media/filterpacks/image/SepiaFilter.java:31: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("image")` could be null and is dereferenced at line 31.
  29.       protected void onProcess() {
  30.           OutputPort outPort = getConnectedOutputPort("image");
  31. >         FrameImage2D inputImage = getConnectedInputPort("image").pullFrame().asFrameImage2D();
  32.           FrameImage2D outputImage = outPort.fetchAvailableFrame(inputImage.getDimensions()).asFrameImage2D();
  33.           this.mShader.process(inputImage, outputImage);

app/src/main/java/androidx/media/filterpacks/text/TextViewTarget.java:30: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("text").pullFrame()` could be null and is dereferenced at line 30.
  28.   
  29.       protected void onProcess() {
  30. >         final String text = (String) getConnectedInputPort("text").pullFrame().asFrameValue().getValue();
  31.           if (this.mTextView != null) {
  32.               this.mTextView.post(new Runnable() {

app/src/main/java/androidx/media/filterpacks/text/TextViewTarget.java:30: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("text")` could be null and is dereferenced at line 30.
  28.   
  29.       protected void onProcess() {
  30. >         final String text = (String) getConnectedInputPort("text").pullFrame().asFrameValue().getValue();
  31.           if (this.mTextView != null) {
  32.               this.mTextView.post(new Runnable() {

app/src/main/java/androidx/media/filterfw/FrameType.java:31: error: NULL_DEREFERENCE
  object `null` is dereferenced by call to `fetchType(...)` at line 31.
  29.   
  30.       public static FrameType single() {
  31. >         return fetchType(null, 0);
  32.       }
  33.   

app/src/main/java/androidx/media/filterpacks/base/GraphInputSource.java:32: error: NULL_DEREFERENCE
  object returned by `getConnectedOutputPort("frame")` could be null and is dereferenced at line 32.
  30.       protected void onProcess() {
  31.           if (this.mFrame != null) {
  32. >             getConnectedOutputPort("frame").pushFrame(this.mFrame);
  33.               this.mFrame.release();
  34.               this.mFrame = null;

app/src/main/java/androidx/media/filterpacks/image/ToGrayFilter.java:33: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("image")` could be null and is dereferenced at line 33.
  31.       protected void onProcess() {
  32.           OutputPort outPort = getConnectedOutputPort("image");
  33. >         FrameImage2D inputImage = getConnectedInputPort("image").pullFrame().asFrameImage2D();
  34.           FrameImage2D outputImage = outPort.fetchAvailableFrame(inputImage.getDimensions()).asFrameImage2D();
  35.           if (isOpenGLSupported()) {

app/src/main/java/androidx/media/filterpacks/histogram/UniformHistogramSource.java:38: error: NULL_DEREFERENCE
  object `outPort` last assigned on line 37 could be null and is dereferenced at line 38.
  36.           }
  37.           OutputPort outPort = getConnectedOutputPort("histogram");
  38. >         FrameValues frame = outPort.fetchAvailableFrame(null).asFrameValues();
  39.           frame.setValues(histogram);
  40.           outPort.pushFrame(frame);

app/src/main/java/androidx/media/filterpacks/histogram/UniformHistogramSource.java:38: error: NULL_DEREFERENCE
  object returned by `outPort.fetchAvailableFrame(null)` could be null and is dereferenced at line 38.
  36.           }
  37.           OutputPort outPort = getConnectedOutputPort("histogram");
  38. >         FrameValues frame = outPort.fetchAvailableFrame(null).asFrameValues();
  39.           frame.setValues(histogram);
  40.           outPort.pushFrame(frame);

app/src/main/java/androidx/media/filterpacks/base/ArraySelectFilter.java:37: error: NULL_DEREFERENCE
  object `inputPort` last assigned on line 35 could be null and is dereferenced at line 37.
  35.           InputPort inputPort = getConnectedInputPort("array");
  36.           OutputPort outputPort = getConnectedOutputPort("element");
  37. >         Object array = inputPort.pullFrame().asFrameValues().getValues();
  38.           Object element = Array.getLength(array) > this.mIndex ? Array.get(array, this.mIndex) : this.mDefaultValue;
  39.           FrameValue elemFrame = outputPort.fetchAvailableFrame(null).asFrameValue();

app/src/main/java/androidx/media/filterpacks/base/VariableSource.java:35: error: NULL_DEREFERENCE
  object returned by `VariableSource.mOutputPort.fetchAvailableFrame(null)` could be null and is dereferenced at line 35.
  33.   
  34.       protected synchronized void onProcess() {
  35. >         FrameValue frame = this.mOutputPort.fetchAvailableFrame(null).asFrameValue();
  36.           frame.setValue(this.mValue);
  37.           this.mOutputPort.pushFrame(frame);

app/src/main/java/androidx/media/filterpacks/image/StructureTensor2DFilter.java:36: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("dx")` could be null and is dereferenced at line 36.
  34.       protected void onProcess() {
  35.           OutputPort structureTensorPort = getConnectedOutputPort("image");
  36. >         FrameImage2D inputDx = getConnectedInputPort("dx").pullFrame().asFrameImage2D();
  37.           FrameImage2D inputDy = getConnectedInputPort("dy").pullFrame().asFrameImage2D();
  38.           FrameImage2D structureTensor = structureTensorPort.fetchAvailableFrame(inputDx.getDimensions()).asFrameImage2D();

app/src/main/java/androidx/media/filterpacks/base/SequenceToArrayFilter.java:43: error: NULL_DEREFERENCE
  object `controlPort` last assigned on line 36 could be null and is dereferenced at line 43.
  41.           switch (this.mStage) {
  42.               case 1:
  43. >                 if (controlPort.hasFrame()) {
  44.                       this.mNumRemainingElements = ((Integer) controlPort.pullFrame().asFrameValue().getValue()).intValue();
  45.                       if (this.mNumRemainingElements <= 0) {

app/src/main/java/androidx/media/filterpacks/face/FaceToQuadFilter.java:36: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("faces").pullFrame()` could be null and is dereferenced at line 36.
  34.   
  35.       protected void onProcess() {
  36. >         Face[] faces = (Face[]) getConnectedInputPort("faces").pullFrame().asFrameValues().getValues();
  37.           Quad[] quads = new Quad[faces.length];
  38.           for (int i = 0; i < quads.length; i++) {

app/src/main/java/androidx/media/filterpacks/face/FaceToQuadFilter.java:36: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("faces")` could be null and is dereferenced at line 36.
  34.   
  35.       protected void onProcess() {
  36. >         Face[] faces = (Face[]) getConnectedInputPort("faces").pullFrame().asFrameValues().getValues();
  37.           Quad[] quads = new Quad[faces.length];
  38.           for (int i = 0; i < quads.length; i++) {

app/src/main/java/androidx/media/filterpacks/face/FaceToRectFilter.java:36: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("faces").pullFrame()` could be null and is dereferenced at line 36.
  34.   
  35.       protected void onProcess() {
  36. >         Face[] faces = (Face[]) getConnectedInputPort("faces").pullFrame().asFrameValues().getValues();
  37.           if (faces == null) {
  38.               faces = new Face[0];

app/src/main/java/androidx/media/filterpacks/face/FaceToRectFilter.java:36: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("faces")` could be null and is dereferenced at line 36.
  34.   
  35.       protected void onProcess() {
  36. >         Face[] faces = (Face[]) getConnectedInputPort("faces").pullFrame().asFrameValues().getValues();
  37.           if (faces == null) {
  38.               faces = new Face[0];

app/src/main/java/androidx/media/filterfw/imageutils/ImageCropper.java:38: error: NULL_DEREFERENCE
  object `inDims` last assigned on line 37 could be null and is dereferenced by call to `computeCropDimensions(...)` at line 38.
  36.       public void cropImage(FrameImage2D inputImage, Quad cropQuad, FrameImage2D outputImage, boolean useMipmaps) {
  37.           int[] inDims = inputImage.getDimensions();
  38. >         int[] croppedDims = computeCropDimensions(inDims, cropQuad);
  39.           int outputWidth = outputImage.getWidth();
  40.           int outputHeight = outputImage.getHeight();

app/src/main/java/androidx/media/filterpacks/base/SwitchFilter.java:43: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("input")` could be null and is dereferenced at line 43.
  41.                   throw new RuntimeException(new StringBuilder(String.valueOf(str).length() + 23).append("Unknown target port '").append(str).append("'!").toString());
  42.               } else if (outputPort.isAvailable()) {
  43. >                 outputPort.pushFrame(getConnectedInputPort("input").pullFrame());
  44.               }
  45.           }

app/src/main/java/androidx/media/filterpacks/image/MaskingFilter.java:38: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("image")` could be null and is dereferenced at line 38.
  36.       protected void onProcess() {
  37.           OutputPort maskedImagePort = getConnectedOutputPort("image");
  38. >         FrameImage2D inputImage = getConnectedInputPort("image").pullFrame().asFrameImage2D();
  39.           FrameImage2D maskImage = getConnectedInputPort("mask").pullFrame().asFrameImage2D();
  40.           FrameImage2D maskedImage = maskedImagePort.fetchAvailableFrame(inputImage.getDimensions()).asFrameImage2D();

app/src/main/java/androidx/media/filterpacks/base/GateFilter.java:38: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("frame")` could be null and is dereferenced at line 38.
  36.   
  37.       protected synchronized void onProcess() {
  38. >         Frame frame = getConnectedInputPort("frame").pullFrame();
  39.           if (this.mPassFrames > 0) {
  40.               getConnectedOutputPort("frame").pushFrame(frame);

app/src/main/java/androidx/media/filterpacks/base/ValueTarget.java:38: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("value").pullFrame()` could be null and is dereferenced at line 38.
  36.   
  37.       protected void onProcess() {
  38. >         FrameValue valueFrame = getConnectedInputPort("value").pullFrame().asFrameValue();
  39.           if (this.mListener == null) {
  40.               return;

app/src/main/java/androidx/media/filterpacks/base/ValueTarget.java:38: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("value")` could be null and is dereferenced at line 38.
  36.   
  37.       protected void onProcess() {
  38. >         FrameValue valueFrame = getConnectedInputPort("value").pullFrame().asFrameValue();
  39.           if (this.mListener == null) {
  40.               return;

app/src/main/java/androidx/media/filterpacks/image/BrightnessFilter.java:39: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("image")` could be null and is dereferenced at line 39.
  37.       protected void onProcess() {
  38.           OutputPort outPort = getConnectedOutputPort("image");
  39. >         FrameImage2D inputImage = getConnectedInputPort("image").pullFrame().asFrameImage2D();
  40.           FrameImage2D outputImage = outPort.fetchAvailableFrame(inputImage.getDimensions()).asFrameImage2D();
  41.           this.mShader.setUniformValue("brightness", this.mBrightness);

app/src/main/java/androidx/media/filterpacks/image/ColorTemperatureFilter.java:39: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("image")` could be null and is dereferenced at line 39.
  37.       protected void onProcess() {
  38.           OutputPort outPort = getConnectedOutputPort("image");
  39. >         FrameImage2D inputImage = getConnectedInputPort("image").pullFrame().asFrameImage2D();
  40.           FrameImage2D outputImage = outPort.fetchAvailableFrame(inputImage.getDimensions()).asFrameImage2D();
  41.           this.mShader.setUniformValue("scale", (2.0f * this.mScale) - 1.0f);

app/src/main/java/androidx/media/filterpacks/image/ContrastFilter.java:39: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("image")` could be null and is dereferenced at line 39.
  37.       protected void onProcess() {
  38.           OutputPort outPort = getConnectedOutputPort("image");
  39. >         FrameImage2D inputImage = getConnectedInputPort("image").pullFrame().asFrameImage2D();
  40.           FrameImage2D outputImage = outPort.fetchAvailableFrame(inputImage.getDimensions()).asFrameImage2D();
  41.           this.mShader.setUniformValue("contrast", this.mContrast);

app/src/main/java/androidx/media/filterpacks/image/ExposureFilter.java:39: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("image")` could be null and is dereferenced at line 39.
  37.       protected void onProcess() {
  38.           OutputPort outPort = getConnectedOutputPort("image");
  39. >         FrameImage2D inputImage = getConnectedInputPort("image").pullFrame().asFrameImage2D();
  40.           FrameImage2D outputImage = outPort.fetchAvailableFrame(inputImage.getDimensions()).asFrameImage2D();
  41.           this.mShader.setUniformValue("exposure", this.mExposure);

app/src/main/java/androidx/media/filterpacks/image/PosterizeFilter.java:39: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("image")` could be null and is dereferenced at line 39.
  37.       protected void onProcess() {
  38.           OutputPort outPort = getConnectedOutputPort("image");
  39. >         FrameImage2D inputImage = getConnectedInputPort("image").pullFrame().asFrameImage2D();
  40.           FrameImage2D outputImage = outPort.fetchAvailableFrame(inputImage.getDimensions()).asFrameImage2D();
  41.           if (this.mLevels < 2) {

app/src/main/java/com/google/android/apps/photolab/storyboard/pipeline/ComicCache.java:39: error: NULL_DEREFERENCE
  object returned by `getCurrentComic(1)` could be null and is dereferenced at line 39.
  37.       public ArrayList<ComicPanel> getCurrentPanels() {
  38.           if (getCurrentComic(true) != null) {
  39. >             return getCurrentComic(true).getPanels();
  40.           }
  41.           return new ArrayList();

app/src/main/java/androidx/media/filterfw/FrameType.java:39: error: NULL_DEREFERENCE
  object `null` is dereferenced by call to `fetchType(...)` at line 39.
  37.   
  38.       public static FrameType array() {
  39. >         return fetchType(null, 1);
  40.       }
  41.   

app/src/main/java/androidx/media/filterpacks/base/GraphOutputTarget.java:43: error: NULL_DEREFERENCE
  object `frame` last assigned on line 39 could be null and is dereferenced at line 43.
  41.               this.mFrame.release();
  42.           }
  43. >         this.mFrame = frame.retain();
  44.       }
  45.   

app/src/main/java/androidx/media/filterpacks/base/GraphOutputTarget.java:39: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("frame")` could be null and is dereferenced at line 39.
  37.   
  38.       protected void onProcess() {
  39. >         Frame frame = getConnectedInputPort("frame").pullFrame();
  40.           if (this.mFrame != null) {
  41.               this.mFrame.release();

app/src/main/java/androidx/media/filterpacks/histogram/CompareHistogramFilter.java:61: error: NULL_DEREFERENCE
  object `outPort` last assigned on line 60 could be null and is dereferenced at line 61.
  59.                   result /= this.mHistogram1.length > 1 ? (float) (this.mHistogram1.length - 1) : 1.0f;
  60.                   OutputPort outPort = getConnectedOutputPort("value");
  61. >                 FrameValue frame = outPort.fetchAvailableFrame(null).asFrameValue();
  62.                   frame.setValue(Float.valueOf(result));
  63.                   outPort.pushFrame(frame);

app/src/main/java/androidx/media/filterpacks/histogram/CompareHistogramFilter.java:61: error: NULL_DEREFERENCE
  object returned by `outPort.fetchAvailableFrame(null)` could be null and is dereferenced at line 61.
  59.                   result /= this.mHistogram1.length > 1 ? (float) (this.mHistogram1.length - 1) : 1.0f;
  60.                   OutputPort outPort = getConnectedOutputPort("value");
  61. >                 FrameValue frame = outPort.fetchAvailableFrame(null).asFrameValue();
  62.                   frame.setValue(Float.valueOf(result));
  63.                   outPort.pushFrame(frame);

imageeditlibrary/src/main/java/com/xinlan/imageeditlibrary/picchooser/ImagesFragment.java:42: error: NULL_DEREFERENCE
  object returned by `getActivity()` could be null and is dereferenced at line 42.
  40.   		View v = inflater.inflate(R.layout.gallery, null);
  41.   
  42. > 		Cursor cur = getActivity().getContentResolver()
  43.   				.query(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,
  44.   						new String[] { MediaStore.Images.Media.DATA,

app/src/main/java/androidx/media/filterpacks/histogram/GrayHistogramFilter.java:42: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("image").pullFrame()` could be null and is dereferenced at line 42.
  40.           FrameImage2D inputMask;
  41.           ByteBuffer bufMask;
  42. >         FrameImage2D inputImage = getConnectedInputPort("image").pullFrame().asFrameImage2D();
  43.           if (this.mHasMask) {
  44.               inputMask = getConnectedInputPort("mask").pullFrame().asFrameImage2D();

app/src/main/java/androidx/media/filterpacks/histogram/GrayHistogramFilter.java:42: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("image")` could be null and is dereferenced at line 42.
  40.           FrameImage2D inputMask;
  41.           ByteBuffer bufMask;
  42. >         FrameImage2D inputImage = getConnectedInputPort("image").pullFrame().asFrameImage2D();
  43.           if (this.mHasMask) {
  44.               inputMask = getConnectedInputPort("mask").pullFrame().asFrameImage2D();

app/src/main/java/androidx/media/filterpacks/image/BitmapSource.java:40: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("bitmap").pullFrame()` could be null and is dereferenced at line 40.
  38.   
  39.       protected void onProcess() {
  40. >         Bitmap bitmap = (Bitmap) getConnectedInputPort("bitmap").pullFrame().asFrameValue().getValue();
  41.           OutputPort outPort = getConnectedOutputPort("image");
  42.           if (this.mLastBitmap != bitmap || this.mAlwaysRead) {

app/src/main/java/androidx/media/filterpacks/image/BitmapSource.java:40: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("bitmap")` could be null and is dereferenced at line 40.
  38.   
  39.       protected void onProcess() {
  40. >         Bitmap bitmap = (Bitmap) getConnectedInputPort("bitmap").pullFrame().asFrameValue().getValue();
  41.           OutputPort outPort = getConnectedOutputPort("image");
  42.           if (this.mLastBitmap != bitmap || this.mAlwaysRead) {

app/src/main/java/androidx/media/filterpacks/image/GaussianFilter7x7.java:41: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("image")` could be null and is dereferenced at line 41.
  39.       protected void onProcess() {
  40.           OutputPort smoothedImagePort = getConnectedOutputPort("image");
  41. >         FrameImage2D inputImage = getConnectedInputPort("image").pullFrame().asFrameImage2D();
  42.           int[] inputDims = inputImage.getDimensions();
  43.           FrameImage2D smoothedImage = smoothedImagePort != null ? smoothedImagePort.fetchAvailableFrame(inputDims).asFrameImage2D() : null;

app/src/main/java/androidx/media/filterpacks/image/TintFilter.java:41: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("image")` could be null and is dereferenced at line 41.
  39.       protected synchronized void onProcess() {
  40.           OutputPort outPort = getConnectedOutputPort("image");
  41. >         FrameImage2D inputImage = getConnectedInputPort("image").pullFrame().asFrameImage2D();
  42.           FrameImage2D outputImage = outPort.fetchAvailableFrame(inputImage.getDimensions()).asFrameImage2D();
  43.           this.mShader.setUniformValue("tint", new float[]{((float) Color.red(this.mTint)) / 255.0f, ((float) Color.green(this.mTint)) / 255.0f, ((float) Color.blue(this.mTint)) / 255.0f});

imageeditlibrary/src/main/java/com/xinlan/imageeditlibrary/picchooser/BucketsFragment.java:47: error: NULL_DEREFERENCE
  object returned by `getActivity()` could be null and is dereferenced at line 47.
  45.                   MediaStore.Images.Media.BUCKET_ID};
  46.   
  47. >         Cursor cur = getActivity().getContentResolver().query(
  48.                   MediaStore.Images.Media.EXTERNAL_CONTENT_URI,
  49.                   projection,

app/src/main/java/androidx/media/filterpacks/image/HarrisCornerFilter.java:42: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("structureTensor")` could be null and is dereferenced at line 42.
  40.       protected void onProcess() {
  41.           OutputPort cornerMapPort = getConnectedOutputPort("cornerMap");
  42. >         FrameImage2D structureTensor = getConnectedInputPort("structureTensor").pullFrame().asFrameImage2D();
  43.           int[] inputDims = structureTensor.getDimensions();
  44.           FrameImage2D cornerMap = cornerMapPort.fetchAvailableFrame(inputDims).asFrameImage2D();

app/src/main/java/androidx/media/filterpacks/image/SharpenFilter.java:43: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("image")` could be null and is dereferenced at line 43.
  41.           Log.i("SharpenFilter", "onProcess BEGIN");
  42.           OutputPort outPort = getConnectedOutputPort("image");
  43. >         FrameImage2D inputImage = getConnectedInputPort("image").pullFrame().asFrameImage2D();
  44.           FrameImage2D outputImage = outPort.fetchAvailableFrame(inputImage.getDimensions()).asFrameImage2D();
  45.           int width = inputImage.getWidth();

app/src/main/java/androidx/media/filterpacks/transform/RotateFilter.java:43: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("image")` could be null and is dereferenced at line 43.
  41.       protected void onProcess() {
  42.           OutputPort outPort = getConnectedOutputPort("image");
  43. >         FrameImage2D inputImage = getConnectedInputPort("image").pullFrame().asFrameImage2D();
  44.           FrameImage2D outputImage = outPort.fetchAvailableFrame(inputImage.getDimensions()).asFrameImage2D();
  45.           this.mShader.setSourceQuad(this.mSourceRect);

app/src/main/java/com/mp/android/apps/monke/monkeybook/model/impl/ImportBookModelImpl.java:54: error: NULL_DEREFERENCE
  object returned by `getInstance().getmDaoSession()` could be null and is dereferenced at line 54.
  52.                   String md5 = new BigInteger(1, md.digest()).toString(16);
  53.                   BookShelfBean bookShelfBean = null;
  54. >                 List<BookShelfBean> temp = DbHelper.getInstance().getmDaoSession().getBookShelfBeanDao().queryBuilder().where(BookShelfBeanDao.Properties.NoteUrl.eq(md5)).build().list();
  55.                   Boolean isNew = true;
  56.                   if (temp!=null && temp.size()>0) {

app/src/main/java/androidx/media/filterpacks/base/BranchFilter.java:43: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("input")` could be null and is dereferenced at line 43.
  41.   
  42.       protected void onProcess() {
  43. >         Frame inputFrame = getConnectedInputPort("input").pullFrame();
  44.           for (OutputPort outputPort : getConnectedOutputPorts()) {
  45.               if (outputPort.isAvailable()) {

app/src/main/java/androidx/media/filterpacks/base/CountLimitFilter.java:44: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("frame")` could be null and is dereferenced at line 44.
  42.       protected synchronized void onProcess() {
  43.           if (this.mCount < this.mMaxCount) {
  44. >             getConnectedOutputPort("frame").pushFrame(getConnectedInputPort("frame").pullFrame());
  45.           }
  46.           this.mCount++;

app/src/main/java/androidx/media/filterpacks/image/DocumentaryFilter.java:43: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("image").pullFrame()` could be null and is dereferenced at line 43.
  41.   
  42.       protected synchronized void onProcess() {
  43. >         FrameImage2D inputImage = getConnectedInputPort("image").pullFrame().asFrameImage2D();
  44.           int[] dim = inputImage.getDimensions();
  45.           OutputPort outPort = getConnectedOutputPort("image");

app/src/main/java/androidx/media/filterpacks/image/DocumentaryFilter.java:43: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("image")` could be null and is dereferenced at line 43.
  41.   
  42.       protected synchronized void onProcess() {
  43. >         FrameImage2D inputImage = getConnectedInputPort("image").pullFrame().asFrameImage2D();
  44.           int[] dim = inputImage.getDimensions();
  45.           OutputPort outPort = getConnectedOutputPort("image");

app/src/main/java/com/mp/android/apps/monke/monkeybook/presenter/impl/MainPresenterImpl.java:43: error: NULL_DEREFERENCE
  object returned by `getInstance().getmDaoSession()` could be null and is dereferenced at line 43.
  41.               @Override
  42.               public void subscribe(ObservableEmitter<List<BookShelfBean>> e) throws Exception {
  43. >                 List<BookShelfBean> bookShelfes = DbHelper.getInstance().getmDaoSession().getBookShelfBeanDao().queryBuilder().orderDesc(BookShelfBeanDao.Properties.FinalDate).list();
  44.                   for (int i = 0; i < bookShelfes.size(); i++) {
  45.                       List<BookInfoBean> temp = DbHelper.getInstance().getmDaoSession().getBookInfoBeanDao().queryBuilder().where(BookInfoBeanDao.Properties.NoteUrl.eq(bookShelfes.get(i).getNoteUrl())).limit(1).build().list();

app/src/main/java/androidx/media/filterpacks/base/MergeFilter.java:57: error: NULL_DEREFERENCE
  object returned by `*ports[bestPortIx].pullFrame()` could be null and is dereferenced by call to `pushFrame(...)` at line 57.
  55.           }
  56.           if (bestPortIx >= 0) {
  57. >             getConnectedOutputPort("output").pushFrame(ports[bestPortIx].pullFrame());
  58.               updateScore(bestPortIx);
  59.           }

app/src/main/java/androidx/media/filterpacks/base/MergeFilter.java:57: error: NULL_DEREFERENCE
  object returned by `getConnectedOutputPort("output")` could be null and is dereferenced at line 57.
  55.           }
  56.           if (bestPortIx >= 0) {
  57. >             getConnectedOutputPort("output").pushFrame(ports[bestPortIx].pullFrame());
  58.               updateScore(bestPortIx);
  59.           }

app/src/main/java/androidx/media/filterpacks/histogram/ChromaHistogramFilter.java:44: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("image").pullFrame()` could be null and is dereferenced at line 44.
  42.   
  43.       protected void onProcess() {
  44. >         FrameBuffer2D imageFrame = getConnectedInputPort("image").pullFrame().asFrameImage2D();
  45.           OutputPort outPort = getConnectedOutputPort("histogram");
  46.           FrameBuffer2D histogramFrame = outPort.fetchAvailableFrame(new int[]{this.mHueBins, this.mSaturationBins}).asFrameBuffer2D();

app/src/main/java/androidx/media/filterpacks/histogram/ChromaHistogramFilter.java:44: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("image")` could be null and is dereferenced at line 44.
  42.   
  43.       protected void onProcess() {
  44. >         FrameBuffer2D imageFrame = getConnectedInputPort("image").pullFrame().asFrameImage2D();
  45.           OutputPort outPort = getConnectedOutputPort("histogram");
  46.           FrameBuffer2D histogramFrame = outPort.fetchAvailableFrame(new int[]{this.mHueBins, this.mSaturationBins}).asFrameBuffer2D();

app/src/main/java/androidx/media/filterpacks/image/BoxFilter.java:45: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("image")` could be null and is dereferenced at line 45.
  43.       protected void onProcess() {
  44.           OutputPort smoothedImagePort = getConnectedOutputPort("image");
  45. >         FrameImage2D inputImage = getConnectedInputPort("image").pullFrame().asFrameImage2D();
  46.           FrameImage2D smoothedImage = smoothedImagePort.fetchAvailableFrame(inputImage.getDimensions()).asFrameImage2D();
  47.           if (this.mFilterHeight > inputImage.getHeight() || this.mFilterWidth > inputImage.getWidth()) {

app/src/main/java/androidx/media/filterpacks/image/TexturedPosterizeFilter.java:46: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("image")` could be null and is dereferenced at line 46.
  44.           OutputPort outPort = getConnectedOutputPort("image");
  45.           FrameImage2D[] inputFrames = new FrameImage2D[(this.mTexturePorts.size() + 1)];
  46. >         inputFrames[0] = getConnectedInputPort("image").pullFrame().asFrameImage2D();
  47.           int[] dim = inputFrames[0].getDimensions();
  48.           int i = 1;

app/src/main/java/androidx/media/filterpacks/performance/ThroughputFilter.java:44: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("frame")` could be null and is dereferenced at line 44.
  42.   
  43.       protected synchronized void onProcess() {
  44. >         Frame inputFrame = getConnectedInputPort("frame").pullFrame();
  45.           this.mTotalFrameCount++;
  46.           this.mPeriodFrameCount++;

app/src/main/java/com/google/android/apps/photolab/storyboard/activity/Caption.java:45: error: NULL_DEREFERENCE
  object returned by `getContext()` could be null and is dereferenced at line 45.
  43.       public TextPaint getTextPaint() {
  44.           if (this.textPaint == null) {
  45. >             this.typeface = Typeface.createFromAsset(ComicActivity.getContext().getAssets(), "fonts/CantedComicRegular.ttf");
  46.               this.textPaint = new TextPaint();
  47.               this.textPaint.setColor(ViewCompat.MEASURED_STATE_MASK);

app/src/main/java/androidx/media/filterpacks/image/FillLightFilter.java:46: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("image")` could be null and is dereferenced at line 46.
  44.       protected void onProcess() {
  45.           OutputPort outPort = getConnectedOutputPort("image");
  46. >         FrameImage2D inputImage = getConnectedInputPort("image").pullFrame().asFrameImage2D();
  47.           FrameImage2D outputImage = outPort.fetchAvailableFrame(inputImage.getDimensions()).asFrameImage2D();
  48.           updateParameters();

app/src/main/java/androidx/media/filterpacks/image/SaturateFilter.java:46: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("image")` could be null and is dereferenced at line 46.
  44.       protected void onProcess() {
  45.           OutputPort outPort = getConnectedOutputPort("image");
  46. >         FrameImage2D inputImage = getConnectedInputPort("image").pullFrame().asFrameImage2D();
  47.           FrameImage2D outputImage = outPort.fetchAvailableFrame(inputImage.getDimensions()).asFrameImage2D();
  48.           if (this.mScale > 0.0f) {

app/src/main/java/androidx/media/filterpacks/miscellaneous/QuadsToMaskFilter.java:46: error: NULL_DEREFERENCE
  object `outPort` last assigned on line 45 could be null and is dereferenced at line 46.
  44.       protected void onProcess() {
  45.           OutputPort outPort = getConnectedOutputPort("mask");
  46. >         FrameImage2D outputImage = outPort.fetchAvailableFrame(this.mImageSize).asFrameImage2D();
  47.           this.mBackgroundShader.processNoInput(outputImage);
  48.           for (Quad targetQuad : this.mQuads) {

app/src/main/java/androidx/media/filterpacks/miscellaneous/QuadsToMaskFilter.java:46: error: NULL_DEREFERENCE
  object returned by `outPort.fetchAvailableFrame(QuadsToMaskFilter.mImageSize)` could be null and is dereferenced at line 46.
  44.       protected void onProcess() {
  45.           OutputPort outPort = getConnectedOutputPort("mask");
  46. >         FrameImage2D outputImage = outPort.fetchAvailableFrame(this.mImageSize).asFrameImage2D();
  47.           this.mBackgroundShader.processNoInput(outputImage);
  48.           for (Quad targetQuad : this.mQuads) {

app/src/main/java/androidx/media/filterpacks/numeric/StatsFilter.java:46: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("buffer").pullFrame()` could be null and is dereferenced at line 46.
  44.   
  45.       protected void onProcess() {
  46. >         Statistics stats = this.mRegionStatsCalculator.calcMeanAndStd(getConnectedInputPort("buffer").pullFrame().asFrameBuffer2D(), this.mCropRect, this.mSuppressZero);
  47.           OutputPort outPort = getConnectedOutputPort("mean");
  48.           if (outPort != null) {

app/src/main/java/androidx/media/filterpacks/numeric/StatsFilter.java:46: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("buffer")` could be null and is dereferenced at line 46.
  44.   
  45.       protected void onProcess() {
  46. >         Statistics stats = this.mRegionStatsCalculator.calcMeanAndStd(getConnectedInputPort("buffer").pullFrame().asFrameBuffer2D(), this.mCropRect, this.mSuppressZero);
  47.           OutputPort outPort = getConnectedOutputPort("mean");
  48.           if (outPort != null) {

app/src/main/java/androidx/media/filterpacks/miscellaneous/DisplayHistogram.java:48: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("image")` could be null and is dereferenced at line 48.
  46.       protected void onProcess() {
  47.           OutputPort outPort = getConnectedOutputPort("composite");
  48. >         FrameImage2D inputImage = getConnectedInputPort("image").pullFrame().asFrameImage2D();
  49.           int[] imgDim = inputImage.getDimensions();
  50.           FrameImage2D outputImage = outPort.fetchAvailableFrame(imgDim).asFrameImage2D();

app/src/main/java/com/google/android/apps/photolab/storyboard/pipeline/VideoLoader.java:48: error: NULL_DEREFERENCE
  object `frame` last assigned on line 47 could be null and is dereferenced at line 48.
  46.           protected void onProcess() {
  47.               Frame frame = getConnectedInputPort("image").pullFrame();
  48. >             VideoLoader.this.listener.onFrame(frame.asFrameImage2D(), frame.getTimestampMillis());
  49.           }
  50.   

app/src/main/java/com/google/android/apps/photolab/storyboard/pipeline/VideoLoader.java:47: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("image")` could be null and is dereferenced at line 47.
  45.   
  46.           protected void onProcess() {
  47. >             Frame frame = getConnectedInputPort("image").pullFrame();
  48.               VideoLoader.this.listener.onFrame(frame.asFrameImage2D(), frame.getTimestampMillis());
  49.           }

app/src/main/java/androidx/media/filterpacks/image/ConvolutionFilter.java:49: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("image")` could be null and is dereferenced at line 49.
  47.       protected void onProcess() {
  48.           OutputPort outPort = getConnectedOutputPort("image");
  49. >         FrameImage2D inputImage = getConnectedInputPort("image").pullFrame().asFrameImage2D();
  50.           int[] dim = inputImage.getDimensions();
  51.           FrameImage2D outputImage = outPort.fetchAvailableFrame(dim).asFrameImage2D();

app/src/main/java/androidx/media/filterpacks/image/LomoishFilter.java:49: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("image")` could be null and is dereferenced at line 49.
  47.       protected void onProcess() {
  48.           OutputPort outPort = getConnectedOutputPort("image");
  49. >         FrameImage2D inputImage = getConnectedInputPort("image").pullFrame().asFrameImage2D();
  50.           if (!(inputImage.getWidth() == this.mWidth && inputImage.getHeight() == this.mHeight)) {
  51.               this.mWidth = inputImage.getWidth();

app/src/main/java/androidx/media/filterpacks/base/IterateFilter.java:50: error: NULL_DEREFERENCE
  object `frame.mBackingStore` last assigned on line 50 could be null and is dereferenced by call to `release()` at line 50.
  48.       protected void clearInputs() {
  49.           for (Frame frame : this.mInputFrames.values()) {
  50. >             frame.release();
  51.           }
  52.           this.mInputFrames.clear();

app/src/main/java/androidx/media/filterpacks/image/StraightenFilter.java:50: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("image")` could be null and is dereferenced at line 50.
  48.           Log.i("StraightenFilter", "onProcess BEGIN");
  49.           OutputPort outPort = getConnectedOutputPort("image");
  50. >         FrameImage2D inputImage = getConnectedInputPort("image").pullFrame().asFrameImage2D();
  51.           FrameImage2D outputImage = outPort.fetchAvailableFrame(inputImage.getDimensions()).asFrameImage2D();
  52.           if (!(inputImage.getWidth() == this.mWidth && inputImage.getHeight() == this.mHeight)) {

app/src/main/java/androidx/media/filterpacks/sensors/MotionSensor.java:50: error: NULL_DEREFERENCE
  object `outPort` last assigned on line 49 could be null and is dereferenced at line 50.
  48.       protected void onProcess() {
  49.           OutputPort outPort = getConnectedOutputPort("values");
  50. >         FrameValues outFrame = outPort.fetchAvailableFrame(null).asFrameValues();
  51.           synchronized (this.mValues) {
  52.               outFrame.setValues(this.mValues);

app/src/main/java/androidx/media/filterpacks/sensors/MotionSensor.java:50: error: NULL_DEREFERENCE
  object returned by `outPort.fetchAvailableFrame(null)` could be null and is dereferenced at line 50.
  48.       protected void onProcess() {
  49.           OutputPort outPort = getConnectedOutputPort("values");
  50. >         FrameValues outFrame = outPort.fetchAvailableFrame(null).asFrameValues();
  51.           synchronized (this.mValues) {
  52.               outFrame.setValues(this.mValues);

app/src/main/java/com/mp/android/apps/monke/monkeybook/presenter/impl/ChoiceBookPresenterImpl.java:49: error: NULL_DEREFERENCE
  object returned by `getInstance().getmDaoSession()` could be null and is dereferenced at line 49.
  47.               @Override
  48.               public void subscribe(ObservableEmitter<List<BookShelfBean>> e) throws Exception {
  49. >                 List<BookShelfBean> temp = DbHelper.getInstance().getmDaoSession().getBookShelfBeanDao().queryBuilder().list();
  50.                   if (temp == null)
  51.                       temp = new ArrayList<BookShelfBean>();

app/src/main/java/androidx/media/filterpacks/transform/CropFilter.java:51: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("image")` could be null and is dereferenced at line 51.
  49.       protected void onProcess() {
  50.           OutputPort outPort = getConnectedOutputPort("image");
  51. >         FrameImage2D inputImage = getConnectedInputPort("image").pullFrame().asFrameImage2D();
  52.           int[] croppedDims = ImageCropper.computeCropDimensions(inputImage.getDimensions(), this.mCropRect);
  53.           FrameImage2D outputImage = outPort.fetchAvailableFrame(new int[]{getOutputWidth(croppedDims[0], croppedDims[1]), getOutputHeight(croppedDims[0], croppedDims[1])}).asFrameImage2D();

app/src/main/java/com/mp/android/apps/monke/monkeybook/utils/base64/CharacterDecoder.java:74: error: RESOURCE_LEAK
  resource of type `java.io.PushbackInputStream` acquired by call to `new()` at line 51 is not released after line 74.
**Note**: potential exception at line 68
  72.                   this.decodeLineSuffix(var5, var2);
  73.               } catch (CEStreamExhausted var8) {
  74. >                 this.decodeBufferSuffix(var5, var2);
  75.                   return;
  76.               }

app/src/main/java/androidx/media/filterpacks/image/DuotoneFilter.java:52: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("image")` could be null and is dereferenced at line 52.
  50.       protected void onProcess() {
  51.           OutputPort outPort = getConnectedOutputPort("image");
  52. >         FrameImage2D inputImage = getConnectedInputPort("image").pullFrame().asFrameImage2D();
  53.           FrameImage2D outputImage = outPort.fetchAvailableFrame(inputImage.getDimensions()).asFrameImage2D();
  54.           updateParameters();

app/src/main/java/androidx/media/filterpacks/numeric/WaveSource.java:53: error: NULL_DEREFERENCE
  object `outputPort` last assigned on line 52 could be null and is dereferenced at line 53.
  51.           float result;
  52.           OutputPort outputPort = getConnectedOutputPort("value");
  53. >         FrameValue frame = outputPort.fetchAvailableFrame(null).asFrameValue();
  54.           long t = SystemClock.elapsedRealtime();
  55.           switch (this.mMode) {

app/src/main/java/androidx/media/filterpacks/numeric/WaveSource.java:53: error: NULL_DEREFERENCE
  object returned by `outputPort.fetchAvailableFrame(null)` could be null and is dereferenced at line 53.
  51.           float result;
  52.           OutputPort outputPort = getConnectedOutputPort("value");
  53. >         FrameValue frame = outputPort.fetchAvailableFrame(null).asFrameValue();
  54.           long t = SystemClock.elapsedRealtime();
  55.           switch (this.mMode) {

app/src/main/java/com/google/android/apps/photolab/storyboard/pipeline/GlDownscaleFilter.java:53: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("image")` could be null and is dereferenced at line 53.
  51.           long startTimeMs = System.currentTimeMillis();
  52.           OutputPort outPort = getConnectedOutputPort("image");
  53. >         FrameImage2D inputImage = getConnectedInputPort("image").pullFrame().asFrameImage2D();
  54.           FrameImage2D outputImage = outPort.fetchAvailableFrame(new int[]{this.outputWidth, this.outputHeight}).asFrameImage2D();
  55.           GLES30.glHint(33170, 4353);

app/src/main/java/androidx/media/filterpacks/histogram/NewChromaHistogramFilter.java:53: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("image").pullFrame()` could be null and is dereferenced at line 53.
  51.   
  52.       protected void onProcess() {
  53. >         FrameBuffer2D imageFrame = getConnectedInputPort("image").pullFrame().asFrameImage2D();
  54.           OutputPort hueSatPort = getConnectedOutputPort("huesat");
  55.           OutputPort valuePort = getConnectedOutputPort("value");

app/src/main/java/androidx/media/filterpacks/histogram/NewChromaHistogramFilter.java:53: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("image")` could be null and is dereferenced at line 53.
  51.   
  52.       protected void onProcess() {
  53. >         FrameBuffer2D imageFrame = getConnectedInputPort("image").pullFrame().asFrameImage2D();
  54.           OutputPort hueSatPort = getConnectedOutputPort("huesat");
  55.           OutputPort valuePort = getConnectedOutputPort("value");

app/src/main/java/androidx/media/filterpacks/image/BitmapTarget.java:53: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("image").pullFrame()` could be null and is dereferenced at line 53.
  51.   
  52.       protected void onProcess() {
  53. >         final Bitmap bitmap = getConnectedInputPort("image").pullFrame().asFrameImage2D().toBitmap();
  54.           if (this.mImageView != null) {
  55.               this.mImageView.post(new Runnable() {

app/src/main/java/androidx/media/filterpacks/image/BitmapTarget.java:53: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("image")` could be null and is dereferenced at line 53.
  51.   
  52.       protected void onProcess() {
  53. >         final Bitmap bitmap = getConnectedInputPort("image").pullFrame().asFrameImage2D().toBitmap();
  54.           if (this.mImageView != null) {
  55.               this.mImageView.post(new Runnable() {

app/src/main/java/androidx/media/filterpacks/image/BlackWhiteFilter.java:54: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("image")` could be null and is dereferenced at line 54.
  52.       protected void onProcess() {
  53.           OutputPort outPort = getConnectedOutputPort("image");
  54. >         FrameImage2D inputImage = getConnectedInputPort("image").pullFrame().asFrameImage2D();
  55.           FrameImage2D outputImage = outPort.fetchAvailableFrame(inputImage.getDimensions()).asFrameImage2D();
  56.           updateParameters();

app/src/main/java/com/google/android/apps/photolab/storyboard/activity/SpeechBubble.java:54: error: NULL_DEREFERENCE
  object returned by `getContext()` could be null and is dereferenced at line 54.
  52.       public static TextPaint getTextPaint() {
  53.           if (textPaint == null) {
  54. >             typeface = Typeface.createFromAsset(ComicActivity.getContext().getAssets(), "fonts/CantedComicBold.ttf");
  55.               textPaint = new TextPaint();
  56.               textPaint.setColor(ViewCompat.MEASURED_STATE_MASK);

app/src/main/java/com/google/android/libraries/social/licenses/LicenseMenuFragment.java:55: error: NULL_DEREFERENCE
  object `parentActivity` last assigned on line 53 could be null and is dereferenced at line 55.
  53.           FragmentActivity parentActivity = getActivity();
  54.           this.listAdapter = new ArrayAdapter(parentActivity, R.layout.libraries_social_licenses_license, R.id.license, new ArrayList());
  55. >         parentActivity.getSupportLoaderManager().initLoader(LOADER_ID, null, this);
  56.           ListView listView = (ListView) view.findViewById(R.id.license_list);
  57.           listView.setAdapter(this.listAdapter);

app/src/main/java/androidx/media/filterpacks/transform/GridFilter.java:56: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("image")` could be null and is dereferenced at line 56.
  54.       protected void onProcess() {
  55.           OutputPort outPort = getConnectedOutputPort("image");
  56. >         FrameImage2D inputImage = getConnectedInputPort("image").pullFrame().asFrameImage2D();
  57.           int[] inDims = inputImage.getDimensions();
  58.           this.mTileFrame = MipMapUtils.makeMipMappedFrame(this.mTileFrame, inDims);

app/src/main/java/androidx/media/filterpacks/base/IterateFilter.java:58: error: NULL_DEREFERENCE
  object returned by `inputPort.pullFrame()` could be null and is dereferenced at line 58.
  56.           clearInputs();
  57.           for (InputPort inputPort : getConnectedInputPorts()) {
  58. >             this.mInputFrames.put(inputPort.getName(), inputPort.pullFrame().retain());
  59.           }
  60.           assignInputs();

app/src/main/java/com/google/android/apps/photolab/storyboard/download/MD5Utils.java:63: error: NULL_DEREFERENCE
  object `files` last assigned on line 62 could be null and is dereferenced at line 63.
  61.           String md5;
  62.           File files[] = file.listFiles();
  63. >         for (int i = 0; i < files.length; i++) {
  64.               File f = files[i];
  65.               if (f.isDirectory() && listChild) {

app/src/main/java/androidx/media/filterpacks/image/VignetteFilter.java:59: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("image")` could be null and is dereferenced at line 59.
  57.       protected synchronized void onProcess() {
  58.           OutputPort outPort = getConnectedOutputPort("image");
  59. >         FrameImage2D inputImage = getConnectedInputPort("image").pullFrame().asFrameImage2D();
  60.           FrameImage2D outputImage = outPort.fetchAvailableFrame(inputImage.getDimensions()).asFrameImage2D();
  61.           if (!(inputImage.getWidth() == this.mWidth && inputImage.getHeight() == this.mHeight)) {

app/src/main/java/androidx/media/filterpacks/face/FaceTrackerFilter.java:63: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("image")` could be null and is dereferenced at line 63.
  61.       protected void onProcess() {
  62.           OutputPort outPort = getConnectedOutputPort("faces");
  63. >         FrameImage2D imageFrame = getConnectedInputPort("image").pullFrame().asFrameImage2D();
  64.           this.mFaceTracker.apply(imageFrame.lockTextureSource().getTextureId(), imageFrame.getWidth(), imageFrame.getHeight(), this.mIgnoreTex.getTextureId());
  65.           imageFrame.unlock();

app/src/main/java/androidx/media/filterpacks/miscellaneous/AverageIntensity.java:62: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("image").pullFrame()` could be null and is dereferenced at line 62.
  60.   
  61.       protected void onProcess() {
  62. >         FrameImage2D inputImage = getConnectedInputPort("image").pullFrame().asFrameImage2D();
  63.           int[] dim = inputImage.getDimensions();
  64.           int i = dim[0];

app/src/main/java/androidx/media/filterpacks/miscellaneous/AverageIntensity.java:62: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("image")` could be null and is dereferenced at line 62.
  60.   
  61.       protected void onProcess() {
  62. >         FrameImage2D inputImage = getConnectedInputPort("image").pullFrame().asFrameImage2D();
  63.           int[] dim = inputImage.getDimensions();
  64.           int i = dim[0];

app/src/main/java/com/mp/android/apps/monke/monkeybook/presenter/impl/ImportBookPresenterImpl.java:64: error: NULL_DEREFERENCE
  object returned by `parentFile.listFiles()` could be null and is dereferenced at line 64.
  62.   
  63.       private void searchBook(ObservableEmitter<File> e, File parentFile) {
  64. >         if (null != parentFile && parentFile.listFiles().length > 0) {
  65.               File[] childFiles = parentFile.listFiles();
  66.               for (int i = 0; i < childFiles.length; i++) {

app/src/main/java/com/google/android/apps/photolab/storyboard/activity/ComicTextureView.java:77: error: NULL_DEREFERENCE
  object `cpd` last assigned on line 76 could be null and is dereferenced at line 77.
  75.                       Canvas canvas = this.mSurface.lockCanvas();
  76.                       ComicPageData cpd = cache.getCurrentComic(true);
  77. >                     if (cpd.getLayoutIndex() != this.curShowingLayout) {
  78.                           this.curShowingLayout = cpd.getLayoutIndex();
  79.                       }

app/src/main/java/com/mp/android/apps/monke/monkeybook/presenter/impl/SearchPresenterImpl.java:65: error: NULL_DEREFERENCE
  object returned by `getInstance().getmDaoSession()` could be null and is dereferenced at line 65.
  63.               @Override
  64.               public void subscribe(ObservableEmitter<List<BookShelfBean>> e) throws Exception {
  65. >                 List<BookShelfBean> temp = DbHelper.getInstance().getmDaoSession().getBookShelfBeanDao().queryBuilder().list();
  66.                   if (temp == null)
  67.                       temp = new ArrayList<BookShelfBean>();

imageeditlibrary/src/main/java/com/xinlan/imageeditlibrary/editimage/fragment/AddTextFragment.java:66: error: NULL_DEREFERENCE
  object returned by `getActivity()` could be null and is dereferenced at line 66.
  64.       public View onCreateView(LayoutInflater inflater, ViewGroup container,
  65.                                Bundle savedInstanceState) {
  66. >         imm = (InputMethodManager) getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
  67.           mainView = inflater.inflate(R.layout.fragment_edit_image_add_text, null);
  68.           return mainView;

app/src/main/java/androidx/media/filterpacks/base/DispatchFilter.java:69: error: NULL_DEREFERENCE
  object returned by `inputPort.pullFrame()` could be null and is dereferenced by call to `importFrame(...)` at line 69.
  67.           FrameManager fm = this.mRunner.getFrameManager();
  68.           for (InputPort inputPort : getConnectedInputPorts()) {
  69. >             this.mInputFrames.put(inputPort.getName(), fm.importFrame(inputPort.pullFrame()));
  70.           }
  71.           assignInputs();

app/src/main/java/androidx/media/filterpacks/image/FisheyeFilter.java:67: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("image")` could be null and is dereferenced at line 67.
  65.       protected synchronized void onProcess() {
  66.           OutputPort outPort = getConnectedOutputPort("image");
  67. >         FrameImage2D inputImage = getConnectedInputPort("image").pullFrame().asFrameImage2D();
  68.           FrameImage2D outputImage = outPort.fetchAvailableFrame(inputImage.getDimensions()).asFrameImage2D();
  69.           if (!(inputImage.getWidth() == this.mWidth && inputImage.getHeight() == this.mHeight)) {

app/src/main/java/androidx/media/filterpacks/image/GrainFilter.java:69: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("image")` could be null and is dereferenced at line 69.
  67.       protected synchronized void onProcess() {
  68.           OutputPort outPort = getConnectedOutputPort("image");
  69. >         int[] dim = getConnectedInputPort("image").pullFrame().asFrameImage2D().getDimensions();
  70.           FrameImage2D outputImage = outPort.fetchAvailableFrame(dim).asFrameImage2D();
  71.           if (!(dim[0] == this.mWidth && dim[1] == this.mHeight && this.mNoiseFrame != null)) {

imageeditlibrary/src/main/java/com/xinlan/imageeditlibrary/editimage/fragment/RotateFragment.java:73: error: NULL_DEREFERENCE
  object returned by `BaseEditFragment.activity.getMainBit()` could be null and is dereferenced by call to `addBit(...)` at line 73.
  71.           activity.mainImage.setVisibility(View.GONE);
  72.   
  73. >         activity.mRotatePanel.addBit(activity.getMainBit(),
  74.                   activity.mainImage.getBitmapRect());
  75.           activity.mRotateFragment.mSeekBar.setProgress(0);

app/src/main/java/androidx/media/filterpacks/video/VideoProviderSource.java:78: error: NULL_DEREFERENCE
  object `outPort` last assigned on line 73 could be null and is dereferenced at line 78.
  76.               case 0:
  77.                   if (nextFrame()) {
  78. >                     outFrame = outPort.fetchAvailableFrame(outDims).asFrameImage2D();
  79.                       if (this.mVideoFrameProvider.grabVideoFrame(outFrame, null, this.mMaxDim)) {
  80.                           outPort.pushFrame(outFrame);

app/src/main/java/androidx/media/filterpacks/video/VideoProviderSource.java:90: error: NULL_DEREFERENCE
  object `outPort` last assigned on line 73 could be null and is dereferenced at line 90.
  88.                   return;
  89.               case 2:
  90. >                 outFrame = outPort.fetchAvailableFrame(outDims).asFrameImage2D();
  91.                   outFrame.setTimestamp(-2);
  92.                   outPort.pushFrame(outFrame);

app/src/main/java/androidx/media/filterpacks/video/VideoProviderSource.java:78: error: NULL_DEREFERENCE
  object returned by `outPort.fetchAvailableFrame(outDims)` could be null and is dereferenced at line 78.
  76.               case 0:
  77.                   if (nextFrame()) {
  78. >                     outFrame = outPort.fetchAvailableFrame(outDims).asFrameImage2D();
  79.                       if (this.mVideoFrameProvider.grabVideoFrame(outFrame, null, this.mMaxDim)) {
  80.                           outPort.pushFrame(outFrame);

app/src/main/java/androidx/media/filterpacks/video/VideoProviderSource.java:90: error: NULL_DEREFERENCE
  object returned by `outPort.fetchAvailableFrame(outDims)` could be null and is dereferenced at line 90.
  88.                   return;
  89.               case 2:
  90. >                 outFrame = outPort.fetchAvailableFrame(outDims).asFrameImage2D();
  91.                   outFrame.setTimestamp(-2);
  92.                   outPort.pushFrame(outFrame);

app/src/main/java/com/google/android/libraries/social/licenses/LicenseMenuFragment.java:72: error: NULL_DEREFERENCE
  object returned by `getActivity()` could be null and is dereferenced at line 72.
  70.       public void onDestroy() {
  71.           super.onDestroy();
  72. >         getActivity().getSupportLoaderManager().destroyLoader(LOADER_ID);
  73.       }
  74.   

imageeditlibrary/src/main/java/com/xinlan/imageeditlibrary/editimage/fragment/AddTextFragment.java:75: error: NULL_DEREFERENCE
  object returned by `getActivity()` could be null and is dereferenced at line 75.
  73.           super.onActivityCreated(savedInstanceState);
  74.   
  75. >         mTextStickerView = (TextStickerView)getActivity().findViewById(R.id.text_sticker_panel);
  76.   
  77.           backToMenu = mainView.findViewById(R.id.back_to_main);

app/src/main/java/androidx/media/filterpacks/composite/OverlayFilter.java:84: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("source")` could be null and is dereferenced at line 84.
  82.               this.mOldOverlayMode = this.mOverlayMode;
  83.           }
  84. >         FrameImage2D inputSource = getConnectedInputPort("source").pullFrame().asFrameImage2D();
  85.           FrameImage2D inputOverlay = getConnectedInputPort("overlay").pullFrame().asFrameImage2D();
  86.           FrameImage2D inputMask = null;

app/src/main/java/androidx/media/filterpacks/base/DispatchFilter.java:80: error: NULL_DEREFERENCE
  object returned by `getFrameManager()` could be null and is dereferenced at line 80.
  78.   
  79.       protected void pushOutput(Frame frame, OutputPort outputPort) {
  80. >         Frame imported = getFrameManager().importFrame(frame);
  81.           outputPort.pushFrame(imported);
  82.           saveOutput(outputPort.getName(), imported);

app/src/main/java/com/google/android/apps/photolab/storyboard/soloader/SoFileUtils.java:97: error: RESOURCE_LEAK
  resource of type `java.io.FileInputStream` acquired to `fileInput` by call to `FileInputStream(...)` at line 82 is not released after line 97.
**Note**: potential exception at line 83
  95.               fileInput.close();
  96.               return 0;
  97. >         } catch (Exception ex) {
  98.               return -1;
  99.           }

app/src/main/java/com/google/android/apps/photolab/storyboard/soloader/SoFileUtils.java:97: error: RESOURCE_LEAK
  resource of type `java.io.FileOutputStream` acquired to `fileOutput` by call to `FileOutputStream(...)` at line 83 is not released after line 97.
**Note**: potential exception at line 87
  95.               fileInput.close();
  96.               return 0;
  97. >         } catch (Exception ex) {
  98.               return -1;
  99.           }

imageeditlibrary/src/main/java/com/xinlan/imageeditlibrary/editimage/adapter/StickerAdapter.java:82: error: NULL_DEREFERENCE
  object returned by `StickerAdapter.mStickerFragment.getActivity()` could be null and is dereferenced at line 82.
  80.           pathList.clear();
  81.           try {
  82. >             String[] files = mStickerFragment.getActivity().getAssets()
  83.                       .list(folderPath);
  84.               for (String name : files) {

imageeditlibrary/src/main/java/com/xinlan/imageeditlibrary/editimage/fragment/PaintFragment.java:82: error: NULL_DEREFERENCE
  object returned by `getActivity()` could be null and is dereferenced at line 82.
  80.           super.onActivityCreated(savedInstanceState);
  81.   
  82. >         mPaintView = (CustomPaintView)getActivity().findViewById(R.id.custom_paint_view);
  83.           backToMenu = mainView.findViewById(R.id.back_to_main);
  84.           mPaintModeView = (PaintModeView) mainView.findViewById(R.id.paint_thumb);

app/src/main/java/com/mp/android/apps/livevblank/util/FileUtils.java:91: error: NULL_DEREFERENCE
  object `baseFolder` last assigned on line 90 could be null and is dereferenced at line 91.
  89.   	public static String saveBitmap(String bitName, Bitmap mBitmap) {
  90.   		File baseFolder = createFolders();
  91. > 		File f = new File(baseFolder.getAbsolutePath(), bitName);
  92.   		FileOutputStream fOut = null;
  93.   		try {

app/src/main/java/com/mp/android/apps/livevblank/util/FileUtils.java:101: error: NULL_DEREFERENCE
  object `fOut` last assigned on line 92 could be null and is dereferenced at line 101.
  99.   		mBitmap.compress(Bitmap.CompressFormat.PNG, 100, fOut);
  100.   		try {
  101. > 			fOut.flush();
  102.   			fOut.close();
  103.   		} catch (IOException e) {

app/src/main/java/com/mp/android/apps/monke/monkeybook/presenter/impl/BookDetailPresenterImpl.java:92: error: NULL_DEREFERENCE
  object returned by `getInstance().getmDaoSession()` could be null and is dereferenced at line 92.
  90.               @Override
  91.               public void subscribe(ObservableEmitter<List<BookShelfBean>> e) throws Exception {
  92. >                 List<BookShelfBean> temp = DbHelper.getInstance().getmDaoSession().getBookShelfBeanDao().queryBuilder().list();
  93.                   if (temp == null)
  94.                       temp = new ArrayList<BookShelfBean>();

app/src/main/java/com/mp/android/apps/monke/monkeybook/view/impl/LibraryActivity.java:132: error: NULL_DEREFERENCE
  object `linearLayout` last assigned on line 98 could be null and is dereferenced at line 132.
  130.               View v = new View(this);
  131.               v.setLayoutParams(tvLp);
  132. >             linearLayout.addView(v);
  133.           }
  134.       }

app/src/main/java/androidx/media/filterpacks/image/SurfaceTextureTarget.java:95: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("image").pullFrame()` could be null and is dereferenced at line 95.
  93.   
  94.       protected synchronized void onProcess() {
  95. >         FrameImage2D image = getConnectedInputPort("image").pullFrame().asFrameImage2D();
  96.           if (this.mSurfaceTexture != null) {
  97.               synchronized (this.mSurfaceTexture) {

app/src/main/java/androidx/media/filterpacks/image/SurfaceTextureTarget.java:95: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("image")` could be null and is dereferenced at line 95.
  93.   
  94.       protected synchronized void onProcess() {
  95. >         FrameImage2D image = getConnectedInputPort("image").pullFrame().asFrameImage2D();
  96.           if (this.mSurfaceTexture != null) {
  97.               synchronized (this.mSurfaceTexture) {

app/src/main/java/com/mp/android/apps/monke/monkeybook/ErrorAnalyContentManager.java:112: error: RESOURCE_LEAK
  resource of type `java.io.FileOutputStream` acquired to `fileOutputStream2` by call to `FileOutputStream(...)` at line 106 is not released after line 112.
**Note**: potential exception at line 108
  110.                   e.onNext(true);
  111.                   e.onComplete();
  112. >             }
  113.           })
  114.                   .subscribeOn(Schedulers.io())

app/src/main/java/androidx/media/filterpacks/image/SurfaceHolderTarget.java:97: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("image").pullFrame()` could be null and is dereferenced at line 97.
  95.   
  96.       protected synchronized void onProcess() {
  97. >         FrameImage2D image = getConnectedInputPort("image").pullFrame().asFrameImage2D();
  98.           if (this.mHasSurface) {
  99.               synchronized (this.mSurfaceHolder) {

app/src/main/java/androidx/media/filterpacks/image/SurfaceHolderTarget.java:97: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("image")` could be null and is dereferenced at line 97.
  95.   
  96.       protected synchronized void onProcess() {
  97. >         FrameImage2D image = getConnectedInputPort("image").pullFrame().asFrameImage2D();
  98.           if (this.mHasSurface) {
  99.               synchronized (this.mSurfaceHolder) {

app/src/main/java/com/mp/android/apps/monke/monkeybook/view/popupwindow/DownloadListPop.java:98: error: NULL_DEREFERENCE
  object returned by `getInstance().getmDaoSession()` could be null and is dereferenced at line 98.
  96.               @Override
  97.               public void subscribe(ObservableEmitter<DownloadChapterBean> e) throws Exception {
  98. >                 List<BookShelfBean> bookShelfBeanList = DbHelper.getInstance().getmDaoSession().getBookShelfBeanDao().queryBuilder().orderDesc(BookShelfBeanDao.Properties.FinalDate).list();
  99.                   if (bookShelfBeanList != null && bookShelfBeanList.size() > 0) {
  100.                       for (BookShelfBean bookItem : bookShelfBeanList) {

app/src/main/java/com/mp/android/apps/welcome/WelcomeActivity.java:98: error: NULL_DEREFERENCE
  object returned by `get(this,WelcomeActivity.SP_PRIVACY,valueOf(0))` could be null and is dereferenced at line 98.
  96.       @Override
  97.       protected void firstRequest() {
  98. >         if ((boolean) SharedPreferenceUtil.get(WelcomeActivity.this, SP_PRIVACY, false)) {
  99.               welAnimator.start();
  100.           } else {

app/src/main/java/com/mp/android/apps/login/fragment/LoginDailogFragment.java:157: error: NULL_DEREFERENCE
  object returned by `getActivity()` could be null and is dereferenced at line 157.
  155.   
  156.               case R.id.tv_register:
  157. >                 getActivity().getSupportFragmentManager().beginTransaction().replace(R.id.login_container, registerDailogFragment).commitNow();
  158.                   break;
  159.   

app/src/main/java/androidx/media/filterpacks/decoder/MediaDecoderSource.java:108: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("uri").pullFrame()` could be null and is dereferenced at line 108.
  106.       protected void onPrepare() {
  107.           super.onPrepare();
  108. >         this.mMediaDecoder = new MediaDecoder(getContext().getApplicationContext(), (Uri) getConnectedInputPort("uri").pullFrame().asFrameValue().getValue(), this.mStartMicros, this.mEndMicros, this.mLooping, this.mOffsetBytes);
  109.           this.mMediaDecoder.setPlaybackTimestamps(this.timestamps);
  110.           this.mMediaDecoder.setIFrameSpacing(this.iFrameSpacing);

app/src/main/java/androidx/media/filterpacks/decoder/MediaDecoderSource.java:108: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("uri")` could be null and is dereferenced at line 108.
  106.       protected void onPrepare() {
  107.           super.onPrepare();
  108. >         this.mMediaDecoder = new MediaDecoder(getContext().getApplicationContext(), (Uri) getConnectedInputPort("uri").pullFrame().asFrameValue().getValue(), this.mStartMicros, this.mEndMicros, this.mLooping, this.mOffsetBytes);
  109.           this.mMediaDecoder.setPlaybackTimestamps(this.timestamps);
  110.           this.mMediaDecoder.setIFrameSpacing(this.iFrameSpacing);

app/src/main/java/com/mp/android/apps/monke/monkeybook/presenter/impl/SearchPresenterImpl.java:108: error: NULL_DEREFERENCE
  object returned by `getInstance().getmDaoSession()` could be null and is dereferenced at line 108.
  106.               @Override
  107.               public void subscribe(ObservableEmitter<SearchHistoryBean> e) throws Exception {
  108. >                 List<SearchHistoryBean> datas = DbHelper.getInstance().getmDaoSession().getSearchHistoryBeanDao()
  109.                           .queryBuilder()
  110.                           .where(SearchHistoryBeanDao.Properties.Type.eq(type), SearchHistoryBeanDao.Properties.Content.eq(content))

app/src/main/java/com/mp/android/apps/livevblank/util/FileUtils.java:114: error: NULL_DEREFERENCE
  object `fileList` last assigned on line 113 could be null and is dereferenced at line 114.
  112.   		try {
  113.   			File[] fileList = file.listFiles();
  114. > 			for (int i = 0; i < fileList.length; i++) { // 如果下面还有文件
  115.   				if (fileList[i].isDirectory()) {
  116.   					size = size + getFolderSize(fileList[i]);

app/src/main/java/com/google/android/apps/photolab/storyboard/download/ZipUtils.java:122: error: RESOURCE_LEAK
  resource of type `java.util.zip.ZipOutputStream` acquired to `outZip` by call to `new()` at line 113 is not released after line 122.
**Note**: potential exception at line 118
  120.           outZip.finish();
  121.           outZip.close();
  122. >     }
  123.   
  124.       /**

app/src/main/java/com/mp/android/apps/monke/monkeybook/service/DownloadService.java:112: error: NULL_DEREFERENCE
  object returned by `getInstance().getmDaoSession()` could be null and is dereferenced at line 112.
  110.               @Override
  111.               public void subscribe(ObservableEmitter<Boolean> e) throws Exception {
  112. >                 DbHelper.getInstance().getmDaoSession().getDownloadChapterBeanDao().insertOrReplaceInTx(newData);
  113.                   e.onNext(true);
  114.                   e.onComplete();

app/src/main/java/com/mp/android/apps/monke/monkeybook/presenter/impl/MainPresenterImpl.java:113: error: NULL_DEREFERENCE
  object returned by `getInstance().getmDaoSession()` could be null and is dereferenced at line 113.
  111.               @Override
  112.               public void subscribe(ObservableEmitter<BookShelfBean> e) throws Exception {
  113. >                 DbHelper.getInstance().getmDaoSession().getChapterListBeanDao().insertOrReplaceInTx(datas.get(index).getBookInfoBean().getChapterlist());
  114.                   e.onNext(datas.get(index));
  115.                   e.onComplete();

app/src/main/java/com/google/android/apps/photolab/storyboard/pipeline/ComicIO.java:128: error: RESOURCE_LEAK
  resource of type `java.io.FileOutputStream` acquired to `fo` by call to `FileOutputStream(...)` at line 123 is not released after line 128.
**Note**: potential exception at line 124
  126.                       this.storedFrames++;
  127.                   }
  128. >             } catch (Exception e) {
  129.                   e.printStackTrace();
  130.               }

app/src/main/java/com/mp/android/apps/monke/monkeybook/widget/RecyclerViewBar.java:126: error: NULL_DEREFERENCE
  object returned by `RecyclerViewBar.recyclerView.getAdapter()` could be null and is dereferenced at line 126.
  124.           }
  125.           if (recyclerView != null) {
  126. >             int position = Math.round(finalMarginTop / (getHeight() - sliderHeight) * (recyclerView.getAdapter().getItemCount() - 1));
  127.               ((LinearLayoutManager) recyclerView.getLayoutManager()).scrollToPositionWithOffset(position, 0);
  128.           }

app/src/main/java/com/mp/android/apps/monke/monkeybook/presenter/impl/ChoiceBookPresenterImpl.java:135: error: NULL_DEREFERENCE
  object returned by `getInstance().getBookInfo(bookShelfResult)` could be null and is dereferenced at line 135.
  133.           bookShelfResult.setTag(searchBookBean.getTag());
  134.           WebBookModelImpl.getInstance().getBookInfo(bookShelfResult)
  135. >                 .subscribeOn(Schedulers.io())
  136.                   .observeOn(AndroidSchedulers.mainThread())
  137.                   .compose(((BaseActivity)mView.getContext()).<BookShelfBean>bindUntilEvent(ActivityEvent.DESTROY))

app/src/main/java/androidx/media/filterpacks/reduce/ImageReduceFilter.java:131: error: NULL_DEREFERENCE
  object returned by `getConnectedInputPort("image")` could be null and is dereferenced at line 131.
  129.       protected void onProcess() {
  130.           OutputPort outPort = getConnectedOutputPort("image");
  131. >         FrameImage2D inputImage = getConnectedInputPort("image").pullFrame().asFrameImage2D();
  132.           int[] inDims = inputImage.getDimensions();
  133.           if (this.mShaderDirtyFlag) {

app/src/main/java/com/google/android/apps/photolab/storyboard/download/ZipUtils.java:147: error: RESOURCE_LEAK
  resource of type `java.io.FileInputStream` acquired by call to `FileInputStream(...)` at line 140 is not released after line 147.
  145.                   zipOutputSteam.write(buffer, 0, len);
  146.               }
  147. >             zipOutputSteam.closeEntry();
  148.           } else {
  149.               //文件夹

app/src/main/java/com/google/android/apps/photolab/storyboard/download/ZipUtils.java:162: error: RESOURCE_LEAK
  resource of type `java.io.FileInputStream` acquired to `inputStream` by call to `FileInputStream(...)` at line 140 is not released after line 162.
**Note**: potential exception at line 144
  160.               }
  161.           }
  162. >     }
  163.   
  164.       /**

app/src/main/java/com/google/android/apps/photolab/storyboard/pipeline/ComicIO.java:158: error: RESOURCE_LEAK
  resource of type `java.io.FileOutputStream` acquired to `fo` by call to `FileOutputStream(...)` at line 150 is not released after line 158.
**Note**: potential exception at line 151
  156.   
  157.   
  158. >             } catch (Exception e) {
  159.                   e.printStackTrace();
  160.               }

app/src/main/java/com/google/android/apps/photolab/storyboard/pipeline/AssetLoader.java:152: error: NULL_DEREFERENCE
  object returned by `getActivity().getComicCache()` could be null and is dereferenced at line 152.
  150.                       ComicIO.getInstance().clearImageFolder();
  151.                       MediaManager.instance().clearAssets();
  152. >                     ComicActivity.getActivity().getComicCache().reset();
  153.                       Bitmap bmp = retriever.getFrameAtTime(0, MediaMetadataRetriever.OPTION_CLOSEST_SYNC);
  154.                       this.videoHeight = bmp.getHeight();

app/src/main/java/com/google/android/apps/photolab/storyboard/pipeline/AssetLoader.java:152: error: NULL_DEREFERENCE
  object returned by `getActivity()` could be null and is dereferenced at line 152.
  150.                       ComicIO.getInstance().clearImageFolder();
  151.                       MediaManager.instance().clearAssets();
  152. >                     ComicActivity.getActivity().getComicCache().reset();
  153.                       Bitmap bmp = retriever.getFrameAtTime(0, MediaMetadataRetriever.OPTION_CLOSEST_SYNC);
  154.                       this.videoHeight = bmp.getHeight();

app/src/main/java/com/mp/android/apps/monke/monkeybook/service/DownloadService.java:143: error: NULL_DEREFERENCE
  object returned by `getInstance().getmDaoSession()` could be null and is dereferenced at line 143.
  141.                   @Override
  142.                   public void subscribe(ObservableEmitter<DownloadChapterBean> e) throws Exception {
  143. >                     List<BookShelfBean> bookShelfBeanList = DbHelper.getInstance().getmDaoSession().getBookShelfBeanDao().queryBuilder().orderDesc(BookShelfBeanDao.Properties.FinalDate).list();
  144.                       if (bookShelfBeanList != null && bookShelfBeanList.size() > 0) {
  145.                           for (BookShelfBean bookItem : bookShelfBeanList) {

app/src/main/java/com/mp/android/apps/monke/monkeybook/presenter/impl/SearchPresenterImpl.java:146: error: NULL_DEREFERENCE
  object returned by `getInstance().getDb()` could be null and is dereferenced at line 146.
  144.               @Override
  145.               public void subscribe(ObservableEmitter<Integer> e) throws Exception {
  146. >                 int a = DbHelper.getInstance().getDb().delete(SearchHistoryBeanDao.TABLENAME, SearchHistoryBeanDao.Properties.Type.columnName + "=? and " + SearchHistoryBeanDao.Properties.Content.columnName + " like ?", new String[]{String.valueOf(type), "%" + content + "%"});
  147.                   e.onNext(a);
  148.               }

app/src/main/java/com/mp/android/apps/login/LoginMainFragment.java:151: error: NULL_DEREFERENCE
  object returned by `getActivity()` could be null and is dereferenced at line 151.
  149.       private int getTransDistance(int imageWidth) {
  150.           DisplayMetrics metrics = new DisplayMetrics();
  151. >         this.getActivity().getWindowManager().getDefaultDisplay().getMetrics(metrics);
  152.           return metrics.widthPixels - imageWidth;
  153.       }

imageeditlibrary/src/main/java/com/xinlan/imageeditlibrary/editimage/fragment/StickerFragment.java:157: error: NULL_DEREFERENCE
  object returned by `StickerFragment$LoadStickersTask.this$0.getActivity()` could be null and is dereferenced at line 157.
  155.           protected Void doInBackground(Integer... params) {
  156.               stickerBeanList.clear();
  157. >             AssetManager assetManager = getActivity().getAssets();
  158.               try {
  159.                   String[] lists = assetManager.list(STICKER_FOLDER);

app/src/main/java/com/google/android/apps/photolab/storyboard/activity/ComicTextureView.java:159: error: NULL_DEREFERENCE
  object returned by `getActivity().getComicGenerator()` could be null and is dereferenced at line 159.
  157.                               @Override
  158.                               public void run() {
  159. >                                 ComicActivity.getActivity().getComicGenerator().generateNextLayout();
  160.                                   ComicActivity.getActivity().getComicCache().decProcessingCount();
  161.                               }

app/src/main/java/com/mp/android/apps/monke/monkeybook/presenter/impl/BookDetailPresenterImpl.java:159: error: NULL_DEREFERENCE
  object returned by `getInstance().getmDaoSession()` could be null and is dereferenced at line 159.
  157.                   @Override
  158.                   public void subscribe(ObservableEmitter<Boolean> e) throws Exception {
  159. >                     DbHelper.getInstance().getmDaoSession().getChapterListBeanDao().insertOrReplaceInTx(bookShelf.getBookInfoBean().getChapterlist());
  160.                       DbHelper.getInstance().getmDaoSession().getBookInfoBeanDao().insertOrReplace(bookShelf.getBookInfoBean());
  161.                       //网络数据获取成功  存入BookShelf表数据库

app/src/main/java/com/mp/android/apps/monke/monkeybook/widget/RecyclerViewBar.java:159: error: NULL_DEREFERENCE
  object returned by `RecyclerViewBar.recyclerView.getAdapter()` could be null and is dereferenced at line 159.
  157.   
  158.       public void scrollToPositionWithOffset(int position) {
  159. >         if (recyclerView != null && position < recyclerView.getAdapter().getItemCount()) {
  160.               float temp = position * 1.0f / recyclerView.getAdapter().getItemCount();
  161.               LayoutParams l = (LayoutParams) ivSlider.getLayoutParams();

app/src/main/java/com/google/android/apps/photolab/storyboard/pipeline/ComicIO.java:178: error: RESOURCE_LEAK
  resource of type `java.io.FileOutputStream` acquired to `fos` by call to `FileOutputStream(...)` at line 168 is not released after line 178.
**Note**: potential exception at line 176
  176.                   fos.flush();
  177.                   fos.close();
  178. >             } catch (Exception e) {
  179.                   System.out.println(e.getMessage());
  180.               }

app/src/main/java/androidx/media/filterpacks/video/MediaPlayerSource.java:189: error: NULL_DEREFERENCE
  object `outPort` last assigned on line 188 could be null and is dereferenced at line 189.
  187.               int[] dims = new int[]{outputWidth, outputHeight};
  188.               OutputPort outPort = getConnectedOutputPort("video");
  189. >             FrameImage2D outFrame = outPort.fetchAvailableFrame(dims).asFrameImage2D();
  190.               this.mFrameExtractor.process(this.mMediaFrame, outFrame.lockRenderTarget(), outputWidth, outputHeight);
  191.               long timestamp = TimeUnit.NANOSECONDS.convert((long) this.mMediaPlayer.getCurrentPosition(), TimeUnit.MILLISECONDS);

app/src/main/java/androidx/media/filterpacks/video/MediaPlayerSource.java:189: error: NULL_DEREFERENCE
  object returned by `outPort.fetchAvailableFrame(dims)` could be null and is dereferenced at line 189.
  187.               int[] dims = new int[]{outputWidth, outputHeight};
  188.               OutputPort outPort = getConnectedOutputPort("video");
  189. >             FrameImage2D outFrame = outPort.fetchAvailableFrame(dims).asFrameImage2D();
  190.               this.mFrameExtractor.process(this.mMediaFrame, outFrame.lockRenderTarget(), outputWidth, outputHeight);
  191.               long timestamp = TimeUnit.NANOSECONDS.convert((long) this.mMediaPlayer.getCurrentPosition(), TimeUnit.MILLISECONDS);

app/src/main/java/androidx/media/filterfw/FrameType.java:172: error: NULL_DEREFERENCE
  object `mergedClass` last assigned on line 170 could be null and is dereferenced by call to `fetchType(...)` at line 172.
  170.           Class<?> mergedClass = mergeClasses(writer.mClass, reader.mClass);
  171.           boolean success = mergedClass != null || writer.mClass == null;
  172. >         return success ? fetchType(mergedClass, dimensions) : null;
  173.       }
  174.   

app/src/main/java/com/mp/android/apps/login/fragment/LoginDailogFragment.java:171: error: NULL_DEREFERENCE
  object returned by `getActivity()` could be null and is dereferenced at line 171.
  169.       public boolean onBackPressed() {
  170.           Objects.requireNonNull(getActivity()).setResult(-1);
  171. >         getActivity().overridePendingTransition(0, 0);
  172.           getActivity().finish();
  173.           return true;

app/src/main/java/com/mp/android/apps/monke/monkeybook/presenter/impl/ChoiceBookPresenterImpl.java:170: error: NULL_DEREFERENCE
  object returned by `getInstance().getmDaoSession()` could be null and is dereferenced at line 170.
  168.               @Override
  169.               public void subscribe(ObservableEmitter<BookShelfBean> e) throws Exception {
  170. >                 DbHelper.getInstance().getmDaoSession().getChapterListBeanDao().insertOrReplaceInTx(bookShelfBean.getBookInfoBean().getChapterlist());
  171.                   DbHelper.getInstance().getmDaoSession().getBookInfoBeanDao().insertOrReplace(bookShelfBean.getBookInfoBean());
  172.                   //网络数据获取成功  存入BookShelf表数据库

app/src/main/java/com/google/android/apps/photolab/storyboard/download/ZipUtils.java:175: error: RESOURCE_LEAK
  resource of type `java.util.zip.ZipFile` acquired by call to `ZipFile(...)` at line 173 is not released after line 175.
  173.           ZipFile zipFile = new ZipFile(zipFileString);
  174.           ZipEntry zipEntry = zipFile.getEntry(fileString);
  175. >         return zipFile.getInputStream(zipEntry);
  176.       }
  177.   

app/src/main/java/com/mp/android/apps/monke/monkeybook/presenter/impl/SearchPresenterImpl.java:173: error: NULL_DEREFERENCE
  object returned by `getInstance().getmDaoSession()` could be null and is dereferenced at line 173.
  171.               @Override
  172.               public void subscribe(ObservableEmitter<List<SearchHistoryBean>> e) throws Exception {
  173. >                 List<SearchHistoryBean> datas = DbHelper.getInstance().getmDaoSession().getSearchHistoryBeanDao()
  174.                           .queryBuilder()
  175.                           .where(SearchHistoryBeanDao.Properties.Type.eq(type), SearchHistoryBeanDao.Properties.Content.like("%" + content + "%"))

app/src/main/java/com/mp/android/apps/monke/monkeybook/model/impl/ImportBookModelImpl.java:185: error: NULL_DEREFERENCE
  object returned by `getInstance().getmDaoSession()` could be null and is dereferenced at line 185.
  183.           chapterListBean.getBookContentBean().setDurCapterContent(content);
  184.   
  185. >         DbHelper.getInstance().getmDaoSession().getBookContentBeanDao().insertOrReplace(chapterListBean.getBookContentBean());
  186.           DbHelper.getInstance().getmDaoSession().getChapterListBeanDao().insertOrReplace(chapterListBean);
  187.       }

app/src/main/java/com/mp/android/apps/monke/monkeybook/service/DownloadService.java:175: error: NULL_DEREFERENCE
  object returned by `getInstance().getmDaoSession()` could be null and is dereferenced at line 175.
  173.                                       @Override
  174.                                       public void subscribe(ObservableEmitter<Object> e) throws Exception {
  175. >                                         DbHelper.getInstance().getmDaoSession().getDownloadChapterBeanDao().deleteAll();
  176.                                           e.onNext(new Object());
  177.                                           e.onComplete();

app/src/main/java/com/google/android/apps/photolab/storyboard/activity/ComicGenerator.java:193: error: NULL_DEREFERENCE
  object `cp` last assigned on line 191 could be null and is dereferenced at line 193.
  191.               ComicPanel cp = comicPageData.getPanel(i);
  192.               int imageIndex = imageIndexes[i];
  193. >             if (cp.mergedPanels.size() <= 1) {
  194.                   cp.setImageIndex(imageIndex);
  195.               } else if (!hasMerged) {

app/src/main/java/com/google/android/apps/photolab/storyboard/download/ZipUtils.java:209: error: RESOURCE_LEAK
  resource of type `java.util.zip.ZipInputStream` acquired to `inZip` by call to `new()` at line 189 is not released after line 209.
**Note**: potential exception at line 192
  207.           }
  208.           inZip.close();
  209. >         return fileList;
  210.       }

app/src/main/java/com/mp/android/apps/explore/ExploreSquareActivity.java:190: error: NULL_DEREFERENCE
  object returned by `data.getUniqueID()` could be null and is dereferenced at line 190.
  188.                   if (LoginManager.getInstance().checkLoginInfo()) {
  189.                       Data data = LoginManager.getInstance().getLoginInfo();
  190. >                     if (data.getUniqueID().startsWith("manpin_")) {
  191.                           LoginManager.getInstance().editLogoutInfo();
  192.                           logoutAuthListener.onComplete(null, 1, null);

app/src/main/java/com/mp/android/apps/monke/monkeybook/presenter/impl/BookDetailPresenterImpl.java:194: error: NULL_DEREFERENCE
  object returned by `getInstance().getmDaoSession()` could be null and is dereferenced at line 194.
  192.                   @Override
  193.                   public void subscribe(ObservableEmitter<Boolean> e) throws Exception {
  194. >                     DbHelper.getInstance().getmDaoSession().getBookShelfBeanDao().deleteByKey(bookShelf.getNoteUrl());
  195.                       DbHelper.getInstance().getmDaoSession().getBookInfoBeanDao().deleteByKey(bookShelf.getBookInfoBean().getNoteUrl());
  196.                       List<String> keys = new ArrayList<String>();

app/src/main/java/com/google/android/apps/photolab/storyboard/activity/ComicGenerator.java:210: error: NULL_DEREFERENCE
  object returned by `getComicCache(this).getCurrentComic(1)` could be null and is dereferenced at line 210.
  208.   
  209.       public int getPanelCount() {
  210. >         return getComicCache().getCurrentComic(true).panelCount();
  211.       }
  212.   

app/src/main/java/com/mp/android/apps/monke/monkeybook/presenter/impl/ReadBookPresenterImpl.java:211: error: NULL_DEREFERENCE
  object returned by `getInstance().getmDaoSession()` could be null and is dereferenced at line 211.
  209.                       @Override
  210.                       public void subscribe(ObservableEmitter<ReadBookContentBean> e) throws Exception {
  211. >                         List<BookContentBean> tempList = DbHelper.getInstance().getmDaoSession().getBookContentBeanDao().queryBuilder().where(BookContentBeanDao.Properties.DurChapterUrl.eq(bookShelf.getBookInfoBean().getChapterlist().get(chapterIndex).getDurChapterUrl())).build().list();
  212.                           e.onNext(new ReadBookContentBean(tempList == null ? new ArrayList<BookContentBean>() : tempList, finalPageIndex1));
  213.                           e.onComplete();

app/src/main/java/com/google/android/apps/photolab/storyboard/activity/ComicGenerator.java:214: error: NULL_DEREFERENCE
  object returned by `getComicCache(this).getCurrentComic(1)` could be null and is dereferenced at line 214.
  212.   
  213.       public ComicPanel getComicPanel(int index) {
  214. >         if (index < 0 || index >= getComicCache().getCurrentComic(true).panelCount()) {
  215.               return null;
  216.           }

app/src/main/java/com/google/android/apps/photolab/storyboard/activity/ComicGenerator.java:217: error: NULL_DEREFERENCE
  object returned by `getComicCache(this).getCurrentComic(1)` could be null and is dereferenced at line 217.
  215.               return null;
  216.           }
  217. >         return getComicCache().getCurrentComic(true).getPanel(index);
  218.       }
  219.   

app/src/main/java/com/mp/android/apps/monke/monkeybook/service/DownloadService.java:215: error: NULL_DEREFERENCE
  object returned by `getInstance().getmDaoSession()` could be null and is dereferenced at line 215.
  213.                   @Override
  214.                   public void subscribe(ObservableEmitter<BookContentBean> e) throws Exception {
  215. >                     List<BookContentBean> result = DbHelper.getInstance().getmDaoSession().getBookContentBeanDao().queryBuilder().where(BookContentBeanDao.Properties.DurChapterUrl.eq(data.getDurChapterUrl())).list();
  216.                       if (result != null && result.size() > 0) {
  217.                           e.onNext(result.get(0));

app/src/main/java/com/mp/android/apps/login/LoginMainFragment.java:227: error: NULL_DEREFERENCE
  object returned by `getActivity()` could be null and is dereferenced at line 227.
  225.       public boolean onBackPressed() {
  226.           Objects.requireNonNull(getActivity()).setResult(-1);
  227. >         getActivity().overridePendingTransition(0, 0);
  228.           getActivity().finish();
  229.           return true;

app/src/main/java/com/google/android/apps/photolab/storyboard/pipeline/AssetLoader.java:238: error: NULL_DEREFERENCE
  object returned by `getActivity().getComicGenerator()` could be null and is dereferenced at line 238.
  236.           isVideoLoading = false;
  237.           this.lastFrame = null;
  238. >         ComicActivity.getActivity().getComicGenerator().filterComic(ComicActivity.getActivity().getComicCache().getCurrentComic(true));
  239.           ComicActivity.getActivity().getComicCache().removeLoadingComics();
  240.   

app/src/main/java/com/mp/android/apps/monke/monkeybook/presenter/impl/ReadBookPresenterImpl.java:230: error: NULL_DEREFERENCE
  object returned by `getInstance().getmDaoSession()` could be null and is dereferenced at line 230.
  228.                                           public BookContentBean apply(BookContentBean bookContentBean) throws Exception {
  229.                                               if (bookContentBean.getRight()) {
  230. >                                                 DbHelper.getInstance().getmDaoSession().getBookContentBeanDao().insertOrReplace(bookContentBean);
  231.                                                   bookShelf.getBookInfoBean().getChapterlist().get(chapterIndex).setHasCache(true);
  232.                                                   DbHelper.getInstance().getmDaoSession().getChapterListBeanDao().update(bookShelf.getBookInfoBean().getChapterlist().get(chapterIndex));

app/src/main/java/com/mp/android/apps/monke/monkeybook/service/DownloadService.java:230: error: NULL_DEREFERENCE
  object returned by `getInstance().getmDaoSession()` could be null and is dereferenced at line 230.
  228.                               @Override
  229.                               public BookContentBean apply(BookContentBean bookContentBean) throws Exception {
  230. >                                 DbHelper.getInstance().getmDaoSession().getDownloadChapterBeanDao().delete(data);
  231.                                   if (bookContentBean.getRight()) {
  232.                                       DbHelper.getInstance().getmDaoSession().getBookContentBeanDao().insertOrReplace(bookContentBean);

app/src/main/java/com/mp/android/apps/monke/monkeybook/view/adapter/BookShelfAdapter.java:265: error: NULL_DEREFERENCE
  object returned by `BookShelfAdapter.books.get(index).getBookInfoBean().getChapterlist()` could be null and is dereferenced at line 265.
  263.               holder.llDurcursor.setVisibility(View.VISIBLE);
  264.               holder.mpbDurprogress.setVisibility(View.VISIBLE);
  265. >             holder.mpbDurprogress.setMaxProgress(books.get(index).getBookInfoBean().getChapterlist().size());
  266.               float speed = books.get(index).getBookInfoBean().getChapterlist().size()*1.0f/100;
  267.   

app/src/main/java/com/mp/android/apps/monke/monkeybook/model/impl/GxwztvBookModelImpl.java:253: error: NULL_DEREFERENCE
  object returned by `introduceE.getElementById("shot")` could be null and is dereferenced at line 253.
  251.               introduce = introduceE.getElementById("all").text().replace("[收起]", "");
  252.           } else {
  253. >             introduce = introduceE.getElementById("shot").text();
  254.           }
  255.           bookInfoBean.setIntroduce("\u3000\u3000" + introduce);

app/src/main/java/com/mp/android/apps/monke/monkeybook/service/DownloadService.java:242: error: NULL_DEREFERENCE
  object returned by `getInstance().getmDaoSession()` could be null and is dereferenced at line 242.
  240.                               @Override
  241.                               public void subscribe(ObservableEmitter<BookContentBean> e) throws Exception {
  242. >                                 DbHelper.getInstance().getmDaoSession().getDownloadChapterBeanDao().delete(data);
  243.                                   e.onNext(bookContentBean);
  244.                                   e.onComplete();

app/src/main/java/com/google/android/apps/photolab/storyboard/pipeline/ComicIO.java:266: error: RESOURCE_LEAK
  resource of type `java.io.FileOutputStream` acquired to `fo` by call to `FileOutputStream(...)` at line 261 is not released after line 266.
**Note**: potential exception at line 262
  264.                       result = Uri.fromFile(f);
  265.                   }
  266. >             } catch (Exception e) {
  267.                   e.printStackTrace();
  268.               }

imageeditlibrary/src/main/java/com/xinlan/imageeditlibrary/editimage/fragment/StickerFragment.java:272: error: INEFFICIENT_KEYSET_ITERATOR
  Accessing a value using a key that was retrieved from a `keySet` iterator. It is more efficient to use an iterator on the `entrySet` of the map, avoiding the extra `HashMap.get(key)` lookup.
  270.               LinkedHashMap<Integer, StickerItem> addItems = mStickerView.getBank();
  271.               for (Integer id : addItems.keySet()) {
  272. >                 StickerItem item = addItems.get(id);
  273.                   item.matrix.postConcat(m);// 乘以底部图片变化矩阵
  274.                   canvas.drawBitmap(item.bitmap, item.matrix, null);

app/src/main/java/com/mp/android/apps/monke/monkeybook/service/DownloadService.java:283: error: NULL_DEREFERENCE
  object returned by `getInstance().getmDaoSession()` could be null and is dereferenced at line 283.
  281.                       @Override
  282.                       public void subscribe(ObservableEmitter<Boolean> e) throws Exception {
  283. >                         DbHelper.getInstance().getmDaoSession().getDownloadChapterBeanDao().delete(data);
  284.                           e.onNext(true);
  285.                           e.onComplete();

app/src/main/java/com/google/android/apps/photolab/storyboard/pipeline/ComicIO.java:301: error: RESOURCE_LEAK
  resource of type `java.io.FileOutputStream` acquired to `fo` by call to `FileOutputStream(...)` at line 296 is not released after line 301.
**Note**: potential exception at line 297
  299.                       result = f.getAbsolutePath();
  300.                   }
  301. >             } catch (Exception e) {
  302.                   e.printStackTrace();
  303.               }

app/src/main/java/com/mp/android/apps/monke/monkeybook/presenter/impl/ReadBookPresenterImpl.java:288: error: NULL_DEREFERENCE
  object returned by `getInstance().getmDaoSession()` could be null and is dereferenced at line 288.
  286.                   public void subscribe(ObservableEmitter<BookShelfBean> e) throws Exception {
  287.                       bookShelf.setFinalDate(System.currentTimeMillis());
  288. >                     DbHelper.getInstance().getmDaoSession().getBookShelfBeanDao().insertOrReplace(bookShelf);
  289.                       e.onNext(bookShelf);
  290.                       e.onComplete();

app/src/main/java/com/mp/android/apps/monke/monkeybook/presenter/impl/SearchPresenterImpl.java:336: error: NULL_DEREFERENCE
  object returned by `getInstance().getBookInfo(bookShelfResult)` could be null and is dereferenced at line 336.
  334.           bookShelfResult.setTag(searchBookBean.getTag());
  335.           WebBookModelImpl.getInstance().getBookInfo(bookShelfResult)
  336. >                 .subscribeOn(Schedulers.io())
  337.                   .observeOn(AndroidSchedulers.mainThread())
  338.                   .subscribe(new SimpleObserver<BookShelfBean>() {

app/src/main/java/com/mp/android/apps/monke/monkeybook/service/DownloadService.java:335: error: NULL_DEREFERENCE
  object returned by `getInstance().getmDaoSession()` could be null and is dereferenced at line 335.
  333.               @Override
  334.               public void subscribe(ObservableEmitter<Object> e) throws Exception {
  335. >                 DbHelper.getInstance().getmDaoSession().getDownloadChapterBeanDao().deleteAll();
  336.                   e.onNext(new Object());
  337.                   e.onComplete();

app/src/main/java/com/mp/android/apps/monke/monkeybook/presenter/impl/ReadBookPresenterImpl.java:341: error: NULL_DEREFERENCE
  object returned by `getInstance().getmDaoSession()` could be null and is dereferenced at line 341.
  339.               @Override
  340.               public void subscribe(ObservableEmitter<Boolean> e) throws Exception {
  341. >                 List<BookShelfBean> temp = DbHelper.getInstance().getmDaoSession().getBookShelfBeanDao().queryBuilder().where(BookShelfBeanDao.Properties.NoteUrl.eq(bookShelf.getNoteUrl())).build().list();
  342.                   if (temp == null || temp.size() == 0) {
  343.                       isAdd = false;

app/src/main/java/com/google/android/apps/photolab/storyboard/activity/ComicActivity.java:360: error: NULL_DEREFERENCE
  object returned by `getComicCache()` could be null and is dereferenced at line 360.
  358.       protected void onStart() {
  359.           super.onStart();
  360. >         getComicCache().removeLoadingComicsFromEnd();
  361.           MediaManager.instance().resumeDetection();
  362.           getComicGenerator().resumeFiltering();

app/src/main/java/com/mp/android/apps/monke/monkeybook/presenter/impl/SearchPresenterImpl.java:365: error: NULL_DEREFERENCE
  object returned by `getInstance().getmDaoSession()` could be null and is dereferenced at line 365.
  363.               @Override
  364.               public void subscribe(ObservableEmitter<BookShelfBean> e) throws Exception {
  365. >                 DbHelper.getInstance().getmDaoSession().getChapterListBeanDao().insertOrReplaceInTx(bookShelfBean.getBookInfoBean().getChapterlist());
  366.                   DbHelper.getInstance().getmDaoSession().getBookInfoBeanDao().insertOrReplace(bookShelfBean.getBookInfoBean());
  367.                   //网络数据获取成功  存入BookShelf表数据库

app/src/main/java/com/google/android/apps/photolab/storyboard/activity/ComicActivity.java:369: error: NULL_DEREFERENCE
  object returned by `getComicGenerator()` could be null and is dereferenced at line 369.
  367.           super.onStop();
  368.           MediaManager.instance().abortAllDetection();
  369. >         getComicGenerator().abortAllFiltering();
  370.       }
  371.   

app/src/main/java/com/mp/android/apps/livevblank/EditCardActivity.java:383: error: NULL_DEREFERENCE
  object `data` could be null and is dereferenced at line 383.
  381.   
  382.           } else if (requestCode == LIVEBLANK_REQUEST_ALBUM && resultCode == RESULT_OK) {
  383. >             String filepath = data.getStringExtra("imgPath");
  384.               path = filepath;
  385.               File outputFile = FileUtils.genEditFile();

app/src/main/java/com/mp/android/apps/livevblank/EditCardActivity.java:390: error: NULL_DEREFERENCE
  object `data` could be null and is dereferenced at line 390.
  388.               handleEditorImage(data);
  389.           } else if (requestCode == LIVEBLANK_REQUEST_SEARCH_TO && resultCode == RESULT_OK) {
  390. >             String peopleName = data.getStringExtra("peopleName");
  391.               toPeople.setText(peopleName);
  392.           } else if (requestCode == LIVEBLANK_REQUEST_SEARCH_By && resultCode == RESULT_OK) {

app/src/main/java/com/mp/android/apps/livevblank/EditCardActivity.java:393: error: NULL_DEREFERENCE
  object `data` could be null and is dereferenced at line 393.
  391.               toPeople.setText(peopleName);
  392.           } else if (requestCode == LIVEBLANK_REQUEST_SEARCH_By && resultCode == RESULT_OK) {
  393. >             String bypeople = data.getStringExtra("peopleName");
  394.               byPeople.setText(bypeople);
  395.           }

app/src/main/java/com/mp/android/apps/monke/monkeybook/service/DownloadService.java:370: error: NULL_DEREFERENCE
  object returned by `getInstance().getmDaoSession()` could be null and is dereferenced at line 370.
  368.               @Override
  369.               public void subscribe(ObservableEmitter<DownloadChapterBean> e) throws Exception {
  370. >                 List<BookShelfBean> bookShelfBeanList = DbHelper.getInstance().getmDaoSession().getBookShelfBeanDao().queryBuilder().orderDesc(BookShelfBeanDao.Properties.FinalDate).list();
  371.                   if (bookShelfBeanList != null && bookShelfBeanList.size() > 0) {
  372.                       for (BookShelfBean bookItem : bookShelfBeanList) {

app/src/main/java/com/mp/android/apps/livevblank/EditCardActivity.java:377: error: NULL_DEREFERENCE
  object `outputFile` last assigned on line 376 could be null and is dereferenced at line 377.
  375.                       String filePath = ManBitmapUtils.saveBitmap(getApplicationContext(), resource);
  376.                       File outputFile = FileUtils.genEditFile();
  377. >                     EditImageActivity.start(EditCardActivity.this, filePath, outputFile.getAbsolutePath(), LIVEBLANK_REQUEST_EDIT_BITMAP);
  378.                       rotateloading.stop();
  379.                   }

app/src/main/java/com/mp/android/apps/monke/monkeybook/presenter/impl/ReadBookPresenterImpl.java:377: error: NULL_DEREFERENCE
  object returned by `getInstance().getmDaoSession()` could be null and is dereferenced at line 377.
  375.                   @Override
  376.                   public void subscribe(ObservableEmitter<Boolean> e) throws Exception {
  377. >                     DbHelper.getInstance().getmDaoSession().getChapterListBeanDao().insertOrReplaceInTx(bookShelf.getBookInfoBean().getChapterlist());
  378.                       DbHelper.getInstance().getmDaoSession().getBookInfoBeanDao().insertOrReplace(bookShelf.getBookInfoBean());
  379.                       //网络数据获取成功  存入BookShelf表数据库

app/src/main/java/com/google/android/apps/photolab/storyboard/activity/ComicActivity.java:439: error: NULL_DEREFERENCE
  object returned by `getComicCache()` could be null and is dereferenced at line 439.
  437.   
  438.       public void completeInitialLayout() {
  439. >         getComicCache().removeLoadingComics();
  440.           stopSpinner();
  441.           this.isFirstComic = true;

imageeditlibrary/src/main/java/com/xinlan/imageeditlibrary/editimage/view/imagezoom/ImageViewTouchBase.java:794: error: NULL_DEREFERENCE
  object `rect` last assigned on line 793 could be null and is dereferenced at line 794.
  792.   		mCenterRect.set(0, 0, 0, 0);
  793.   		RectF rect = getBitmapRect(supportMatrix);
  794. > 		float height = rect.height();
  795.   		float width = rect.width();
  796.   		float deltaX = 0, deltaY = 0;

app/src/main/java/com/google/android/apps/photolab/storyboard/activity/ComicSplash.java:96: error: STRICT_MODE_VIOLATION
  Method `void ComicSplash.onCreate(Bundle)` runs on UI thread (because `void ComicSplash.onCreate(Bundle)` is a standard UI-thread method), and may violate Strict Mode; calls `java.lang.String[] File.list()`. Additional report(s) on the same line were suppressed.
  94.           if (hasSeenComic) {
  95.               ComicActivity.openWithLoadVideoOverlay = true;
  96. >             moveToInstructionsScreen();
  97.               return;
  98.           }

app/src/main/java/com/mp/android/apps/monke/basemvplib/AppActivityManager.java:43: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void AppActivityManager.add(Activity)` reads without synchronization from `basemvplib.AppActivityManager.activities`. Potentially races with write in method `AppActivityManager.getInstance()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  41.        */
  42.       public void add(Activity activity){
  43. >         activities.add(new WeakReference<Activity>(activity));
  44.       }
  45.   

app/src/main/java/androidx/media/filterfw/Filter.java:358: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void Filter.addAutoReleaseFrame(Frame)` mutates container `this.mAutoReleaseFrames` via call to `add` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  356.   
  357.       final void addAutoReleaseFrame(Frame frame) {
  358. >         this.mAutoReleaseFrames.add(frame);
  359.       }
  360.   

app/src/main/java/androidx/media/filterfw/decoder/ImageDecoder.java:104: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void ImageDecoder.addVideoFrameConsumer(VideoFrameConsumer)` reads without synchronization from container `this.mConsumers` via call to `size`. Potentially races with write in method `ImageDecoder.addVideoFrameConsumer(...)`.
 Reporting because this access may occur on a background thread.
  102.               this.mConsumers.add(consumer);
  103.           }
  104. >         this.mWaitingConsumers.set(this.mConsumers.size());
  105.       }
  106.   

app/src/main/java/androidx/media/filterfw/FilterGraph.java:247: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void FilterGraph.bindFilterToView(String,View)` reads without synchronization from `this.mFilterMap`. Potentially races with write in method `FilterGraph.wipe()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  245.   
  246.       public void bindFilterToView(String filterName, View view) {
  247. >         Filter filter = (Filter) this.mFilterMap.get(filterName);
  248.           if (filter == null || !(filter instanceof ViewFilter)) {
  249.               throw new IllegalArgumentException(new StringBuilder(String.valueOf(filterName).length() + 23).append("Unknown view filter '").append(filterName).append("'!").toString());

app/src/main/java/androidx/media/filterfw/FilterGraph.java:255: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void FilterGraph.bindValueTarget(String,ValueTarget$ValueListener,boolean)` reads without synchronization from `this.mFilterMap`. Potentially races with write in method `FilterGraph.wipe()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  253.   
  254.       public void bindValueTarget(String filterName, ValueListener listener, boolean onCallerThread) {
  255. >         Filter filter = (Filter) this.mFilterMap.get(filterName);
  256.           if (filter == null || !(filter instanceof ValueTarget)) {
  257.               throw new IllegalArgumentException(new StringBuilder(String.valueOf(filterName).length() + 30).append("Unknown ValueTarget filter '").append(filterName).append("'!").toString());

app/src/main/java/com/google/android/apps/photolab/storyboard/pipeline/ComicCache.java:61: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `boolean ComicCache.canAddComic()` reads without synchronization from `this.processingCount`. Potentially races with write in method `ComicCache.decProcessingCount()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  59.   
  60.       public boolean canAddComic() {
  61. >         return this.cache.size() + this.processingCount < BITMAPS_TO_CACHE;
  62.       }
  63.   

imageeditlibrary/src/main/java/com/xinlan/imageeditlibrary/editimage/widget/EditCache.java:110: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `boolean EditCache.checkNextBitExist()` reads without synchronization from container `this.mCacheList` via call to `size`. Potentially races with write in method `EditCache.removeAll()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  108.       public boolean checkNextBitExist() {
  109.           int point = mCurrent - 1;
  110. >         return point>=0 && point<mCacheList.size();
  111.       }
  112.   

imageeditlibrary/src/main/java/com/xinlan/imageeditlibrary/editimage/widget/EditCache.java:109: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `boolean EditCache.checkNextBitExist()` reads without synchronization from `this.mCurrent`. Potentially races with write in method `EditCache.getPreCurrentBit()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  107.        */
  108.       public boolean checkNextBitExist() {
  109. >         int point = mCurrent - 1;
  110.           return point>=0 && point<mCacheList.size();
  111.       }

imageeditlibrary/src/main/java/com/xinlan/imageeditlibrary/editimage/widget/EditCache.java:118: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `boolean EditCache.checkPreBitExist()` reads without synchronization from `this.mCurrent`. Potentially races with write in method `EditCache.getPreCurrentBit()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  116.        */
  117.       public boolean checkPreBitExist() {
  118. >         int point = mCurrent + 1;
  119.           return point>=0 && point<mCacheList.size();
  120.       }

imageeditlibrary/src/main/java/com/xinlan/imageeditlibrary/editimage/widget/EditCache.java:119: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `boolean EditCache.checkPreBitExist()` reads without synchronization from container `this.mCacheList` via call to `size`. Potentially races with write in method `EditCache.removeAll()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  117.       public boolean checkPreBitExist() {
  118.           int point = mCurrent + 1;
  119. >         return point>=0 && point<mCacheList.size();
  120.       }
  121.   

app/src/main/java/androidx/media/filterfw/FilterGraph.java:319: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void FilterGraph.checkSignatures()` reads without synchronization from `this.mFilterMap`. Potentially races with write in method `FilterGraph.wipe()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  317.   
  318.       public void checkSignatures() {
  319. >         checkSignaturesForFilters(this.mFilterMap.values());
  320.       }
  321.   

app/src/main/java/com/mp/android/apps/monke/monkeybook/BitIntentDataManager.java:33: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void BitIntentDataManager.cleanData(String)` reads without synchronization from `monkeybook.BitIntentDataManager.bigData`. Potentially races with write in method `BitIntentDataManager.getInstance()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  31.       }
  32.       public void cleanData(String key){
  33. >         bigData.remove(key);
  34.       }
  35.   }

app/src/main/java/androidx/media/filterfw/Filter.java:254: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void Filter.connect(String,Filter,String)` indirectly mutates container `filterfw.FrameType.mTypeCache` via call to `put` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  252.               throw new RuntimeException(new StringBuilder((String.valueOf(inputName).length() + 66) + String.valueOf(valueOf).length()).append("Attempting to connect already connected input port '").append(inputName).append("' of filter ").append(valueOf).append("'!").toString());
  253.           } else {
  254. >             InputPort inputPort = targetFilter.newInputPort(inputName);
  255.               OutputPort outputPort = newOutputPort(outputName);
  256.               outputPort.setTarget(inputPort);

imageeditlibrary/src/main/java/com/xinlan/imageeditlibrary/editimage/widget/EditCache.java:52: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `String EditCache.debugLog()` reads without synchronization from container `this.mCacheList` via call to `size`. Potentially races with write in method `EditCache.removeAll()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  50.       public String debugLog() {
  51.           StringBuffer sb = new StringBuffer();
  52. >         for (int i = 0; i < mCacheList.size(); i++) {
  53.               sb.append("{ " + mCacheList.get(i) + " }");
  54.           }

app/src/main/java/androidx/media/filterfw/CameraStreamer.java:1165: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void CameraStreamer$CamFrameHandlerICS.distributeFrames()` indirectly writes to field `this.mCopyShader` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  1163.   
  1164.           protected void distributeFrames() {
  1165. >             updateTransform(getCopyShader());
  1166.               updateShaderTargetRect(getCopyShader());
  1167.               for (SurfaceTexture clientTexture : this.mTargetSurfaceTextures.values()) {

app/src/main/java/androidx/media/filterfw/CameraStreamer.java:1168: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void CameraStreamer$CamFrameHandlerICS.distributeFrames()` indirectly writes to field `filterfw.RenderTarget.mConfiguredDisplay` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  1166.               updateShaderTargetRect(getCopyShader());
  1167.               for (SurfaceTexture clientTexture : this.mTargetSurfaceTextures.values()) {
  1168. >                 RenderTarget clientTarget = renderTargetFor(clientTexture);
  1169.                   clientTarget.focus();
  1170.                   getCopyShader().process(this.mPreviewTexture, clientTarget, this.mOutWidth, this.mOutHeight);

app/src/main/java/androidx/media/filterfw/CameraStreamer.java:1170: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void CameraStreamer$CamFrameHandlerICS.distributeFrames()` indirectly writes to field `attr.mComponents` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  1168.                   RenderTarget clientTarget = renderTargetFor(clientTexture);
  1169.                   clientTarget.focus();
  1170. >                 getCopyShader().process(this.mPreviewTexture, clientTarget, this.mOutWidth, this.mOutHeight);
  1171.                   GLToolbox.checkGlError("distribute frames");
  1172.                   clientTarget.swapBuffers();

app/src/main/java/androidx/media/filterfw/CameraStreamer.java:1167: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void CameraStreamer$CamFrameHandlerICS.distributeFrames()` reads without synchronization from container `this.mTargetSurfaceTextures` via call to `values`. Potentially races with write in method `CameraStreamer$CamFrameHandlerICS.onRegisterClient(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  1165.               updateTransform(getCopyShader());
  1166.               updateShaderTargetRect(getCopyShader());
  1167. >             for (SurfaceTexture clientTexture : this.mTargetSurfaceTextures.values()) {
  1168.                   RenderTarget clientTarget = renderTargetFor(clientTexture);
  1169.                   clientTarget.focus();

app/src/main/java/androidx/media/filterfw/FilterGraph.java:263: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void FilterGraph.dumpGraphState(PrintWriter)` reads without synchronization from `this.mAllFilters`. Potentially races with write in method `FilterGraph.wipe()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  261.   
  262.       public void dumpGraphState(PrintWriter writer) {
  263. >         for (Filter filter : this.mAllFilters) {
  264.               String name;
  265.               String valueOf = String.valueOf(filter);

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceDetectionOptionsProtos.java:589: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `Object FaceDetectionOptionsProtos$FaceDetectionOptions.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` indirectly reads without synchronization from `this.bitField0_`. Potentially races with write in method `FaceDetectionOptionsProtos$FaceDetectionOptions.dynamicMethod(...)`.
 Reporting because this access may occur on a background thread.
  587.             com.google.protos.humansensing.FaceDetectionOptionsProtos.FaceDetectionOptions other = (com.google.protos.humansensing.FaceDetectionOptionsProtos.FaceDetectionOptions) arg1;
  588.             landmarkingConfidenceThreshold_ = visitor.visitFloat(
  589. >               hasLandmarkingConfidenceThreshold(), landmarkingConfidenceThreshold_,
  590.                 other.hasLandmarkingConfidenceThreshold(), other.landmarkingConfidenceThreshold_);
  591.             smoothness_ = visitor.visitFloat(

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceDetectionOptionsProtos.java:597: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `Object FaceDetectionOptionsProtos$FaceDetectionOptions.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` writes to field `this.maxRollAngle_` outside of synchronization.
 Reporting because this access may occur on a background thread.
  595.                 hasQuality(), quality_,
  596.                 other.hasQuality(), other.quality_);
  597. >           maxRollAngle_ = visitor.visitFloat(
  598.                 hasMaxRollAngle(), maxRollAngle_,
  599.                 other.hasMaxRollAngle(), other.maxRollAngle_);

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceDetectionOptionsProtos.java:608: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `Object FaceDetectionOptionsProtos$FaceDetectionOptions.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` writes to field `this.bitField0_` outside of synchronization.
 Reporting because this access may occur on a background thread.
  606.             if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
  607.                 .INSTANCE) {
  608. >             bitField0_ |= other.bitField0_;
  609.             }
  610.             return this;

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceDetectionOptionsProtos.java:600: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `Object FaceDetectionOptionsProtos$FaceDetectionOptions.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` writes to field `this.minEyeDistancePixels_` outside of synchronization.
 Reporting because this access may occur on a background thread.
  598.                 hasMaxRollAngle(), maxRollAngle_,
  599.                 other.hasMaxRollAngle(), other.maxRollAngle_);
  600. >           minEyeDistancePixels_ = visitor.visitInt(
  601.                 hasMinEyeDistancePixels(), minEyeDistancePixels_,
  602.                 other.hasMinEyeDistancePixels(), other.minEyeDistancePixels_);

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceDetectionOptionsProtos.java:594: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `Object FaceDetectionOptionsProtos$FaceDetectionOptions.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` writes to field `this.quality_` outside of synchronization.
 Reporting because this access may occur on a background thread.
  592.                 hasSmoothness(), smoothness_,
  593.                 other.hasSmoothness(), other.smoothness_);
  594. >           quality_ = visitor.visitFloat(
  595.                 hasQuality(), quality_,
  596.                 other.hasQuality(), other.quality_);

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceDetectionOptionsProtos.java:591: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `Object FaceDetectionOptionsProtos$FaceDetectionOptions.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` writes to field `this.smoothness_` outside of synchronization.
 Reporting because this access may occur on a background thread.
  589.                 hasLandmarkingConfidenceThreshold(), landmarkingConfidenceThreshold_,
  590.                 other.hasLandmarkingConfidenceThreshold(), other.landmarkingConfidenceThreshold_);
  591. >           smoothness_ = visitor.visitFloat(
  592.                 hasSmoothness(), smoothness_,
  593.                 other.hasSmoothness(), other.smoothness_);

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceDetectionOptionsProtos.java:603: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `Object FaceDetectionOptionsProtos$FaceDetectionOptions.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` writes to field `this.maxEyeDistancePixels_` outside of synchronization.
 Reporting because this access may occur on a background thread.
  601.                 hasMinEyeDistancePixels(), minEyeDistancePixels_,
  602.                 other.hasMinEyeDistancePixels(), other.minEyeDistancePixels_);
  603. >           maxEyeDistancePixels_ = visitor.visitInt(
  604.                 hasMaxEyeDistancePixels(), maxEyeDistancePixels_,
  605.                 other.hasMaxEyeDistancePixels(), other.maxEyeDistancePixels_);

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceDetectionOptionsProtos.java:588: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `Object FaceDetectionOptionsProtos$FaceDetectionOptions.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` writes to field `this.landmarkingConfidenceThreshold_` outside of synchronization.
 Reporting because this access may occur on a background thread.
  586.             Visitor visitor = (Visitor) arg0;
  587.             com.google.protos.humansensing.FaceDetectionOptionsProtos.FaceDetectionOptions other = (com.google.protos.humansensing.FaceDetectionOptionsProtos.FaceDetectionOptions) arg1;
  588. >           landmarkingConfidenceThreshold_ = visitor.visitFloat(
  589.                 hasLandmarkingConfidenceThreshold(), landmarkingConfidenceThreshold_,
  590.                 other.hasLandmarkingConfidenceThreshold(), other.landmarkingConfidenceThreshold_);

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:4219: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `Object FaceProtos$Face.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` writes to field `this.landmark_` outside of synchronization.
 Reporting because this access may occur on a background thread.
  4217.             boundingBox_ = visitor.visitMessage(boundingBox_, other.boundingBox_);
  4218.             embedding_= visitor.visitList(embedding_, other.embedding_);
  4219. >           landmark_= visitor.visitList(landmark_, other.landmark_);
  4220.             if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
  4221.                 .INSTANCE) {

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:4216: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `Object FaceProtos$Face.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` writes to field `this.attribute_` outside of synchronization.
 Reporting because this access may occur on a background thread.
  4214.                 hasPanAngle(), panAngle_,
  4215.                 other.hasPanAngle(), other.panAngle_);
  4216. >           attribute_= visitor.visitList(attribute_, other.attribute_);
  4217.             boundingBox_ = visitor.visitMessage(boundingBox_, other.boundingBox_);
  4218.             embedding_= visitor.visitList(embedding_, other.embedding_);

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:4222: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `Object FaceProtos$Face.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` writes to field `this.bitField0_` outside of synchronization.
 Reporting because this access may occur on a background thread.
  4220.             if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
  4221.                 .INSTANCE) {
  4222. >             bitField0_ |= other.bitField0_;
  4223.             }
  4224.             return this;

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:4202: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `Object FaceProtos$Face.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` indirectly reads without synchronization from `this.bitField0_`. Potentially races with write in method `FaceProtos$Face.dynamicMethod(...)`.
 Reporting because this access may occur on a background thread.
  4200.             com.google.protos.humansensing.FaceProtos.Face other = (com.google.protos.humansensing.FaceProtos.Face) arg1;
  4201.             rollAngle_ = visitor.visitFloat(
  4202. >               hasRollAngle(), rollAngle_,
  4203.                 other.hasRollAngle(), other.rollAngle_);
  4204.             tiltAngle_ = visitor.visitFloat(

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:4213: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `Object FaceProtos$Face.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` writes to field `this.panAngle_` outside of synchronization.
 Reporting because this access may occur on a background thread.
  4211.                 hasIdentityId(), identityId_,
  4212.                 other.hasIdentityId(), other.identityId_);
  4213. >           panAngle_ = visitor.visitFloat(
  4214.                 hasPanAngle(), panAngle_,
  4215.                 other.hasPanAngle(), other.panAngle_);

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:4292: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `Object FaceProtos$Face.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` mutates container `this.embedding_` via call to `add` outside of synchronization.
 Reporting because this access may occur on a background thread.
  4290.                           com.google.protobuf.GeneratedMessageLite.mutableCopy(embedding_);
  4291.                     }
  4292. >                   embedding_.add(
  4293.                         input.readMessage(com.google.protos.humansensing.FaceProtos.Face.Embedding.parser(), extensionRegistry));
  4294.                     break;

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:4217: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `Object FaceProtos$Face.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` writes to field `this.boundingBox_` outside of synchronization.
 Reporting because this access may occur on a background thread.
  4215.                 other.hasPanAngle(), other.panAngle_);
  4216.             attribute_= visitor.visitList(attribute_, other.attribute_);
  4217. >           boundingBox_ = visitor.visitMessage(boundingBox_, other.boundingBox_);
  4218.             embedding_= visitor.visitList(embedding_, other.embedding_);
  4219.             landmark_= visitor.visitList(landmark_, other.landmark_);

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:4201: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `Object FaceProtos$Face.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` writes to field `this.rollAngle_` outside of synchronization.
 Reporting because this access may occur on a background thread.
  4199.             Visitor visitor = (Visitor) arg0;
  4200.             com.google.protos.humansensing.FaceProtos.Face other = (com.google.protos.humansensing.FaceProtos.Face) arg1;
  4201. >           rollAngle_ = visitor.visitFloat(
  4202.                 hasRollAngle(), rollAngle_,
  4203.                 other.hasRollAngle(), other.rollAngle_);

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:4204: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `Object FaceProtos$Face.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` writes to field `this.tiltAngle_` outside of synchronization.
 Reporting because this access may occur on a background thread.
  4202.                 hasRollAngle(), rollAngle_,
  4203.                 other.hasRollAngle(), other.rollAngle_);
  4204. >           tiltAngle_ = visitor.visitFloat(
  4205.                 hasTiltAngle(), tiltAngle_,
  4206.                 other.hasTiltAngle(), other.tiltAngle_);

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:4263: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `Object FaceProtos$Face.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` mutates container `this.landmark_` via call to `add` outside of synchronization.
 Reporting because this access may occur on a background thread.
  4261.                           com.google.protobuf.GeneratedMessageLite.mutableCopy(landmark_);
  4262.                     }
  4263. >                   landmark_.add(
  4264.                         input.readMessage(com.google.protos.humansensing.FaceProtos.Face.Landmark.parser(), extensionRegistry));
  4265.                     break;

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:4301: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `Object FaceProtos$Face.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` mutates container `this.attribute_` via call to `add` outside of synchronization.
 Reporting because this access may occur on a background thread.
  4299.                           com.google.protobuf.GeneratedMessageLite.mutableCopy(attribute_);
  4300.                     }
  4301. >                   attribute_.add(
  4302.                         input.readMessage(com.google.protos.humansensing.FaceProtos.Face.Attribute.parser(), extensionRegistry));
  4303.                     break;

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:4207: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `Object FaceProtos$Face.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` writes to field `this.confidence_` outside of synchronization.
 Reporting because this access may occur on a background thread.
  4205.                 hasTiltAngle(), tiltAngle_,
  4206.                 other.hasTiltAngle(), other.tiltAngle_);
  4207. >           confidence_ = visitor.visitFloat(
  4208.                 hasConfidence(), confidence_,
  4209.                 other.hasConfidence(), other.confidence_);

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:4210: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `Object FaceProtos$Face.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` writes to field `this.identityId_` outside of synchronization.
 Reporting because this access may occur on a background thread.
  4208.                 hasConfidence(), confidence_,
  4209.                 other.hasConfidence(), other.confidence_);
  4210. >           identityId_ = visitor.visitFloat(
  4211.                 hasIdentityId(), identityId_,
  4212.                 other.hasIdentityId(), other.identityId_);

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:4218: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `Object FaceProtos$Face.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` writes to field `this.embedding_` outside of synchronization.
 Reporting because this access may occur on a background thread.
  4216.             attribute_= visitor.visitList(attribute_, other.attribute_);
  4217.             boundingBox_ = visitor.visitMessage(boundingBox_, other.boundingBox_);
  4218. >           embedding_= visitor.visitList(embedding_, other.embedding_);
  4219.             landmark_= visitor.visitList(landmark_, other.landmark_);
  4220.             if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:785: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `Object FaceProtos$Face$Attribute.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` reads without synchronization from `this.confidence_`. Potentially races with write in method `FaceProtos$Face$Attribute.dynamicMethod(...)`.
 Reporting because this access may occur on a background thread.
  783.               Visitor visitor = (Visitor) arg0;
  784.               com.google.protos.humansensing.FaceProtos.Face.Attribute other = (com.google.protos.humansensing.FaceProtos.Face.Attribute) arg1;
  785. >             confidence_ = visitor.visitFloat(
  786.                   hasConfidence(), confidence_,
  787.                   other.hasConfidence(), other.confidence_);

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:786: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `Object FaceProtos$Face$Attribute.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` indirectly reads without synchronization from `this.bitField0_`. Potentially races with write in method `FaceProtos$Face$Attribute.dynamicMethod(...)`.
 Reporting because this access may occur on a background thread.
  784.               com.google.protos.humansensing.FaceProtos.Face.Attribute other = (com.google.protos.humansensing.FaceProtos.Face.Attribute) arg1;
  785.               confidence_ = visitor.visitFloat(
  786. >                 hasConfidence(), confidence_,
  787.                   other.hasConfidence(), other.confidence_);
  788.               name_ = visitor.visitString(

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:798: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `Object FaceProtos$Face$Attribute.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` writes to field `this.bitField0_` outside of synchronization.
 Reporting because this access may occur on a background thread.
  796.               if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
  797.                   .INSTANCE) {
  798. >               bitField0_ |= other.bitField0_;
  799.               }
  800.               return this;

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:788: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `Object FaceProtos$Face$Attribute.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` reads without synchronization from `this.name_`. Potentially races with write in method `FaceProtos$Face$Attribute.dynamicMethod(...)`.
 Reporting because this access may occur on a background thread.
  786.                   hasConfidence(), confidence_,
  787.                   other.hasConfidence(), other.confidence_);
  788. >             name_ = visitor.visitString(
  789.                   hasName(), name_,
  790.                   other.hasName(), other.name_);

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:835: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `Object FaceProtos$Face$Attribute.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` writes to field `this.name_` outside of synchronization.
 Reporting because this access may occur on a background thread.
  833.                       String s = input.readString();
  834.                       bitField0_ |= 0x00000002;
  835. >                     name_ = s;
  836.                       break;
  837.                     }

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:791: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `Object FaceProtos$Face$Attribute.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` writes to field `this.value_` outside of synchronization.
 Reporting because this access may occur on a background thread.
  789.                   hasName(), name_,
  790.                   other.hasName(), other.name_);
  791. >             value_ = visitor.visitFloat(
  792.                   hasValue(), value_,
  793.                   other.hasValue(), other.value_);

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:794: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `Object FaceProtos$Face$Attribute.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` writes to field `this.type_` outside of synchronization.
 Reporting because this access may occur on a background thread.
  792.                   hasValue(), value_,
  793.                   other.hasValue(), other.value_);
  794. >             type_ = visitor.visitInt(hasType(), type_,
  795.                   other.hasType(), other.type_);
  796.               if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:840: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `Object FaceProtos$Face$Attribute.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` writes to field `this.confidence_` outside of synchronization.
 Reporting because this access may occur on a background thread.
  838.                     case 29: {
  839.                       bitField0_ |= 0x00000001;
  840. >                     confidence_ = input.readFloat();
  841.                       break;
  842.                     }

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:1332: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `Object FaceProtos$Face$BoundingBox.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` writes to field `this.y2_` outside of synchronization.
 Reporting because this access may occur on a background thread.
  1330.                   hasY1(), y1_,
  1331.                   other.hasY1(), other.y1_);
  1332. >             y2_ = visitor.visitFloat(
  1333.                   hasY2(), y2_,
  1334.                   other.hasY2(), other.y2_);

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:1329: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `Object FaceProtos$Face$BoundingBox.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` writes to field `this.y1_` outside of synchronization.
 Reporting because this access may occur on a background thread.
  1327.                   hasX2(), x2_,
  1328.                   other.hasX2(), other.x2_);
  1329. >             y1_ = visitor.visitFloat(
  1330.                   hasY1(), y1_,
  1331.                   other.hasY1(), other.y1_);

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:1324: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `Object FaceProtos$Face$BoundingBox.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` indirectly reads without synchronization from `this.bitField0_`. Potentially races with write in method `FaceProtos$Face$BoundingBox.dynamicMethod(...)`.
 Reporting because this access may occur on a background thread.
  1322.               com.google.protos.humansensing.FaceProtos.Face.BoundingBox other = (com.google.protos.humansensing.FaceProtos.Face.BoundingBox) arg1;
  1323.               x1_ = visitor.visitFloat(
  1324. >                 hasX1(), x1_,
  1325.                   other.hasX1(), other.x1_);
  1326.               x2_ = visitor.visitFloat(

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:1337: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `Object FaceProtos$Face$BoundingBox.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` writes to field `this.bitField0_` outside of synchronization.
 Reporting because this access may occur on a background thread.
  1335.               if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
  1336.                   .INSTANCE) {
  1337. >               bitField0_ |= other.bitField0_;
  1338.               }
  1339.               return this;

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:1323: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `Object FaceProtos$Face$BoundingBox.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` writes to field `this.x1_` outside of synchronization.
 Reporting because this access may occur on a background thread.
  1321.               Visitor visitor = (Visitor) arg0;
  1322.               com.google.protos.humansensing.FaceProtos.Face.BoundingBox other = (com.google.protos.humansensing.FaceProtos.Face.BoundingBox) arg1;
  1323. >             x1_ = visitor.visitFloat(
  1324.                   hasX1(), x1_,
  1325.                   other.hasX1(), other.x1_);

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:1326: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `Object FaceProtos$Face$BoundingBox.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` writes to field `this.x2_` outside of synchronization.
 Reporting because this access may occur on a background thread.
  1324.                   hasX1(), x1_,
  1325.                   other.hasX1(), other.x1_);
  1326. >             x2_ = visitor.visitFloat(
  1327.                   hasX2(), x2_,
  1328.                   other.hasX2(), other.x2_);

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:1712: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `Object FaceProtos$Face$Embedding.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` indirectly reads without synchronization from `this.bitField0_`. Potentially races with write in method `FaceProtos$Face$Embedding.dynamicMethod(...)`.
 Reporting because this access may occur on a background thread.
  1710.               com.google.protos.humansensing.FaceProtos.Face.Embedding other = (com.google.protos.humansensing.FaceProtos.Face.Embedding) arg1;
  1711.               value_ = visitor.visitByteString(
  1712. >                 hasValue(), value_,
  1713.                   other.hasValue(), other.value_);
  1714.               version_ = visitor.visitInt(

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:1719: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `Object FaceProtos$Face$Embedding.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` writes to field `this.bitField0_` outside of synchronization.
 Reporting because this access may occur on a background thread.
  1717.               if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
  1718.                   .INSTANCE) {
  1719. >               bitField0_ |= other.bitField0_;
  1720.               }
  1721.               return this;

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:1711: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `Object FaceProtos$Face$Embedding.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` writes to field `this.value_` outside of synchronization.
 Reporting because this access may occur on a background thread.
  1709.               Visitor visitor = (Visitor) arg0;
  1710.               com.google.protos.humansensing.FaceProtos.Face.Embedding other = (com.google.protos.humansensing.FaceProtos.Face.Embedding) arg1;
  1711. >             value_ = visitor.visitByteString(
  1712.                   hasValue(), value_,
  1713.                   other.hasValue(), other.value_);

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:1714: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `Object FaceProtos$Face$Embedding.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` writes to field `this.version_` outside of synchronization.
 Reporting because this access may occur on a background thread.
  1712.                   hasValue(), value_,
  1713.                   other.hasValue(), other.value_);
  1714. >             version_ = visitor.visitInt(
  1715.                   hasVersion(), version_,
  1716.                   other.hasVersion(), other.version_);

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:2867: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `Object FaceProtos$Face$Landmark.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` writes to field `this.bitField0_` outside of synchronization.
 Reporting because this access may occur on a background thread.
  2865.               if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
  2866.                   .INSTANCE) {
  2867. >               bitField0_ |= other.bitField0_;
  2868.               }
  2869.               return this;

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:2856: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `Object FaceProtos$Face$Landmark.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` writes to field `this.x_` outside of synchronization.
 Reporting because this access may occur on a background thread.
  2854.               visibility_ = visitor.visitInt(hasVisibility(), visibility_,
  2855.                   other.hasVisibility(), other.visibility_);
  2856. >             x_ = visitor.visitFloat(
  2857.                   hasX(), x_,
  2858.                   other.hasX(), other.x_);

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:2850: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `Object FaceProtos$Face$Landmark.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` indirectly reads without synchronization from `this.bitField0_`. Potentially races with write in method `FaceProtos$Face$Landmark.dynamicMethod(...)`.
 Reporting because this access may occur on a background thread.
  2848.               com.google.protos.humansensing.FaceProtos.Face.Landmark other = (com.google.protos.humansensing.FaceProtos.Face.Landmark) arg1;
  2849.               confidence_ = visitor.visitFloat(
  2850. >                 hasConfidence(), confidence_,
  2851.                   other.hasConfidence(), other.confidence_);
  2852.               type_ = visitor.visitInt(hasType(), type_,

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:2849: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `Object FaceProtos$Face$Landmark.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` writes to field `this.confidence_` outside of synchronization.
 Reporting because this access may occur on a background thread.
  2847.               Visitor visitor = (Visitor) arg0;
  2848.               com.google.protos.humansensing.FaceProtos.Face.Landmark other = (com.google.protos.humansensing.FaceProtos.Face.Landmark) arg1;
  2849. >             confidence_ = visitor.visitFloat(
  2850.                   hasConfidence(), confidence_,
  2851.                   other.hasConfidence(), other.confidence_);

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:2859: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `Object FaceProtos$Face$Landmark.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` writes to field `this.y_` outside of synchronization.
 Reporting because this access may occur on a background thread.
  2857.                   hasX(), x_,
  2858.                   other.hasX(), other.x_);
  2859. >             y_ = visitor.visitFloat(
  2860.                   hasY(), y_,
  2861.                   other.hasY(), other.y_);

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:2852: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `Object FaceProtos$Face$Landmark.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` writes to field `this.type_` outside of synchronization.
 Reporting because this access may occur on a background thread.
  2850.                   hasConfidence(), confidence_,
  2851.                   other.hasConfidence(), other.confidence_);
  2852. >             type_ = visitor.visitInt(hasType(), type_,
  2853.                   other.hasType(), other.type_);
  2854.               visibility_ = visitor.visitInt(hasVisibility(), visibility_,

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:2854: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `Object FaceProtos$Face$Landmark.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` writes to field `this.visibility_` outside of synchronization.
 Reporting because this access may occur on a background thread.
  2852.               type_ = visitor.visitInt(hasType(), type_,
  2853.                   other.hasType(), other.type_);
  2854. >             visibility_ = visitor.visitInt(hasVisibility(), visibility_,
  2855.                   other.hasVisibility(), other.visibility_);
  2856.               x_ = visitor.visitFloat(

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:2862: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `Object FaceProtos$Face$Landmark.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` writes to field `this.z_` outside of synchronization.
 Reporting because this access may occur on a background thread.
  2860.                   hasY(), y_,
  2861.                   other.hasY(), other.y_);
  2862. >             z_ = visitor.visitFloat(
  2863.                   hasZ(), z_,
  2864.                   other.hasZ(), other.z_);

app/src/generated/debug/javalite/com/google/protos/humansensing/FacesProtos.java:413: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `Object FacesProtos$Faces.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` mutates container `this.face_` via call to `add` outside of synchronization.
 Reporting because this access may occur on a background thread.
  411.                           com.google.protobuf.GeneratedMessageLite.mutableCopy(face_);
  412.                     }
  413. >                   face_.add(
  414.                         input.readMessage(com.google.protos.humansensing.FaceProtos.Face.parser(), extensionRegistry));
  415.                     break;

app/src/generated/debug/javalite/com/google/protos/humansensing/FacesProtos.java:411: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `Object FacesProtos$Faces.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` writes to field `this.face_` outside of synchronization.
 Reporting because this access may occur on a background thread.
  409.                     if (!face_.isModifiable()) {
  410.                       face_ =
  411. >                         com.google.protobuf.GeneratedMessageLite.mutableCopy(face_);
  412.                     }
  413.                     face_.add(

app/src/generated/debug/javalite/com/google/protos/humansensing/FacesProtos.java:383: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `Object FacesProtos$Faces.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` reads without synchronization from `this.face_`. Potentially races with write in method `FacesProtos$Faces.dynamicMethod(...)`.
 Reporting because this access may occur on a background thread.
  381.             Visitor visitor = (Visitor) arg0;
  382.             com.google.protos.humansensing.FacesProtos.Faces other = (com.google.protos.humansensing.FacesProtos.Faces) arg1;
  383. >           face_= visitor.visitList(face_, other.face_);
  384.             if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
  385.                 .INSTANCE) {

app/src/generated/debug/javalite/com/google/protos/mobilessd/MobileSSDClientOptionsProto.java:757: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `Object MobileSSDClientOptionsProto$MobileSSDClientOptions.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` writes to field `this.mobileSsdClientName_` outside of synchronization.
 Reporting because this access may occur on a background thread.
  755.                 hasMaxDetections(), maxDetections_,
  756.                 other.hasMaxDetections(), other.maxDetections_);
  757. >           mobileSsdClientName_ = visitor.visitString(
  758.                 hasMobileSsdClientName(), mobileSsdClientName_,
  759.                 other.hasMobileSsdClientName(), other.mobileSsdClientName_);

app/src/generated/debug/javalite/com/google/protos/mobilessd/MobileSSDClientOptionsProto.java:751: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `Object MobileSSDClientOptionsProto$MobileSSDClientOptions.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` writes to field `this.maxCategories_` outside of synchronization.
 Reporting because this access may occur on a background thread.
  749.                 hasIouThreshold(), iouThreshold_,
  750.                 other.hasIouThreshold(), other.iouThreshold_);
  751. >           maxCategories_ = visitor.visitInt(
  752.                 hasMaxCategories(), maxCategories_,
  753.                 other.hasMaxCategories(), other.maxCategories_);

app/src/generated/debug/javalite/com/google/protos/mobilessd/MobileSSDClientOptionsProto.java:749: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `Object MobileSSDClientOptionsProto$MobileSSDClientOptions.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` indirectly reads without synchronization from `this.bitField0_`. Potentially races with write in method `MobileSSDClientOptionsProto$MobileSSDClientOptions.dynamicMethod(...)`.
 Reporting because this access may occur on a background thread.
  747.             classNameWhitelist_= visitor.visitList(classNameWhitelist_, other.classNameWhitelist_);
  748.             iouThreshold_ = visitor.visitFloat(
  749. >               hasIouThreshold(), iouThreshold_,
  750.                 other.hasIouThreshold(), other.iouThreshold_);
  751.             maxCategories_ = visitor.visitInt(

app/src/generated/debug/javalite/com/google/protos/mobilessd/MobileSSDClientOptionsProto.java:820: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `Object MobileSSDClientOptionsProto$MobileSSDClientOptions.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` mutates container `this.classNameWhitelist_` via call to `add` outside of synchronization.
 Reporting because this access may occur on a background thread.
  818.                           com.google.protobuf.GeneratedMessageLite.mutableCopy(classNameWhitelist_);
  819.                     }
  820. >                   classNameWhitelist_.add(s);
  821.                     break;
  822.                   }

app/src/generated/debug/javalite/com/google/protos/mobilessd/MobileSSDClientOptionsProto.java:765: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `Object MobileSSDClientOptionsProto$MobileSSDClientOptions.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` writes to field `this.bitField0_` outside of synchronization.
 Reporting because this access may occur on a background thread.
  763.             if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
  764.                 .INSTANCE) {
  765. >             bitField0_ |= other.bitField0_;
  766.             }
  767.             return this;

app/src/generated/debug/javalite/com/google/protos/mobilessd/MobileSSDClientOptionsProto.java:760: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `Object MobileSSDClientOptionsProto$MobileSSDClientOptions.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` writes to field `this.scoreThreshold_` outside of synchronization.
 Reporting because this access may occur on a background thread.
  758.                 hasMobileSsdClientName(), mobileSsdClientName_,
  759.                 other.hasMobileSsdClientName(), other.mobileSsdClientName_);
  760. >           scoreThreshold_ = visitor.visitFloat(
  761.                 hasScoreThreshold(), scoreThreshold_,
  762.                 other.hasScoreThreshold(), other.scoreThreshold_);

app/src/generated/debug/javalite/com/google/protos/mobilessd/MobileSSDClientOptionsProto.java:747: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `Object MobileSSDClientOptionsProto$MobileSSDClientOptions.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` writes to field `this.classNameWhitelist_` outside of synchronization.
 Reporting because this access may occur on a background thread.
  745.             Visitor visitor = (Visitor) arg0;
  746.             com.google.protos.mobilessd.MobileSSDClientOptionsProto.MobileSSDClientOptions other = (com.google.protos.mobilessd.MobileSSDClientOptionsProto.MobileSSDClientOptions) arg1;
  747. >           classNameWhitelist_= visitor.visitList(classNameWhitelist_, other.classNameWhitelist_);
  748.             iouThreshold_ = visitor.visitFloat(
  749.                 hasIouThreshold(), iouThreshold_,

app/src/generated/debug/javalite/com/google/protos/mobilessd/MobileSSDClientOptionsProto.java:748: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `Object MobileSSDClientOptionsProto$MobileSSDClientOptions.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` writes to field `this.iouThreshold_` outside of synchronization.
 Reporting because this access may occur on a background thread.
  746.             com.google.protos.mobilessd.MobileSSDClientOptionsProto.MobileSSDClientOptions other = (com.google.protos.mobilessd.MobileSSDClientOptionsProto.MobileSSDClientOptions) arg1;
  747.             classNameWhitelist_= visitor.visitList(classNameWhitelist_, other.classNameWhitelist_);
  748. >           iouThreshold_ = visitor.visitFloat(
  749.                 hasIouThreshold(), iouThreshold_,
  750.                 other.hasIouThreshold(), other.iouThreshold_);

app/src/generated/debug/javalite/com/google/protos/mobilessd/MobileSSDClientOptionsProto.java:754: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `Object MobileSSDClientOptionsProto$MobileSSDClientOptions.dynamicMethod(GeneratedMessageLite$MethodToInvoke,Object,Object)` writes to field `this.maxDetections_` outside of synchronization.
 Reporting because this access may occur on a background thread.
  752.                 hasMaxCategories(), maxCategories_,
  753.                 other.hasMaxCategories(), other.maxCategories_);
  754. >           maxDetections_ = visitor.visitInt(
  755.                 hasMaxDetections(), maxDetections_,
  756.                 other.hasMaxDetections(), other.maxDetections_);

app/src/main/java/androidx/media/filterfw/Filter.java:302: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void Filter.execute()` writes to field `this.mScheduleCount` outside of synchronization.
 Reporting because this access may occur on a background thread.
  300.           }
  301.           autoReleaseFrames();
  302. >         this.mScheduleCount++;
  303.       }
  304.   

app/src/main/java/androidx/media/filterfw/Filter.java:301: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void Filter.execute()` indirectly mutates container `this.mAutoReleaseFrames` via call to `clear` outside of synchronization.
 Reporting because this access may occur on a background thread.
  299.               }
  300.           }
  301. >         autoReleaseFrames();
  302.           this.mScheduleCount++;
  303.       }

app/src/main/java/com/mp/android/apps/monke/basemvplib/AppActivityManager.java:86: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void AppActivityManager.finishActivity(java.lang.Class[])` reads without synchronization from `basemvplib.AppActivityManager.activities`. Potentially races with write in method `AppActivityManager.getInstance()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  84.       public void finishActivity(Class<?>... activityClasses){
  85.           ArrayList<WeakReference<Activity>> waitfinish = new ArrayList<>();
  86. >         for(WeakReference<Activity> temp :activities){
  87.               for(int i=0;i<activityClasses.length;i++){
  88.                   if(null != temp.get() && temp.get().getClass() == activityClasses[i]){

app/src/main/java/androidx/media/filterfw/FilterGraph.java:349: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void FilterGraph.flushFrames()` reads without synchronization from `this.mFilterMap`. Potentially races with write in method `FilterGraph.wipe()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  347.   
  348.       void flushFrames() {
  349. >         for (Filter filter : this.mFilterMap.values()) {
  350.               for (InputPort inputPort : filter.getConnectedInputPorts()) {
  351.                   inputPort.clear();

app/src/main/java/androidx/media/filterfw/RenderTarget.java:171: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void RenderTarget.focus()` indirectly reads without synchronization from `this.mContext`. Potentially races with write in method `RenderTarget.release()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  169.       public void focus() {
  170.           if (((RenderTarget) mCurrentTarget.get()) != this) {
  171. >             this.mEgl.eglMakeCurrent(this.mDisplay, surface(), surface(), this.mContext);
  172.               mCurrentTarget.set(this);
  173.           }

app/src/main/java/androidx/media/filterfw/RenderTarget.java:133: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `RenderTarget RenderTarget.forSurface(Surface)` reads without synchronization from `this.mContext`. Potentially races with write in method `RenderTarget.release()`.
 Reporting because this access may occur on a background thread.
  131.           checkEglError(this.mEgl, "eglCreateWindowSurface");
  132.           checkSurface(this.mEgl, eglSurf);
  133. >         RenderTarget result = new RenderTarget(this.mDisplay, this.mContext, eglSurf, 0, false, true);
  134.           result.setSurfaceSource(surface);
  135.           result.addReferenceTo(eglSurf);

app/src/main/java/androidx/media/filterfw/RenderTarget.java:123: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `RenderTarget RenderTarget.forSurface(Surface)` indirectly writes to field `filterfw.RenderTarget.mConfiguredDisplay` outside of synchronization.
 Reporting because this access may occur on a background thread.
  121.       public RenderTarget forSurface(Surface surface) {
  122.           EGLSurface eglSurf;
  123. >         EGLConfig eglConfig = chooseEglConfig(this.mEgl, this.mDisplay);
  124.           synchronized (mSurfaceSources) {
  125.               eglSurf = (EGLSurface) mSurfaceSources.get(surface);

app/src/main/java/androidx/media/filterfw/RenderTarget.java:135: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `RenderTarget RenderTarget.forSurface(Surface)` indirectly mutates container `filterfw.RenderTarget.mRefCounts` via call to `put` outside of synchronization.
 Reporting because this access may occur on a background thread.
  133.           RenderTarget result = new RenderTarget(this.mDisplay, this.mContext, eglSurf, 0, false, true);
  134.           result.setSurfaceSource(surface);
  135. >         result.addReferenceTo(eglSurf);
  136.           return result;
  137.       }

app/src/main/java/androidx/media/filterfw/RenderTarget.java:85: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `RenderTarget RenderTarget.forSurfaceHolder(SurfaceHolder)` indirectly writes to field `filterfw.RenderTarget.mConfiguredDisplay` outside of synchronization.
 Reporting because this access may occur on a background thread.
  83.       public RenderTarget forSurfaceHolder(SurfaceHolder surfaceHolder) {
  84.           EGLSurface eglSurf;
  85. >         EGLConfig eglConfig = chooseEglConfig(this.mEgl, this.mDisplay);
  86.           synchronized (mSurfaceSources) {
  87.               eglSurf = (EGLSurface) mSurfaceSources.get(surfaceHolder);

app/src/main/java/androidx/media/filterfw/RenderTarget.java:95: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `RenderTarget RenderTarget.forSurfaceHolder(SurfaceHolder)` reads without synchronization from `this.mContext`. Potentially races with write in method `RenderTarget.release()`.
 Reporting because this access may occur on a background thread.
  93.           checkEglError(this.mEgl, "eglCreateWindowSurface");
  94.           checkSurface(this.mEgl, eglSurf);
  95. >         RenderTarget result = new RenderTarget(this.mDisplay, this.mContext, eglSurf, 0, false, true);
  96.           result.addReferenceTo(eglSurf);
  97.           result.setSurfaceSource(surfaceHolder);

app/src/main/java/androidx/media/filterfw/RenderTarget.java:96: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `RenderTarget RenderTarget.forSurfaceHolder(SurfaceHolder)` indirectly mutates container `filterfw.RenderTarget.mRefCounts` via call to `put` outside of synchronization.
 Reporting because this access may occur on a background thread.
  94.           checkSurface(this.mEgl, eglSurf);
  95.           RenderTarget result = new RenderTarget(this.mDisplay, this.mContext, eglSurf, 0, false, true);
  96. >         result.addReferenceTo(eglSurf);
  97.           result.setSurfaceSource(surfaceHolder);
  98.           return result;

app/src/main/java/androidx/media/filterfw/RenderTarget.java:104: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `RenderTarget RenderTarget.forSurfaceTexture(SurfaceTexture)` indirectly writes to field `filterfw.RenderTarget.mConfiguredDisplay` outside of synchronization.
 Reporting because this access may occur on a background thread.
  102.       public RenderTarget forSurfaceTexture(SurfaceTexture surfaceTexture) {
  103.           EGLSurface eglSurf;
  104. >         EGLConfig eglConfig = chooseEglConfig(this.mEgl, this.mDisplay);
  105.           synchronized (mSurfaceSources) {
  106.               eglSurf = (EGLSurface) mSurfaceSources.get(surfaceTexture);

app/src/main/java/androidx/media/filterfw/RenderTarget.java:116: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `RenderTarget RenderTarget.forSurfaceTexture(SurfaceTexture)` indirectly mutates container `filterfw.RenderTarget.mRefCounts` via call to `put` outside of synchronization.
 Reporting because this access may occur on a background thread.
  114.           RenderTarget result = new RenderTarget(this.mDisplay, this.mContext, eglSurf, 0, false, true);
  115.           result.setSurfaceSource(surfaceTexture);
  116. >         result.addReferenceTo(eglSurf);
  117.           return result;
  118.       }

app/src/main/java/androidx/media/filterfw/RenderTarget.java:114: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `RenderTarget RenderTarget.forSurfaceTexture(SurfaceTexture)` reads without synchronization from `this.mContext`. Potentially races with write in method `RenderTarget.release()`.
 Reporting because this access may occur on a background thread.
  112.           checkEglError(this.mEgl, "eglCreateWindowSurface");
  113.           checkSurface(this.mEgl, eglSurf);
  114. >         RenderTarget result = new RenderTarget(this.mDisplay, this.mContext, eglSurf, 0, false, true);
  115.           result.setSurfaceSource(surfaceTexture);
  116.           result.addReferenceTo(eglSurf);

app/src/main/java/com/mp/android/apps/monke/basemvplib/AppActivityManager.java:36: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `List AppActivityManager.getActivities()` reads without synchronization from `basemvplib.AppActivityManager.activities`. Potentially races with write in method `AppActivityManager.getInstance()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  34.   
  35.       public List<WeakReference<Activity>> getActivities() {
  36. >         return activities;
  37.       }
  38.   

app/src/main/java/androidx/media/filterfw/FilterGraph.java:323: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `androidx.media.filterfw.Filter[] FilterGraph.getAllFilters()` reads without synchronization from `this.mAllFilters`. Potentially races with write in method `FilterGraph.wipe()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  321.   
  322.       Filter[] getAllFilters() {
  323. >         return this.mAllFilters;
  324.       }
  325.   

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:3149: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `FaceProtos$Face$Attribute FaceProtos$Face.getAttribute(int)` reads without synchronization from `this.attribute_`. Potentially races with write in method `FaceProtos$Face.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  3147.        */
  3148.       public com.google.protos.humansensing.FaceProtos.Face.Attribute getAttribute(int index) {
  3149. >       return attribute_.get(index);
  3150.       }
  3151.       /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:3143: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int FaceProtos$Face.getAttributeCount()` reads without synchronization from `this.attribute_`. Potentially races with write in method `FaceProtos$Face.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  3141.        */
  3142.       public int getAttributeCount() {
  3143. >       return attribute_.size();
  3144.       }
  3145.       /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:3130: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `List FaceProtos$Face.getAttributeList()` reads without synchronization from `this.attribute_`. Potentially races with write in method `FaceProtos$Face.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  3128.        */
  3129.       public java.util.List<com.google.protos.humansensing.FaceProtos.Face.Attribute> getAttributeList() {
  3130. >       return attribute_;
  3131.       }
  3132.       /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:3156: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `FaceProtos$Face$AttributeOrBuilder FaceProtos$Face.getAttributeOrBuilder(int)` reads without synchronization from `this.attribute_`. Potentially races with write in method `FaceProtos$Face.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  3154.       public com.google.protos.humansensing.FaceProtos.Face.AttributeOrBuilder getAttributeOrBuilder(
  3155.           int index) {
  3156. >       return attribute_.get(index);
  3157.       }
  3158.       private void ensureAttributeIsMutable() {

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:3137: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `List FaceProtos$Face.getAttributeOrBuilderList()` reads without synchronization from `this.attribute_`. Potentially races with write in method `FaceProtos$Face.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  3135.       public java.util.List<? extends com.google.protos.humansensing.FaceProtos.Face.AttributeOrBuilder> 
  3136.           getAttributeOrBuilderList() {
  3137. >       return attribute_;
  3138.       }
  3139.       /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:3256: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `FaceProtos$Face$BoundingBox FaceProtos$Face.getBoundingBox()` reads without synchronization from `this.boundingBox_`. Potentially races with write in method `FaceProtos$Face.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  3254.        */
  3255.       public com.google.protos.humansensing.FaceProtos.Face.BoundingBox getBoundingBox() {
  3256. >       return boundingBox_ == null ? com.google.protos.humansensing.FaceProtos.Face.BoundingBox.getDefaultInstance() : boundingBox_;
  3257.       }
  3258.       /**

app/src/generated/debug/javalite/com/google/protos/mobilessd/MobileSSDClientOptionsProto.java:115: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `String MobileSSDClientOptionsProto$MobileSSDClientOptions.getClassNameWhitelist(int)` reads without synchronization from `this.classNameWhitelist_`. Potentially races with write in method `MobileSSDClientOptionsProto$MobileSSDClientOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  113.        */
  114.       public java.lang.String getClassNameWhitelist(int index) {
  115. >       return classNameWhitelist_.get(index);
  116.       }
  117.       /**

app/src/generated/debug/javalite/com/google/protos/mobilessd/MobileSSDClientOptionsProto.java:123: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `ByteString MobileSSDClientOptionsProto$MobileSSDClientOptions.getClassNameWhitelistBytes(int)` reads without synchronization from `this.classNameWhitelist_`. Potentially races with write in method `MobileSSDClientOptionsProto$MobileSSDClientOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  121.           getClassNameWhitelistBytes(int index) {
  122.         return com.google.protobuf.ByteString.copyFromUtf8(
  123. >           classNameWhitelist_.get(index));
  124.       }
  125.       private void ensureClassNameWhitelistIsMutable() {

app/src/generated/debug/javalite/com/google/protos/mobilessd/MobileSSDClientOptionsProto.java:109: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int MobileSSDClientOptionsProto$MobileSSDClientOptions.getClassNameWhitelistCount()` reads without synchronization from `this.classNameWhitelist_`. Potentially races with write in method `MobileSSDClientOptionsProto$MobileSSDClientOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  107.        */
  108.       public int getClassNameWhitelistCount() {
  109. >       return classNameWhitelist_.size();
  110.       }
  111.       /**

app/src/generated/debug/javalite/com/google/protos/mobilessd/MobileSSDClientOptionsProto.java:103: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `List MobileSSDClientOptionsProto$MobileSSDClientOptions.getClassNameWhitelistList()` reads without synchronization from `this.classNameWhitelist_`. Potentially races with write in method `MobileSSDClientOptionsProto$MobileSSDClientOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  101.        */
  102.       public java.util.List<String> getClassNameWhitelistList() {
  103. >       return classNameWhitelist_;
  104.       }
  105.       /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:3049: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `float FaceProtos$Face.getConfidence()` reads without synchronization from `this.confidence_`. Potentially races with write in method `FaceProtos$Face.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  3047.        */
  3048.       public float getConfidence() {
  3049. >       return confidence_;
  3050.       }
  3051.       /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:376: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `float FaceProtos$Face$Attribute.getConfidence()` reads without synchronization from `this.confidence_`. Potentially races with write in method `FaceProtos$Face$Attribute.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  374.          */
  375.         public float getConfidence() {
  376. >         return confidence_;
  377.         }
  378.         /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:2345: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `float FaceProtos$Face$Landmark.getConfidence()` reads without synchronization from `this.confidence_`. Potentially races with write in method `FaceProtos$Face$Landmark.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  2343.          */
  2344.         public float getConfidence() {
  2345. >         return confidence_;
  2346.         }
  2347.         /**

app/src/main/java/androidx/media/filterfw/RenderTarget.java:192: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `EGLContext RenderTarget.getContext()` reads without synchronization from `this.mContext`. Potentially races with write in method `RenderTarget.release()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  190.   
  191.       public EGLContext getContext() {
  192. >         return this.mContext;
  193.       }
  194.   

app/src/main/java/androidx/media/filterfw/CameraStreamer.java:1203: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `ImageShader CameraStreamer$CamFrameHandlerICS.getCopyShader()` reads without synchronization from `this.mCopyShader`. Potentially races with write in method `CameraStreamer$CamFrameHandlerICS.updateServerFrame()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  1201.   
  1202.           protected ImageShader getCopyShader() {
  1203. >             if (this.mCopyShader == null) {
  1204.                   this.mCopyShader = new ImageShader(mCopyShaderSource);
  1205.               }

app/src/main/java/androidx/media/filterfw/CameraStreamer.java:1204: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `ImageShader CameraStreamer$CamFrameHandlerICS.getCopyShader()` writes to field `this.mCopyShader` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  1202.           protected ImageShader getCopyShader() {
  1203.               if (this.mCopyShader == null) {
  1204. >                 this.mCopyShader = new ImageShader(mCopyShaderSource);
  1205.               }
  1206.               return this.mCopyShader;

app/src/main/java/com/mp/android/apps/monke/monkeybook/widget/flowlayout/TagAdapter.java:64: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int TagAdapter.getCount()` reads without synchronization from container `this.mTagDatas` via call to `size`. Potentially races with write in method `TagAdapter.replaceAll(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  62.   
  63.       public int getCount() {
  64. >         return mTagDatas == null ? 0 : mTagDatas.size();
  65.       }
  66.   

imageeditlibrary/src/main/java/com/xinlan/imageeditlibrary/editimage/widget/EditCache.java:47: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int EditCache.getCur()` reads without synchronization from `this.mCurrent`. Potentially races with write in method `EditCache.getPreCurrentBit()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  45.   
  46.       public int getCur() {
  47. >         return mCurrent;
  48.       }
  49.   

imageeditlibrary/src/main/java/com/xinlan/imageeditlibrary/editimage/widget/EditCache.java:170: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `Bitmap EditCache.getCurBit()` reads without synchronization from `this.mCurrent`. Potentially races with write in method `EditCache.getPreCurrentBit()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  168.   
  169.       public Bitmap getCurBit() {
  170. >         if (mCurrent >= 0 && mCurrent < mCacheList.size()) {
  171.               Bitmap bit = mCacheList.get(mCurrent);
  172.               if (bit != null && !bit.isRecycled()) {

imageeditlibrary/src/main/java/com/xinlan/imageeditlibrary/editimage/widget/EditCache.java:171: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `Bitmap EditCache.getCurBit()` reads without synchronization from container `this.mCacheList` via call to `get`. Potentially races with write in method `EditCache.removeAll()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  169.       public Bitmap getCurBit() {
  170.           if (mCurrent >= 0 && mCurrent < mCacheList.size()) {
  171. >             Bitmap bit = mCacheList.get(mCurrent);
  172.               if (bit != null && !bit.isRecycled()) {
  173.                   return bit;

app/src/main/java/androidx/media/filterfw/Filter.java:362: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `long Filter.getCurrentTimestamp()` reads without synchronization from `this.mCurrentTimestamp`. Potentially races with write in method `Filter.softReset()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  360.   
  361.       final long getCurrentTimestamp() {
  362. >         return this.mCurrentTimestamp;
  363.       }
  364.   

app/src/main/java/com/mp/android/apps/monke/monkeybook/BitIntentDataManager.java:27: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `Object BitIntentDataManager.getData(String)` reads without synchronization from `monkeybook.BitIntentDataManager.bigData`. Potentially races with write in method `BitIntentDataManager.getInstance()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  25.       }
  26.       public Object getData(String key){
  27. >         return bigData.get(key);
  28.       }
  29.       public void putData(String key,Object data){

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:3321: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `FaceProtos$Face$Embedding FaceProtos$Face.getEmbedding(int)` reads without synchronization from `this.embedding_`. Potentially races with write in method `FaceProtos$Face.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  3319.        */
  3320.       public com.google.protos.humansensing.FaceProtos.Face.Embedding getEmbedding(int index) {
  3321. >       return embedding_.get(index);
  3322.       }
  3323.       /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:3315: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int FaceProtos$Face.getEmbeddingCount()` reads without synchronization from `this.embedding_`. Potentially races with write in method `FaceProtos$Face.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  3313.        */
  3314.       public int getEmbeddingCount() {
  3315. >       return embedding_.size();
  3316.       }
  3317.       /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:3302: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `List FaceProtos$Face.getEmbeddingList()` reads without synchronization from `this.embedding_`. Potentially races with write in method `FaceProtos$Face.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  3300.        */
  3301.       public java.util.List<com.google.protos.humansensing.FaceProtos.Face.Embedding> getEmbeddingList() {
  3302. >       return embedding_;
  3303.       }
  3304.       /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:3328: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `FaceProtos$Face$EmbeddingOrBuilder FaceProtos$Face.getEmbeddingOrBuilder(int)` reads without synchronization from `this.embedding_`. Potentially races with write in method `FaceProtos$Face.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  3326.       public com.google.protos.humansensing.FaceProtos.Face.EmbeddingOrBuilder getEmbeddingOrBuilder(
  3327.           int index) {
  3328. >       return embedding_.get(index);
  3329.       }
  3330.       private void ensureEmbeddingIsMutable() {

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:3309: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `List FaceProtos$Face.getEmbeddingOrBuilderList()` reads without synchronization from `this.embedding_`. Potentially races with write in method `FaceProtos$Face.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  3307.       public java.util.List<? extends com.google.protos.humansensing.FaceProtos.Face.EmbeddingOrBuilder> 
  3308.           getEmbeddingOrBuilderList() {
  3309. >       return embedding_;
  3310.       }
  3311.       /**

app/src/main/java/androidx/media/filterfw/RenderTarget.java:241: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `ImageShader RenderTarget.getExternalIdentityShader()` reads without synchronization from `this.mContext`. Potentially races with write in method `RenderTarget.release()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  239.   
  240.       public ImageShader getExternalIdentityShader() {
  241. >         ImageShader idShader = (ImageShader) mExternalIdShaders.get(this.mContext);
  242.           if (idShader != null) {
  243.               return idShader;

app/src/generated/debug/javalite/com/google/protos/humansensing/FacesProtos.java:65: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `FaceProtos$Face FacesProtos$Faces.getFace(int)` reads without synchronization from `this.face_`. Potentially races with write in method `FacesProtos$Faces.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  63.        */
  64.       public com.google.protos.humansensing.FaceProtos.Face getFace(int index) {
  65. >       return face_.get(index);
  66.       }
  67.       /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FacesProtos.java:59: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int FacesProtos$Faces.getFaceCount()` reads without synchronization from `this.face_`. Potentially races with write in method `FacesProtos$Faces.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  57.        */
  58.       public int getFaceCount() {
  59. >       return face_.size();
  60.       }
  61.       /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FacesProtos.java:46: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `List FacesProtos$Faces.getFaceList()` reads without synchronization from `this.face_`. Potentially races with write in method `FacesProtos$Faces.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  44.        */
  45.       public java.util.List<com.google.protos.humansensing.FaceProtos.Face> getFaceList() {
  46. >       return face_;
  47.       }
  48.       /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FacesProtos.java:72: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `FaceProtos$FaceOrBuilder FacesProtos$Faces.getFaceOrBuilder(int)` reads without synchronization from `this.face_`. Potentially races with write in method `FacesProtos$Faces.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  70.       public com.google.protos.humansensing.FaceProtos.FaceOrBuilder getFaceOrBuilder(
  71.           int index) {
  72. >       return face_.get(index);
  73.       }
  74.       private void ensureFaceIsMutable() {

app/src/generated/debug/javalite/com/google/protos/humansensing/FacesProtos.java:53: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `List FacesProtos$Faces.getFaceOrBuilderList()` reads without synchronization from `this.face_`. Potentially races with write in method `FacesProtos$Faces.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  51.       public java.util.List<? extends com.google.protos.humansensing.FaceProtos.FaceOrBuilder> 
  52.           getFaceOrBuilderList() {
  53. >       return face_;
  54.       }
  55.       /**

app/src/main/java/androidx/media/filterfw/FilterGraph.java:208: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `Filter FilterGraph.getFilter(String)` reads without synchronization from `this.mFilterMap`. Potentially races with write in method `FilterGraph.wipe()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  206.   
  207.       public Filter getFilter(String name) {
  208. >         return (Filter) this.mFilterMap.get(name);
  209.       }
  210.   

app/src/main/java/androidx/media/filterfw/FilterGraph.java:213: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `Collection FilterGraph.getFiltersByType(Class)` reads without synchronization from `this.mFilterMap`. Potentially races with write in method `FilterGraph.wipe()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  211.       public <T extends Filter> Collection<T> getFiltersByType(Class<T> clazz) {
  212.           Collection<T> filterList = new ArrayList();
  213. >         for (Entry<String, Filter> filterEntry : this.mFilterMap.entrySet()) {
  214.               Filter filter = (Filter) filterEntry.getValue();
  215.               if (filter.getClass() == clazz) {

app/src/main/java/androidx/media/filterfw/FilterGraph.java:239: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `GraphInputSource FilterGraph.getGraphInput(String)` reads without synchronization from `this.mFilterMap`. Potentially races with write in method `FilterGraph.wipe()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  237.   
  238.       public GraphInputSource getGraphInput(String name) {
  239. >         Filter result = (Filter) this.mFilterMap.get(name);
  240.           if (result != null && (result instanceof GraphInputSource)) {
  241.               return (GraphInputSource) result;

app/src/main/java/androidx/media/filterfw/FilterGraph.java:231: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `GraphOutputTarget FilterGraph.getGraphOutput(String)` reads without synchronization from `this.mFilterMap`. Potentially races with write in method `FilterGraph.wipe()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  229.   
  230.       public GraphOutputTarget getGraphOutput(String name) {
  231. >         Filter result = (Filter) this.mFilterMap.get(name);
  232.           if (result != null && (result instanceof GraphOutputTarget)) {
  233.               return (GraphOutputTarget) result;

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:3078: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `float FaceProtos$Face.getIdentityId()` reads without synchronization from `this.identityId_`. Potentially races with write in method `FaceProtos$Face.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  3076.        */
  3077.       public float getIdentityId() {
  3078. >       return identityId_;
  3079.       }
  3080.       /**

app/src/main/java/androidx/media/filterfw/RenderTarget.java:231: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `ImageShader RenderTarget.getIdentityShader()` reads without synchronization from `this.mContext`. Potentially races with write in method `RenderTarget.release()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  229.   
  230.       public ImageShader getIdentityShader() {
  231. >         ImageShader idShader = (ImageShader) mIdShaders.get(this.mContext);
  232.           if (idShader != null) {
  233.               return idShader;

app/src/main/java/com/mp/android/apps/login/utils/LoginManager.java:33: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `LoginManager LoginManager.getInstance()` reads without synchronization from `utils.LoginManager.loginManager`. Potentially races with write in method `LoginManager.getInstance()`.
 Reporting because this access may occur on a background thread.
  31.               }
  32.           }
  33. >         return loginManager;
  34.       }
  35.   

app/src/main/java/com/mp/android/apps/monke/monkeybook/BitIntentDataManager.java:20: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `BitIntentDataManager BitIntentDataManager.getInstance()` reads without synchronization from `monkeybook.BitIntentDataManager.instance`. Potentially races with write in method `BitIntentDataManager.getInstance()`.
 Reporting because this access may occur on a background thread.
  18.               }
  19.           }
  20. >         return instance;
  21.       }
  22.   

app/src/main/java/com/mp/android/apps/monke/monkeybook/ErrorAnalyContentManager.java:32: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `ErrorAnalyContentManager ErrorAnalyContentManager.getInstance()` reads without synchronization from `monkeybook.ErrorAnalyContentManager.instance`. Potentially races with write in method `ErrorAnalyContentManager.getInstance()`.
 Reporting because this access may occur on a background thread.
  30.               }
  31.           }
  32. >         return instance;
  33.       }
  34.   

app/src/main/java/com/mp/android/apps/monke/monkeybook/ReadBookControl.java:46: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `ReadBookControl ReadBookControl.getInstance()` reads without synchronization from `monkeybook.ReadBookControl.readBookControl`. Potentially races with write in method `ReadBookControl.getInstance()`.
 Reporting because this access may occur on a background thread.
  44.               }
  45.           }
  46. >         return readBookControl;
  47.       }
  48.   

app/src/main/java/com/mp/android/apps/monke/monkeybook/dao/DbHelper.java:33: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `DbHelper DbHelper.getInstance()` reads without synchronization from `dao.DbHelper.instance`. Potentially races with write in method `DbHelper.getInstance()`.
 Reporting because this access may occur on a background thread.
  31.               }
  32.           }
  33. >         return instance;
  34.       }
  35.   

app/src/generated/debug/javalite/com/google/protos/mobilessd/MobileSSDClientOptionsProto.java:192: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `float MobileSSDClientOptionsProto$MobileSSDClientOptions.getIouThreshold()` reads without synchronization from `this.iouThreshold_`. Potentially races with write in method `MobileSSDClientOptionsProto$MobileSSDClientOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  190.        */
  191.       public float getIouThreshold() {
  192. >       return iouThreshold_;
  193.       }
  194.       /**

app/src/main/java/com/mp/android/apps/monke/monkeybook/widget/flowlayout/TagAdapter.java:72: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `Object TagAdapter.getItem(int)` reads without synchronization from container `this.mTagDatas` via call to `get`. Potentially races with write in method `TagAdapter.replaceAll(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  70.   
  71.       public T getItem(int position) {
  72. >         return mTagDatas.get(position);
  73.       }
  74.   

app/src/main/java/com/mp/android/apps/monke/monkeybook/view/adapter/BookShelfAdapter.java:57: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int BookShelfAdapter.getItemcount()` reads without synchronization from container `this.books` via call to `size`. Potentially races with write in method `BookShelfAdapter.replaceAll(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  55.       @Override
  56.       public int getItemcount() {
  57. >         if (books.size() == 0) {
  58.               return 1;
  59.           } else {

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:3441: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `FaceProtos$Face$Landmark FaceProtos$Face.getLandmark(int)` reads without synchronization from `this.landmark_`. Potentially races with write in method `FaceProtos$Face.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  3439.        */
  3440.       public com.google.protos.humansensing.FaceProtos.Face.Landmark getLandmark(int index) {
  3441. >       return landmark_.get(index);
  3442.       }
  3443.       /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:3435: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int FaceProtos$Face.getLandmarkCount()` reads without synchronization from `this.landmark_`. Potentially races with write in method `FaceProtos$Face.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  3433.        */
  3434.       public int getLandmarkCount() {
  3435. >       return landmark_.size();
  3436.       }
  3437.       /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:3422: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `List FaceProtos$Face.getLandmarkList()` reads without synchronization from `this.landmark_`. Potentially races with write in method `FaceProtos$Face.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  3420.        */
  3421.       public java.util.List<com.google.protos.humansensing.FaceProtos.Face.Landmark> getLandmarkList() {
  3422. >       return landmark_;
  3423.       }
  3424.       /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:3448: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `FaceProtos$Face$LandmarkOrBuilder FaceProtos$Face.getLandmarkOrBuilder(int)` reads without synchronization from `this.landmark_`. Potentially races with write in method `FaceProtos$Face.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  3446.       public com.google.protos.humansensing.FaceProtos.Face.LandmarkOrBuilder getLandmarkOrBuilder(
  3447.           int index) {
  3448. >       return landmark_.get(index);
  3449.       }
  3450.       private void ensureLandmarkIsMutable() {

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:3429: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `List FaceProtos$Face.getLandmarkOrBuilderList()` reads without synchronization from `this.landmark_`. Potentially races with write in method `FaceProtos$Face.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  3427.       public java.util.List<? extends com.google.protos.humansensing.FaceProtos.Face.LandmarkOrBuilder> 
  3428.           getLandmarkOrBuilderList() {
  3429. >       return landmark_;
  3430.       }
  3431.       /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceDetectionOptionsProtos.java:92: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `float FaceDetectionOptionsProtos$FaceDetectionOptions.getLandmarkingConfidenceThreshold()` reads without synchronization from `this.landmarkingConfidenceThreshold_`. Potentially races with write in method `FaceDetectionOptionsProtos$FaceDetectionOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  90.        */
  91.       public float getLandmarkingConfidenceThreshold() {
  92. >       return landmarkingConfidenceThreshold_;
  93.       }
  94.       /**

app/src/main/java/androidx/media/filterfw/Filter.java:399: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `long Filter.getLastScheduleTime()` reads without synchronization from `this.mLastScheduleTime`. Potentially races with write in method `Filter.execute()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  397.   
  398.       final long getLastScheduleTime() {
  399. >         return this.mLastScheduleTime;
  400.       }
  401.   

app/src/generated/debug/javalite/com/google/protos/mobilessd/MobileSSDClientOptionsProto.java:221: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int MobileSSDClientOptionsProto$MobileSSDClientOptions.getMaxCategories()` reads without synchronization from `this.maxCategories_`. Potentially races with write in method `MobileSSDClientOptionsProto$MobileSSDClientOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  219.        */
  220.       public int getMaxCategories() {
  221. >       return maxCategories_;
  222.       }
  223.       /**

app/src/generated/debug/javalite/com/google/protos/mobilessd/MobileSSDClientOptionsProto.java:250: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int MobileSSDClientOptionsProto$MobileSSDClientOptions.getMaxDetections()` reads without synchronization from `this.maxDetections_`. Potentially races with write in method `MobileSSDClientOptionsProto$MobileSSDClientOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  248.        */
  249.       public int getMaxDetections() {
  250. >       return maxDetections_;
  251.       }
  252.       /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceDetectionOptionsProtos.java:237: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int FaceDetectionOptionsProtos$FaceDetectionOptions.getMaxEyeDistancePixels()` reads without synchronization from `this.maxEyeDistancePixels_`. Potentially races with write in method `FaceDetectionOptionsProtos$FaceDetectionOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  235.        */
  236.       public int getMaxEyeDistancePixels() {
  237. >       return maxEyeDistancePixels_;
  238.       }
  239.       /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceDetectionOptionsProtos.java:179: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `float FaceDetectionOptionsProtos$FaceDetectionOptions.getMaxRollAngle()` reads without synchronization from `this.maxRollAngle_`. Potentially races with write in method `FaceDetectionOptionsProtos$FaceDetectionOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  177.        */
  178.       public float getMaxRollAngle() {
  179. >       return maxRollAngle_;
  180.       }
  181.       /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceDetectionOptionsProtos.java:208: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int FaceDetectionOptionsProtos$FaceDetectionOptions.getMinEyeDistancePixels()` reads without synchronization from `this.minEyeDistancePixels_`. Potentially races with write in method `FaceDetectionOptionsProtos$FaceDetectionOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  206.        */
  207.       public int getMinEyeDistancePixels() {
  208. >       return minEyeDistancePixels_;
  209.       }
  210.       /**

app/src/generated/debug/javalite/com/google/protos/mobilessd/MobileSSDClientOptionsProto.java:279: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `String MobileSSDClientOptionsProto$MobileSSDClientOptions.getMobileSsdClientName()` reads without synchronization from `this.mobileSsdClientName_`. Potentially races with write in method `MobileSSDClientOptionsProto$MobileSSDClientOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  277.        */
  278.       public java.lang.String getMobileSsdClientName() {
  279. >       return mobileSsdClientName_;
  280.       }
  281.       /**

app/src/generated/debug/javalite/com/google/protos/mobilessd/MobileSSDClientOptionsProto.java:286: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `ByteString MobileSSDClientOptionsProto$MobileSSDClientOptions.getMobileSsdClientNameBytes()` reads without synchronization from `this.mobileSsdClientName_`. Potentially races with write in method `MobileSSDClientOptionsProto$MobileSSDClientOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  284.       public com.google.protobuf.ByteString
  285.           getMobileSsdClientNameBytes() {
  286. >       return com.google.protobuf.ByteString.copyFromUtf8(mobileSsdClientName_);
  287.       }
  288.       /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:405: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `String FaceProtos$Face$Attribute.getName()` reads without synchronization from `this.name_`. Potentially races with write in method `FaceProtos$Face$Attribute.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  403.          */
  404.         public java.lang.String getName() {
  405. >         return name_;
  406.         }
  407.         /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:412: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `ByteString FaceProtos$Face$Attribute.getNameBytes()` reads without synchronization from `this.name_`. Potentially races with write in method `FaceProtos$Face$Attribute.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  410.         public com.google.protobuf.ByteString
  411.             getNameBytes() {
  412. >         return com.google.protobuf.ByteString.copyFromUtf8(name_);
  413.         }
  414.         /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:3107: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `float FaceProtos$Face.getPanAngle()` reads without synchronization from `this.panAngle_`. Potentially races with write in method `FaceProtos$Face.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  3105.        */
  3106.       public float getPanAngle() {
  3107. >       return panAngle_;
  3108.       }
  3109.       /**

app/src/main/java/androidx/media/filterfw/RenderTarget.java:226: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `ByteBuffer RenderTarget.getPixelData(int,int)` indirectly reads without synchronization from `this.mContext`. Potentially races with write in method `RenderTarget.release()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  224.       public ByteBuffer getPixelData(int width, int height) {
  225.           ByteBuffer pixels = ByteBuffer.allocateDirect((width * height) * 4);
  226. >         GLToolbox.readTarget(this, pixels, width, height);
  227.           return pixels;
  228.       }

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceDetectionOptionsProtos.java:150: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `float FaceDetectionOptionsProtos$FaceDetectionOptions.getQuality()` reads without synchronization from `this.quality_`. Potentially races with write in method `FaceDetectionOptionsProtos$FaceDetectionOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  148.        */
  149.       public float getQuality() {
  150. >       return quality_;
  151.       }
  152.       /**

app/src/main/java/com/mp/android/apps/monke/monkeybook/view/adapter/BookShelfAdapter.java:69: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int BookShelfAdapter.getRealItemCount()` reads without synchronization from container `this.books` via call to `size`. Potentially races with write in method `BookShelfAdapter.replaceAll(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  67.   
  68.       public int getRealItemCount() {
  69. >         return books.size();
  70.       }
  71.   

app/src/main/java/androidx/media/filterfw/MffContext.java:130: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `RenderScript MffContext.getRenderScript()` writes to field `this.mRenderScript` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  128.       public final RenderScript getRenderScript() {
  129.           if (this.mRenderScript == null) {
  130. >             this.mRenderScript = RenderScript.create(this.mApplicationContext);
  131.           }
  132.           return this.mRenderScript;

app/src/main/java/androidx/media/filterfw/MffContext.java:129: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `RenderScript MffContext.getRenderScript()` reads without synchronization from `this.mRenderScript`. Potentially races with write in method `MffContext.release()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  127.       @TargetApi(11)
  128.       public final RenderScript getRenderScript() {
  129. >         if (this.mRenderScript == null) {
  130.               this.mRenderScript = RenderScript.create(this.mApplicationContext);
  131.           }

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:2991: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `float FaceProtos$Face.getRollAngle()` reads without synchronization from `this.rollAngle_`. Potentially races with write in method `FaceProtos$Face.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  2989.        */
  2990.       public float getRollAngle() {
  2991. >       return rollAngle_;
  2992.       }
  2993.       /**

app/src/main/java/androidx/media/filterfw/Filter.java:344: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int Filter.getScheduleCount()` reads without synchronization from `this.mScheduleCount`. Potentially races with write in method `Filter.execute()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  342.   
  343.       final int getScheduleCount() {
  344. >         return this.mScheduleCount;
  345.       }
  346.   

app/src/generated/debug/javalite/com/google/protos/mobilessd/MobileSSDClientOptionsProto.java:330: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `float MobileSSDClientOptionsProto$MobileSSDClientOptions.getScoreThreshold()` reads without synchronization from `this.scoreThreshold_`. Potentially races with write in method `MobileSSDClientOptionsProto$MobileSSDClientOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  328.        */
  329.       public float getScoreThreshold() {
  330. >       return scoreThreshold_;
  331.       }
  332.       /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceDetectionOptionsProtos.java:296: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int FaceDetectionOptionsProtos$FaceDetectionOptions.getSerializedSize()` reads without synchronization from `this.landmarkingConfidenceThreshold_`. Potentially races with write in method `FaceDetectionOptionsProtos$FaceDetectionOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  294.         if (((bitField0_ & 0x00000001) == 0x00000001)) {
  295.           size += com.google.protobuf.CodedOutputStream
  296. >           .computeFloatSize(4, landmarkingConfidenceThreshold_);
  297.         }
  298.         if (((bitField0_ & 0x00000004) == 0x00000004)) {

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceDetectionOptionsProtos.java:288: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int FaceDetectionOptionsProtos$FaceDetectionOptions.getSerializedSize()` reads without synchronization from `this.maxEyeDistancePixels_`. Potentially races with write in method `FaceDetectionOptionsProtos$FaceDetectionOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  286.         if (((bitField0_ & 0x00000020) == 0x00000020)) {
  287.           size += com.google.protobuf.CodedOutputStream
  288. >           .computeUInt32Size(2, maxEyeDistancePixels_);
  289.         }
  290.         if (((bitField0_ & 0x00000008) == 0x00000008)) {

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceDetectionOptionsProtos.java:300: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int FaceDetectionOptionsProtos$FaceDetectionOptions.getSerializedSize()` reads without synchronization from `this.quality_`. Potentially races with write in method `FaceDetectionOptionsProtos$FaceDetectionOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  298.         if (((bitField0_ & 0x00000004) == 0x00000004)) {
  299.           size += com.google.protobuf.CodedOutputStream
  300. >           .computeFloatSize(5, quality_);
  301.         }
  302.         if (((bitField0_ & 0x00000002) == 0x00000002)) {

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceDetectionOptionsProtos.java:304: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int FaceDetectionOptionsProtos$FaceDetectionOptions.getSerializedSize()` reads without synchronization from `this.smoothness_`. Potentially races with write in method `FaceDetectionOptionsProtos$FaceDetectionOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  302.         if (((bitField0_ & 0x00000002) == 0x00000002)) {
  303.           size += com.google.protobuf.CodedOutputStream
  304. >           .computeFloatSize(6, smoothness_);
  305.         }
  306.         size += unknownFields.getSerializedSize();

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceDetectionOptionsProtos.java:292: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int FaceDetectionOptionsProtos$FaceDetectionOptions.getSerializedSize()` reads without synchronization from `this.maxRollAngle_`. Potentially races with write in method `FaceDetectionOptionsProtos$FaceDetectionOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  290.         if (((bitField0_ & 0x00000008) == 0x00000008)) {
  291.           size += com.google.protobuf.CodedOutputStream
  292. >           .computeFloatSize(3, maxRollAngle_);
  293.         }
  294.         if (((bitField0_ & 0x00000001) == 0x00000001)) {

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceDetectionOptionsProtos.java:282: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int FaceDetectionOptionsProtos$FaceDetectionOptions.getSerializedSize()` reads without synchronization from `this.bitField0_`. Potentially races with write in method `FaceDetectionOptionsProtos$FaceDetectionOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  280.   
  281.         size = 0;
  282. >       if (((bitField0_ & 0x00000010) == 0x00000010)) {
  283.           size += com.google.protobuf.CodedOutputStream
  284.             .computeUInt32Size(1, minEyeDistancePixels_);

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceDetectionOptionsProtos.java:284: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int FaceDetectionOptionsProtos$FaceDetectionOptions.getSerializedSize()` reads without synchronization from `this.minEyeDistancePixels_`. Potentially races with write in method `FaceDetectionOptionsProtos$FaceDetectionOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  282.         if (((bitField0_ & 0x00000010) == 0x00000010)) {
  283.           size += com.google.protobuf.CodedOutputStream
  284. >           .computeUInt32Size(1, minEyeDistancePixels_);
  285.         }
  286.         if (((bitField0_ & 0x00000020) == 0x00000020)) {

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:3591: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int FaceProtos$Face.getSerializedSize()` reads without synchronization from `this.panAngle_`. Potentially races with write in method `FaceProtos$Face.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  3589.         if (((bitField0_ & 0x00000010) == 0x00000010)) {
  3590.           size += com.google.protobuf.CodedOutputStream
  3591. >           .computeFloatSize(5, panAngle_);
  3592.         }
  3593.         if (((bitField0_ & 0x00000002) == 0x00000002)) {

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:3597: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int FaceProtos$Face.getSerializedSize()` reads without synchronization from `this.embedding_`. Potentially races with write in method `FaceProtos$Face.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  3595.             .computeFloatSize(6, tiltAngle_);
  3596.         }
  3597. >       for (int i = 0; i < embedding_.size(); i++) {
  3598.           size += com.google.protobuf.CodedOutputStream
  3599.             .computeMessageSize(7, embedding_.get(i));

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:3579: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int FaceProtos$Face.getSerializedSize()` reads without synchronization from container `this.landmark_` via call to `get`. Potentially races with write in method `FaceProtos$Face.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  3577.         for (int i = 0; i < landmark_.size(); i++) {
  3578.           size += com.google.protobuf.CodedOutputStream
  3579. >           .computeMessageSize(2, landmark_.get(i));
  3580.         }
  3581.         if (((bitField0_ & 0x00000004) == 0x00000004)) {

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:3595: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int FaceProtos$Face.getSerializedSize()` reads without synchronization from `this.tiltAngle_`. Potentially races with write in method `FaceProtos$Face.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  3593.         if (((bitField0_ & 0x00000002) == 0x00000002)) {
  3594.           size += com.google.protobuf.CodedOutputStream
  3595. >           .computeFloatSize(6, tiltAngle_);
  3596.         }
  3597.         for (int i = 0; i < embedding_.size(); i++) {

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:3587: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int FaceProtos$Face.getSerializedSize()` reads without synchronization from `this.rollAngle_`. Potentially races with write in method `FaceProtos$Face.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  3585.         if (((bitField0_ & 0x00000001) == 0x00000001)) {
  3586.           size += com.google.protobuf.CodedOutputStream
  3587. >           .computeFloatSize(4, rollAngle_);
  3588.         }
  3589.         if (((bitField0_ & 0x00000010) == 0x00000010)) {

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:3603: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int FaceProtos$Face.getSerializedSize()` reads without synchronization from container `this.attribute_` via call to `get`. Potentially races with write in method `FaceProtos$Face.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  3601.         for (int i = 0; i < attribute_.size(); i++) {
  3602.           size += com.google.protobuf.CodedOutputStream
  3603. >           .computeMessageSize(8, attribute_.get(i));
  3604.         }
  3605.         if (((bitField0_ & 0x00000008) == 0x00000008)) {

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:3583: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int FaceProtos$Face.getSerializedSize()` reads without synchronization from `this.confidence_`. Potentially races with write in method `FaceProtos$Face.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  3581.         if (((bitField0_ & 0x00000004) == 0x00000004)) {
  3582.           size += com.google.protobuf.CodedOutputStream
  3583. >           .computeFloatSize(3, confidence_);
  3584.         }
  3585.         if (((bitField0_ & 0x00000001) == 0x00000001)) {

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:3575: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int FaceProtos$Face.getSerializedSize()` indirectly reads without synchronization from `this.boundingBox_`. Potentially races with write in method `FaceProtos$Face.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  3573.         if (((bitField0_ & 0x00000020) == 0x00000020)) {
  3574.           size += com.google.protobuf.CodedOutputStream
  3575. >           .computeMessageSize(1, getBoundingBox());
  3576.         }
  3577.         for (int i = 0; i < landmark_.size(); i++) {

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:3573: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int FaceProtos$Face.getSerializedSize()` reads without synchronization from `this.bitField0_`. Potentially races with write in method `FaceProtos$Face.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  3571.   
  3572.         size = 0;
  3573. >       if (((bitField0_ & 0x00000020) == 0x00000020)) {
  3574.           size += com.google.protobuf.CodedOutputStream
  3575.             .computeMessageSize(1, getBoundingBox());

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:3601: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int FaceProtos$Face.getSerializedSize()` reads without synchronization from `this.attribute_`. Potentially races with write in method `FaceProtos$Face.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  3599.             .computeMessageSize(7, embedding_.get(i));
  3600.         }
  3601. >       for (int i = 0; i < attribute_.size(); i++) {
  3602.           size += com.google.protobuf.CodedOutputStream
  3603.             .computeMessageSize(8, attribute_.get(i));

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:3577: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int FaceProtos$Face.getSerializedSize()` reads without synchronization from `this.landmark_`. Potentially races with write in method `FaceProtos$Face.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  3575.             .computeMessageSize(1, getBoundingBox());
  3576.         }
  3577. >       for (int i = 0; i < landmark_.size(); i++) {
  3578.           size += com.google.protobuf.CodedOutputStream
  3579.             .computeMessageSize(2, landmark_.get(i));

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:3607: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int FaceProtos$Face.getSerializedSize()` reads without synchronization from `this.identityId_`. Potentially races with write in method `FaceProtos$Face.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  3605.         if (((bitField0_ & 0x00000008) == 0x00000008)) {
  3606.           size += com.google.protobuf.CodedOutputStream
  3607. >           .computeFloatSize(9, identityId_);
  3608.         }
  3609.         size += unknownFields.getSerializedSize();

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:3599: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int FaceProtos$Face.getSerializedSize()` reads without synchronization from container `this.embedding_` via call to `get`. Potentially races with write in method `FaceProtos$Face.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  3597.         for (int i = 0; i < embedding_.size(); i++) {
  3598.           size += com.google.protobuf.CodedOutputStream
  3599. >           .computeMessageSize(7, embedding_.get(i));
  3600.         }
  3601.         for (int i = 0; i < attribute_.size(); i++) {

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:542: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int FaceProtos$Face$Attribute.getSerializedSize()` reads without synchronization from `this.value_`. Potentially races with write in method `FaceProtos$Face$Attribute.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  540.           if (((bitField0_ & 0x00000004) == 0x00000004)) {
  541.             size += com.google.protobuf.CodedOutputStream
  542. >             .computeFloatSize(4, value_);
  543.           }
  544.           size += unknownFields.getSerializedSize();

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:530: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int FaceProtos$Face$Attribute.getSerializedSize()` reads without synchronization from `this.type_`. Potentially races with write in method `FaceProtos$Face$Attribute.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  528.           if (((bitField0_ & 0x00000008) == 0x00000008)) {
  529.             size += com.google.protobuf.CodedOutputStream
  530. >             .computeEnumSize(1, type_);
  531.           }
  532.           if (((bitField0_ & 0x00000002) == 0x00000002)) {

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:534: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int FaceProtos$Face$Attribute.getSerializedSize()` indirectly reads without synchronization from `this.name_`. Potentially races with write in method `FaceProtos$Face$Attribute.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  532.           if (((bitField0_ & 0x00000002) == 0x00000002)) {
  533.             size += com.google.protobuf.CodedOutputStream
  534. >             .computeStringSize(2, getName());
  535.           }
  536.           if (((bitField0_ & 0x00000001) == 0x00000001)) {

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:538: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int FaceProtos$Face$Attribute.getSerializedSize()` reads without synchronization from `this.confidence_`. Potentially races with write in method `FaceProtos$Face$Attribute.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  536.           if (((bitField0_ & 0x00000001) == 0x00000001)) {
  537.             size += com.google.protobuf.CodedOutputStream
  538. >             .computeFloatSize(3, confidence_);
  539.           }
  540.           if (((bitField0_ & 0x00000004) == 0x00000004)) {

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:528: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int FaceProtos$Face$Attribute.getSerializedSize()` reads without synchronization from `this.bitField0_`. Potentially races with write in method `FaceProtos$Face$Attribute.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  526.   
  527.           size = 0;
  528. >         if (((bitField0_ & 0x00000008) == 0x00000008)) {
  529.             size += com.google.protobuf.CodedOutputStream
  530.               .computeEnumSize(1, type_);

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:1085: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int FaceProtos$Face$BoundingBox.getSerializedSize()` reads without synchronization from `this.x1_`. Potentially races with write in method `FaceProtos$Face$BoundingBox.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  1083.           if (((bitField0_ & 0x00000001) == 0x00000001)) {
  1084.             size += com.google.protobuf.CodedOutputStream
  1085. >             .computeFloatSize(1, x1_);
  1086.           }
  1087.           if (((bitField0_ & 0x00000004) == 0x00000004)) {

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:1097: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int FaceProtos$Face$BoundingBox.getSerializedSize()` reads without synchronization from `this.y2_`. Potentially races with write in method `FaceProtos$Face$BoundingBox.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  1095.           if (((bitField0_ & 0x00000008) == 0x00000008)) {
  1096.             size += com.google.protobuf.CodedOutputStream
  1097. >             .computeFloatSize(4, y2_);
  1098.           }
  1099.           size += unknownFields.getSerializedSize();

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:1089: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int FaceProtos$Face$BoundingBox.getSerializedSize()` reads without synchronization from `this.y1_`. Potentially races with write in method `FaceProtos$Face$BoundingBox.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  1087.           if (((bitField0_ & 0x00000004) == 0x00000004)) {
  1088.             size += com.google.protobuf.CodedOutputStream
  1089. >             .computeFloatSize(2, y1_);
  1090.           }
  1091.           if (((bitField0_ & 0x00000002) == 0x00000002)) {

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:1093: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int FaceProtos$Face$BoundingBox.getSerializedSize()` reads without synchronization from `this.x2_`. Potentially races with write in method `FaceProtos$Face$BoundingBox.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  1091.           if (((bitField0_ & 0x00000002) == 0x00000002)) {
  1092.             size += com.google.protobuf.CodedOutputStream
  1093. >             .computeFloatSize(3, x2_);
  1094.           }
  1095.           if (((bitField0_ & 0x00000008) == 0x00000008)) {

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:1083: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int FaceProtos$Face$BoundingBox.getSerializedSize()` reads without synchronization from `this.bitField0_`. Potentially races with write in method `FaceProtos$Face$BoundingBox.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  1081.   
  1082.           size = 0;
  1083. >         if (((bitField0_ & 0x00000001) == 0x00000001)) {
  1084.             size += com.google.protobuf.CodedOutputStream
  1085.               .computeFloatSize(1, x1_);

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:1539: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int FaceProtos$Face$Embedding.getSerializedSize()` reads without synchronization from `this.version_`. Potentially races with write in method `FaceProtos$Face$Embedding.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  1537.           if (((bitField0_ & 0x00000002) == 0x00000002)) {
  1538.             size += com.google.protobuf.CodedOutputStream
  1539. >             .computeInt32Size(1, version_);
  1540.           }
  1541.           if (((bitField0_ & 0x00000001) == 0x00000001)) {

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:1543: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int FaceProtos$Face$Embedding.getSerializedSize()` reads without synchronization from `this.value_`. Potentially races with write in method `FaceProtos$Face$Embedding.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  1541.           if (((bitField0_ & 0x00000001) == 0x00000001)) {
  1542.             size += com.google.protobuf.CodedOutputStream
  1543. >             .computeBytesSize(2, value_);
  1544.           }
  1545.           size += unknownFields.getSerializedSize();

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:1537: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int FaceProtos$Face$Embedding.getSerializedSize()` reads without synchronization from `this.bitField0_`. Potentially races with write in method `FaceProtos$Face$Embedding.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  1535.   
  1536.           size = 0;
  1537. >         if (((bitField0_ & 0x00000002) == 0x00000002)) {
  1538.             size += com.google.protobuf.CodedOutputStream
  1539.               .computeInt32Size(1, version_);

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:2545: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int FaceProtos$Face$Landmark.getSerializedSize()` reads without synchronization from `this.x_`. Potentially races with write in method `FaceProtos$Face$Landmark.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  2543.           if (((bitField0_ & 0x00000008) == 0x00000008)) {
  2544.             size += com.google.protobuf.CodedOutputStream
  2545. >             .computeFloatSize(1, x_);
  2546.           }
  2547.           if (((bitField0_ & 0x00000010) == 0x00000010)) {

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:2553: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int FaceProtos$Face$Landmark.getSerializedSize()` reads without synchronization from `this.z_`. Potentially races with write in method `FaceProtos$Face$Landmark.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  2551.           if (((bitField0_ & 0x00000020) == 0x00000020)) {
  2552.             size += com.google.protobuf.CodedOutputStream
  2553. >             .computeFloatSize(3, z_);
  2554.           }
  2555.           if (((bitField0_ & 0x00000002) == 0x00000002)) {

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:2565: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int FaceProtos$Face$Landmark.getSerializedSize()` reads without synchronization from `this.confidence_`. Potentially races with write in method `FaceProtos$Face$Landmark.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  2563.           if (((bitField0_ & 0x00000001) == 0x00000001)) {
  2564.             size += com.google.protobuf.CodedOutputStream
  2565. >             .computeFloatSize(6, confidence_);
  2566.           }
  2567.           size += unknownFields.getSerializedSize();

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:2549: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int FaceProtos$Face$Landmark.getSerializedSize()` reads without synchronization from `this.y_`. Potentially races with write in method `FaceProtos$Face$Landmark.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  2547.           if (((bitField0_ & 0x00000010) == 0x00000010)) {
  2548.             size += com.google.protobuf.CodedOutputStream
  2549. >             .computeFloatSize(2, y_);
  2550.           }
  2551.           if (((bitField0_ & 0x00000020) == 0x00000020)) {

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:2557: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int FaceProtos$Face$Landmark.getSerializedSize()` reads without synchronization from `this.type_`. Potentially races with write in method `FaceProtos$Face$Landmark.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  2555.           if (((bitField0_ & 0x00000002) == 0x00000002)) {
  2556.             size += com.google.protobuf.CodedOutputStream
  2557. >             .computeEnumSize(4, type_);
  2558.           }
  2559.           if (((bitField0_ & 0x00000004) == 0x00000004)) {

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:2543: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int FaceProtos$Face$Landmark.getSerializedSize()` reads without synchronization from `this.bitField0_`. Potentially races with write in method `FaceProtos$Face$Landmark.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  2541.   
  2542.           size = 0;
  2543. >         if (((bitField0_ & 0x00000008) == 0x00000008)) {
  2544.             size += com.google.protobuf.CodedOutputStream
  2545.               .computeFloatSize(1, x_);

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:2561: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int FaceProtos$Face$Landmark.getSerializedSize()` reads without synchronization from `this.visibility_`. Potentially races with write in method `FaceProtos$Face$Landmark.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  2559.           if (((bitField0_ & 0x00000004) == 0x00000004)) {
  2560.             size += com.google.protobuf.CodedOutputStream
  2561. >             .computeEnumSize(5, visibility_);
  2562.           }
  2563.           if (((bitField0_ & 0x00000001) == 0x00000001)) {

app/src/generated/debug/javalite/com/google/protos/humansensing/FacesProtos.java:175: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int FacesProtos$Faces.getSerializedSize()` reads without synchronization from container `this.face_` via call to `get`. Potentially races with write in method `FacesProtos$Faces.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  173.         for (int i = 0; i < face_.size(); i++) {
  174.           size += com.google.protobuf.CodedOutputStream
  175. >           .computeMessageSize(1, face_.get(i));
  176.         }
  177.         size += unknownFields.getSerializedSize();

app/src/generated/debug/javalite/com/google/protos/humansensing/FacesProtos.java:173: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int FacesProtos$Faces.getSerializedSize()` reads without synchronization from `this.face_`. Potentially races with write in method `FacesProtos$Faces.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  171.   
  172.         size = 0;
  173. >       for (int i = 0; i < face_.size(); i++) {
  174.           size += com.google.protobuf.CodedOutputStream
  175.             .computeMessageSize(1, face_.get(i));

app/src/generated/debug/javalite/com/google/protos/mobilessd/MobileSSDClientOptionsProto.java:393: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int MobileSSDClientOptionsProto$MobileSSDClientOptions.getSerializedSize()` reads without synchronization from `this.iouThreshold_`. Potentially races with write in method `MobileSSDClientOptionsProto$MobileSSDClientOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  391.         if (((bitField0_ & 0x00000001) == 0x00000001)) {
  392.           size += com.google.protobuf.CodedOutputStream
  393. >           .computeFloatSize(5, iouThreshold_);
  394.         }
  395.         {

app/src/generated/debug/javalite/com/google/protos/mobilessd/MobileSSDClientOptionsProto.java:399: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int MobileSSDClientOptionsProto$MobileSSDClientOptions.getSerializedSize()` reads without synchronization from container `this.classNameWhitelist_` via call to `get`. Potentially races with write in method `MobileSSDClientOptionsProto$MobileSSDClientOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  397.           for (int i = 0; i < classNameWhitelist_.size(); i++) {
  398.             dataSize += com.google.protobuf.CodedOutputStream
  399. >             .computeStringSizeNoTag(classNameWhitelist_.get(i));
  400.           }
  401.           size += dataSize;

app/src/generated/debug/javalite/com/google/protos/mobilessd/MobileSSDClientOptionsProto.java:381: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int MobileSSDClientOptionsProto$MobileSSDClientOptions.getSerializedSize()` reads without synchronization from `this.maxDetections_`. Potentially races with write in method `MobileSSDClientOptionsProto$MobileSSDClientOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  379.         if (((bitField0_ & 0x00000004) == 0x00000004)) {
  380.           size += com.google.protobuf.CodedOutputStream
  381. >           .computeUInt32Size(2, maxDetections_);
  382.         }
  383.         if (((bitField0_ & 0x00000002) == 0x00000002)) {

app/src/generated/debug/javalite/com/google/protos/mobilessd/MobileSSDClientOptionsProto.java:377: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int MobileSSDClientOptionsProto$MobileSSDClientOptions.getSerializedSize()` indirectly reads without synchronization from `this.mobileSsdClientName_`. Potentially races with write in method `MobileSSDClientOptionsProto$MobileSSDClientOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  375.         if (((bitField0_ & 0x00000008) == 0x00000008)) {
  376.           size += com.google.protobuf.CodedOutputStream
  377. >           .computeStringSize(1, getMobileSsdClientName());
  378.         }
  379.         if (((bitField0_ & 0x00000004) == 0x00000004)) {

app/src/generated/debug/javalite/com/google/protos/mobilessd/MobileSSDClientOptionsProto.java:385: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int MobileSSDClientOptionsProto$MobileSSDClientOptions.getSerializedSize()` reads without synchronization from `this.maxCategories_`. Potentially races with write in method `MobileSSDClientOptionsProto$MobileSSDClientOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  383.         if (((bitField0_ & 0x00000002) == 0x00000002)) {
  384.           size += com.google.protobuf.CodedOutputStream
  385. >           .computeUInt32Size(3, maxCategories_);
  386.         }
  387.         if (((bitField0_ & 0x00000010) == 0x00000010)) {

app/src/generated/debug/javalite/com/google/protos/mobilessd/MobileSSDClientOptionsProto.java:397: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int MobileSSDClientOptionsProto$MobileSSDClientOptions.getSerializedSize()` reads without synchronization from `this.classNameWhitelist_`. Potentially races with write in method `MobileSSDClientOptionsProto$MobileSSDClientOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  395.         {
  396.           int dataSize = 0;
  397. >         for (int i = 0; i < classNameWhitelist_.size(); i++) {
  398.             dataSize += com.google.protobuf.CodedOutputStream
  399.               .computeStringSizeNoTag(classNameWhitelist_.get(i));

app/src/generated/debug/javalite/com/google/protos/mobilessd/MobileSSDClientOptionsProto.java:389: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int MobileSSDClientOptionsProto$MobileSSDClientOptions.getSerializedSize()` reads without synchronization from `this.scoreThreshold_`. Potentially races with write in method `MobileSSDClientOptionsProto$MobileSSDClientOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  387.         if (((bitField0_ & 0x00000010) == 0x00000010)) {
  388.           size += com.google.protobuf.CodedOutputStream
  389. >           .computeFloatSize(4, scoreThreshold_);
  390.         }
  391.         if (((bitField0_ & 0x00000001) == 0x00000001)) {

app/src/generated/debug/javalite/com/google/protos/mobilessd/MobileSSDClientOptionsProto.java:375: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int MobileSSDClientOptionsProto$MobileSSDClientOptions.getSerializedSize()` reads without synchronization from `this.bitField0_`. Potentially races with write in method `MobileSSDClientOptionsProto$MobileSSDClientOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  373.   
  374.         size = 0;
  375. >       if (((bitField0_ & 0x00000008) == 0x00000008)) {
  376.           size += com.google.protobuf.CodedOutputStream
  377.             .computeStringSize(1, getMobileSsdClientName());

app/src/main/java/androidx/media/filterpacks/image/GrainFilter.java:32: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `Signature GrainFilter.getSignature()` indirectly mutates container `filterfw.FrameType.mTypeCache` via call to `put` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  30.   
  31.       public Signature getSignature() {
  32. >         FrameType imageIn = FrameType.image2D(FrameType.ELEMENT_RGBA8888, 2);
  33.           return new Signature().addInputPort("image", 2, imageIn).addInputPort("scale", 1, FrameType.single(Float.TYPE)).addOutputPort("image", 2, FrameType.image2D(FrameType.ELEMENT_RGBA8888, 16)).disallowOtherPorts();
  34.       }

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceDetectionOptionsProtos.java:121: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `float FaceDetectionOptionsProtos$FaceDetectionOptions.getSmoothness()` reads without synchronization from `this.smoothness_`. Potentially races with write in method `FaceDetectionOptionsProtos$FaceDetectionOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  119.        */
  120.       public float getSmoothness() {
  121. >       return smoothness_;
  122.       }
  123.       /**

app/src/main/java/com/mp/android/apps/monke/monkeybook/ReadBookControl.java:158: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `List ReadBookControl.getTextDrawable()` reads without synchronization from `monkeybook.ReadBookControl.textDrawable`. Potentially races with write in method `ReadBookControl.getInstance()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  156.   
  157.       public static List<Map<String, Integer>> getTextDrawable() {
  158. >         return textDrawable;
  159.       }
  160.   

app/src/main/java/com/mp/android/apps/monke/monkeybook/ReadBookControl.java:154: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `List ReadBookControl.getTextKind()` reads without synchronization from `monkeybook.ReadBookControl.textKind`. Potentially races with write in method `ReadBookControl.getInstance()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  152.   
  153.       public static List<Map<String, Integer>> getTextKind() {
  154. >         return textKind;
  155.       }
  156.   

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:3020: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `float FaceProtos$Face.getTiltAngle()` reads without synchronization from `this.tiltAngle_`. Potentially races with write in method `FaceProtos$Face.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  3018.        */
  3019.       public float getTiltAngle() {
  3020. >       return tiltAngle_;
  3021.       }
  3022.       /**

app/src/main/java/androidx/media/filterfw/decoder/AudioTrackDecoder.java:107: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `long AudioTrackDecoder.getTimestampNs()` reads without synchronization from `this.mPresentationTimeUs`. Potentially races with write in method `AudioTrackDecoder.onDataAvailable(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  105.   
  106.       public long getTimestampNs() {
  107. >         return this.mPresentationTimeUs * 1000;
  108.       }
  109.   

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:485: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `FaceProtos$Face$Attribute$Type FaceProtos$Face$Attribute.getType()` reads without synchronization from `this.type_`. Potentially races with write in method `FaceProtos$Face$Attribute.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  483.          */
  484.         public com.google.protos.humansensing.FaceProtos.Face.Attribute.Type getType() {
  485. >         com.google.protos.humansensing.FaceProtos.Face.Attribute.Type result = com.google.protos.humansensing.FaceProtos.Face.Attribute.Type.forNumber(type_);
  486.           return result == null ? com.google.protos.humansensing.FaceProtos.Face.Attribute.Type.TYPE_UNKNOWN : result;
  487.         }

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:2374: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `FaceProtos$Face$Landmark$Type FaceProtos$Face$Landmark.getType()` reads without synchronization from `this.type_`. Potentially races with write in method `FaceProtos$Face$Landmark.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  2372.          */
  2373.         public com.google.protos.humansensing.FaceProtos.Face.Landmark.Type getType() {
  2374. >         com.google.protos.humansensing.FaceProtos.Face.Landmark.Type result = com.google.protos.humansensing.FaceProtos.Face.Landmark.Type.forNumber(type_);
  2375.           return result == null ? com.google.protos.humansensing.FaceProtos.Face.Landmark.Type.LANDMARK_UNKNOWN : result;
  2376.         }

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:456: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `float FaceProtos$Face$Attribute.getValue()` reads without synchronization from `this.value_`. Potentially races with write in method `FaceProtos$Face$Attribute.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  454.          */
  455.         public float getValue() {
  456. >         return value_;
  457.         }
  458.         /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:1472: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `ByteString FaceProtos$Face$Embedding.getValue()` reads without synchronization from `this.value_`. Potentially races with write in method `FaceProtos$Face$Embedding.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  1470.          */
  1471.         public com.google.protobuf.ByteString getValue() {
  1472. >         return value_;
  1473.         }
  1474.         /**

app/src/main/java/androidx/media/filterfw/FilterGraph.java:223: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `VariableSource FilterGraph.getVariable(String)` reads without synchronization from `this.mFilterMap`. Potentially races with write in method `FilterGraph.wipe()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  221.   
  222.       public VariableSource getVariable(String name) {
  223. >         Filter result = (Filter) this.mFilterMap.get(name);
  224.           if (result != null && (result instanceof VariableSource)) {
  225.               return (VariableSource) result;

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:1504: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `int FaceProtos$Face$Embedding.getVersion()` reads without synchronization from `this.version_`. Potentially races with write in method `FaceProtos$Face$Embedding.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  1502.          */
  1503.         public int getVersion() {
  1504. >         return version_;
  1505.         }
  1506.         /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:2407: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `FaceProtos$Face$Landmark$Visibility FaceProtos$Face$Landmark.getVisibility()` reads without synchronization from `this.visibility_`. Potentially races with write in method `FaceProtos$Face$Landmark.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  2405.          */
  2406.         public com.google.protos.humansensing.FaceProtos.Face.Landmark.Visibility getVisibility() {
  2407. >         com.google.protos.humansensing.FaceProtos.Face.Landmark.Visibility result = com.google.protos.humansensing.FaceProtos.Face.Landmark.Visibility.forNumber(visibility_);
  2408.           return result == null ? com.google.protos.humansensing.FaceProtos.Face.Landmark.Visibility.VISIBILITY_UNKNOWN : result;
  2409.         }

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:2440: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `float FaceProtos$Face$Landmark.getX()` reads without synchronization from `this.x_`. Potentially races with write in method `FaceProtos$Face$Landmark.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  2438.          */
  2439.         public float getX() {
  2440. >         return x_;
  2441.         }
  2442.         /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:957: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `float FaceProtos$Face$BoundingBox.getX1()` reads without synchronization from `this.x1_`. Potentially races with write in method `FaceProtos$Face$BoundingBox.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  955.          */
  956.         public float getX1() {
  957. >         return x1_;
  958.         }
  959.         /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:986: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `float FaceProtos$Face$BoundingBox.getX2()` reads without synchronization from `this.x2_`. Potentially races with write in method `FaceProtos$Face$BoundingBox.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  984.          */
  985.         public float getX2() {
  986. >         return x2_;
  987.         }
  988.         /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:2469: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `float FaceProtos$Face$Landmark.getY()` reads without synchronization from `this.y_`. Potentially races with write in method `FaceProtos$Face$Landmark.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  2467.          */
  2468.         public float getY() {
  2469. >         return y_;
  2470.         }
  2471.         /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:1015: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `float FaceProtos$Face$BoundingBox.getY1()` reads without synchronization from `this.y1_`. Potentially races with write in method `FaceProtos$Face$BoundingBox.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  1013.          */
  1014.         public float getY1() {
  1015. >         return y1_;
  1016.         }
  1017.         /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:1044: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `float FaceProtos$Face$BoundingBox.getY2()` reads without synchronization from `this.y2_`. Potentially races with write in method `FaceProtos$Face$BoundingBox.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  1042.          */
  1043.         public float getY2() {
  1044. >         return y2_;
  1045.         }
  1046.         /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:2498: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `float FaceProtos$Face$Landmark.getZ()` reads without synchronization from `this.z_`. Potentially races with write in method `FaceProtos$Face$Landmark.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  2496.          */
  2497.         public float getZ() {
  2498. >         return z_;
  2499.         }
  2500.         /**

app/src/main/java/androidx/media/filterfw/decoder/MediaDecoder.java:491: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `boolean MediaDecoder.grabAudioSamples(FrameValue)` reads without synchronization from `this.mAudioTrackDecoder`. Potentially races with write in method `MediaDecoder.run()`.
 Reporting because this access may occur on a background thread.
  489.   
  490.       public boolean grabAudioSamples(FrameValue outputAudioFrame) {
  491. >         if (this.mAudioTrackDecoder == null) {
  492.               return false;
  493.           }

app/src/main/java/androidx/media/filterfw/CameraStreamer.java:974: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void CameraStreamer$CamFrameHandlerGB.grabFrame(FrameImage2D,int)` indirectly mutates container `this.mTargetTextures` via call to `put` outside of synchronization.
 Reporting because this access may occur on a background thread.
  972.           public void grabFrame(FrameImage2D targetFrame, int maxDim) {
  973.               EGLContext clientContext = RenderTarget.currentContext();
  974. >             TextureSource clientTex = textureForContext(clientContext);
  975.               int texWidth = this.mCameraWidth / 4;
  976.               int texHeight = this.mCameraHeight + (this.mCameraHeight / 2);

app/src/main/java/androidx/media/filterfw/CameraStreamer.java:984: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void CameraStreamer$CamFrameHandlerGB.grabFrame(FrameImage2D,int)` indirectly mutates container `transferShader.mAttributes` via call to `put` outside of synchronization.
 Reporting because this access may occur on a background thread.
  982.               ImageShader transferShader = shaderForContext(clientContext);
  983.               transferShader.setTargetCoords(this.mTargetCoords);
  984. >             updateShaderPixelSize(transferShader);
  985.               targetFrame.resize(new int[]{this.mOutWidth, this.mOutHeight});
  986.               transferShader.process(clientTex, targetFrame.lockRenderTarget(), this.mOutWidth, this.mOutHeight);

app/src/main/java/androidx/media/filterfw/CameraStreamer.java:985: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void CameraStreamer$CamFrameHandlerGB.grabFrame(FrameImage2D,int)` indirectly writes to field `targetFrame.mBackingStore.mBackings` outside of synchronization.
 Reporting because this access may occur on a background thread.
  983.               transferShader.setTargetCoords(this.mTargetCoords);
  984.               updateShaderPixelSize(transferShader);
  985. >             targetFrame.resize(new int[]{this.mOutWidth, this.mOutHeight});
  986.               transferShader.process(clientTex, targetFrame.lockRenderTarget(), this.mOutWidth, this.mOutHeight);
  987.               targetFrame.unlock();

app/src/main/java/androidx/media/filterfw/CameraStreamer.java:987: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void CameraStreamer$CamFrameHandlerGB.grabFrame(FrameImage2D,int)` indirectly reads without synchronization from `targetFrame.mBackingStore.mLockedBacking`. Potentially races with write in method `CameraStreamer$CamFrameHandlerGB.grabFrame(...)`.
 Reporting because this access may occur on a background thread.
  985.               targetFrame.resize(new int[]{this.mOutWidth, this.mOutHeight});
  986.               transferShader.process(clientTex, targetFrame.lockRenderTarget(), this.mOutWidth, this.mOutHeight);
  987. >             targetFrame.unlock();
  988.           }
  989.   

app/src/main/java/androidx/media/filterfw/CameraStreamer.java:983: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void CameraStreamer$CamFrameHandlerGB.grabFrame(FrameImage2D,int)` indirectly writes to field `transferShader.mTargetCoords` outside of synchronization.
 Reporting because this access may occur on a background thread.
  981.               clientTex.setParameter(10241, 9728);
  982.               ImageShader transferShader = shaderForContext(clientContext);
  983. >             transferShader.setTargetCoords(this.mTargetCoords);
  984.               updateShaderPixelSize(transferShader);
  985.               targetFrame.resize(new int[]{this.mOutWidth, this.mOutHeight});

app/src/main/java/androidx/media/filterfw/CameraStreamer.java:982: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void CameraStreamer$CamFrameHandlerGB.grabFrame(FrameImage2D,int)` indirectly mutates container `this.mTargetShaders` via call to `put` outside of synchronization.
 Reporting because this access may occur on a background thread.
  980.               clientTex.setParameter(10240, 9728);
  981.               clientTex.setParameter(10241, 9728);
  982. >             ImageShader transferShader = shaderForContext(clientContext);
  983.               transferShader.setTargetCoords(this.mTargetCoords);
  984.               updateShaderPixelSize(transferShader);

app/src/main/java/androidx/media/filterfw/CameraStreamer.java:986: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void CameraStreamer$CamFrameHandlerGB.grabFrame(FrameImage2D,int)` indirectly writes to field `attr.mComponents` outside of synchronization.
 Reporting because this access may occur on a background thread.
  984.               updateShaderPixelSize(transferShader);
  985.               targetFrame.resize(new int[]{this.mOutWidth, this.mOutHeight});
  986. >             transferShader.process(clientTex, targetFrame.lockRenderTarget(), this.mOutWidth, this.mOutHeight);
  987.               targetFrame.unlock();
  988.           }

app/src/main/java/androidx/media/filterfw/decoder/MediaDecoder.java:473: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `boolean MediaDecoder.grabVideoFrame(FrameImage2D,FrameValue,int,int)` reads without synchronization from `this.mVideoTrackDecoder`. Potentially races with write in method `MediaDecoder.run()`.
 Reporting because this access may occur on a background thread.
  471.   
  472.       public boolean grabVideoFrame(FrameImage2D outputVideoFrame, FrameValue infoFrame, int maxDim, int videoRotation) {
  473. >         if (this.mVideoTrackDecoder == null || outputVideoFrame == null) {
  474.               return false;
  475.           }

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:3250: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `boolean FaceProtos$Face.hasBoundingBox()` reads without synchronization from `this.bitField0_`. Potentially races with write in method `FaceProtos$Face.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  3248.        */
  3249.       public boolean hasBoundingBox() {
  3250. >       return ((bitField0_ & 0x00000020) == 0x00000020);
  3251.       }
  3252.       /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:3043: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `boolean FaceProtos$Face.hasConfidence()` reads without synchronization from `this.bitField0_`. Potentially races with write in method `FaceProtos$Face.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  3041.        */
  3042.       public boolean hasConfidence() {
  3043. >       return ((bitField0_ & 0x00000004) == 0x00000004);
  3044.       }
  3045.       /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:370: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `boolean FaceProtos$Face$Attribute.hasConfidence()` reads without synchronization from `this.bitField0_`. Potentially races with write in method `FaceProtos$Face$Attribute.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  368.          */
  369.         public boolean hasConfidence() {
  370. >         return ((bitField0_ & 0x00000001) == 0x00000001);
  371.         }
  372.         /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:2339: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `boolean FaceProtos$Face$Landmark.hasConfidence()` reads without synchronization from `this.bitField0_`. Potentially races with write in method `FaceProtos$Face$Landmark.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  2337.          */
  2338.         public boolean hasConfidence() {
  2339. >         return ((bitField0_ & 0x00000001) == 0x00000001);
  2340.         }
  2341.         /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:3072: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `boolean FaceProtos$Face.hasIdentityId()` reads without synchronization from `this.bitField0_`. Potentially races with write in method `FaceProtos$Face.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  3070.        */
  3071.       public boolean hasIdentityId() {
  3072. >       return ((bitField0_ & 0x00000008) == 0x00000008);
  3073.       }
  3074.       /**

app/src/generated/debug/javalite/com/google/protos/mobilessd/MobileSSDClientOptionsProto.java:186: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `boolean MobileSSDClientOptionsProto$MobileSSDClientOptions.hasIouThreshold()` reads without synchronization from `this.bitField0_`. Potentially races with write in method `MobileSSDClientOptionsProto$MobileSSDClientOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  184.        */
  185.       public boolean hasIouThreshold() {
  186. >       return ((bitField0_ & 0x00000001) == 0x00000001);
  187.       }
  188.       /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceDetectionOptionsProtos.java:86: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `boolean FaceDetectionOptionsProtos$FaceDetectionOptions.hasLandmarkingConfidenceThreshold()` reads without synchronization from `this.bitField0_`. Potentially races with write in method `FaceDetectionOptionsProtos$FaceDetectionOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  84.        */
  85.       public boolean hasLandmarkingConfidenceThreshold() {
  86. >       return ((bitField0_ & 0x00000001) == 0x00000001);
  87.       }
  88.       /**

app/src/generated/debug/javalite/com/google/protos/mobilessd/MobileSSDClientOptionsProto.java:215: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `boolean MobileSSDClientOptionsProto$MobileSSDClientOptions.hasMaxCategories()` reads without synchronization from `this.bitField0_`. Potentially races with write in method `MobileSSDClientOptionsProto$MobileSSDClientOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  213.        */
  214.       public boolean hasMaxCategories() {
  215. >       return ((bitField0_ & 0x00000002) == 0x00000002);
  216.       }
  217.       /**

app/src/generated/debug/javalite/com/google/protos/mobilessd/MobileSSDClientOptionsProto.java:244: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `boolean MobileSSDClientOptionsProto$MobileSSDClientOptions.hasMaxDetections()` reads without synchronization from `this.bitField0_`. Potentially races with write in method `MobileSSDClientOptionsProto$MobileSSDClientOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  242.        */
  243.       public boolean hasMaxDetections() {
  244. >       return ((bitField0_ & 0x00000004) == 0x00000004);
  245.       }
  246.       /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceDetectionOptionsProtos.java:231: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `boolean FaceDetectionOptionsProtos$FaceDetectionOptions.hasMaxEyeDistancePixels()` reads without synchronization from `this.bitField0_`. Potentially races with write in method `FaceDetectionOptionsProtos$FaceDetectionOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  229.        */
  230.       public boolean hasMaxEyeDistancePixels() {
  231. >       return ((bitField0_ & 0x00000020) == 0x00000020);
  232.       }
  233.       /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceDetectionOptionsProtos.java:173: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `boolean FaceDetectionOptionsProtos$FaceDetectionOptions.hasMaxRollAngle()` reads without synchronization from `this.bitField0_`. Potentially races with write in method `FaceDetectionOptionsProtos$FaceDetectionOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  171.        */
  172.       public boolean hasMaxRollAngle() {
  173. >       return ((bitField0_ & 0x00000008) == 0x00000008);
  174.       }
  175.       /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceDetectionOptionsProtos.java:202: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `boolean FaceDetectionOptionsProtos$FaceDetectionOptions.hasMinEyeDistancePixels()` reads without synchronization from `this.bitField0_`. Potentially races with write in method `FaceDetectionOptionsProtos$FaceDetectionOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  200.        */
  201.       public boolean hasMinEyeDistancePixels() {
  202. >       return ((bitField0_ & 0x00000010) == 0x00000010);
  203.       }
  204.       /**

app/src/generated/debug/javalite/com/google/protos/mobilessd/MobileSSDClientOptionsProto.java:273: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `boolean MobileSSDClientOptionsProto$MobileSSDClientOptions.hasMobileSsdClientName()` reads without synchronization from `this.bitField0_`. Potentially races with write in method `MobileSSDClientOptionsProto$MobileSSDClientOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  271.        */
  272.       public boolean hasMobileSsdClientName() {
  273. >       return ((bitField0_ & 0x00000008) == 0x00000008);
  274.       }
  275.       /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:399: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `boolean FaceProtos$Face$Attribute.hasName()` reads without synchronization from `this.bitField0_`. Potentially races with write in method `FaceProtos$Face$Attribute.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  397.          */
  398.         public boolean hasName() {
  399. >         return ((bitField0_ & 0x00000002) == 0x00000002);
  400.         }
  401.         /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:3101: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `boolean FaceProtos$Face.hasPanAngle()` reads without synchronization from `this.bitField0_`. Potentially races with write in method `FaceProtos$Face.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  3099.        */
  3100.       public boolean hasPanAngle() {
  3101. >       return ((bitField0_ & 0x00000010) == 0x00000010);
  3102.       }
  3103.       /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceDetectionOptionsProtos.java:144: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `boolean FaceDetectionOptionsProtos$FaceDetectionOptions.hasQuality()` reads without synchronization from `this.bitField0_`. Potentially races with write in method `FaceDetectionOptionsProtos$FaceDetectionOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  142.        */
  143.       public boolean hasQuality() {
  144. >       return ((bitField0_ & 0x00000004) == 0x00000004);
  145.       }
  146.       /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:2985: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `boolean FaceProtos$Face.hasRollAngle()` reads without synchronization from `this.bitField0_`. Potentially races with write in method `FaceProtos$Face.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  2983.        */
  2984.       public boolean hasRollAngle() {
  2985. >       return ((bitField0_ & 0x00000001) == 0x00000001);
  2986.       }
  2987.       /**

app/src/generated/debug/javalite/com/google/protos/mobilessd/MobileSSDClientOptionsProto.java:324: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `boolean MobileSSDClientOptionsProto$MobileSSDClientOptions.hasScoreThreshold()` reads without synchronization from `this.bitField0_`. Potentially races with write in method `MobileSSDClientOptionsProto$MobileSSDClientOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  322.        */
  323.       public boolean hasScoreThreshold() {
  324. >       return ((bitField0_ & 0x00000010) == 0x00000010);
  325.       }
  326.       /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceDetectionOptionsProtos.java:115: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `boolean FaceDetectionOptionsProtos$FaceDetectionOptions.hasSmoothness()` reads without synchronization from `this.bitField0_`. Potentially races with write in method `FaceDetectionOptionsProtos$FaceDetectionOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  113.        */
  114.       public boolean hasSmoothness() {
  115. >       return ((bitField0_ & 0x00000002) == 0x00000002);
  116.       }
  117.       /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:3014: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `boolean FaceProtos$Face.hasTiltAngle()` reads without synchronization from `this.bitField0_`. Potentially races with write in method `FaceProtos$Face.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  3012.        */
  3013.       public boolean hasTiltAngle() {
  3014. >       return ((bitField0_ & 0x00000002) == 0x00000002);
  3015.       }
  3016.       /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:479: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `boolean FaceProtos$Face$Attribute.hasType()` reads without synchronization from `this.bitField0_`. Potentially races with write in method `FaceProtos$Face$Attribute.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  477.          */
  478.         public boolean hasType() {
  479. >         return ((bitField0_ & 0x00000008) == 0x00000008);
  480.         }
  481.         /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:2368: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `boolean FaceProtos$Face$Landmark.hasType()` reads without synchronization from `this.bitField0_`. Potentially races with write in method `FaceProtos$Face$Landmark.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  2366.          */
  2367.         public boolean hasType() {
  2368. >         return ((bitField0_ & 0x00000002) == 0x00000002);
  2369.         }
  2370.         /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:450: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `boolean FaceProtos$Face$Attribute.hasValue()` reads without synchronization from `this.bitField0_`. Potentially races with write in method `FaceProtos$Face$Attribute.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  448.          */
  449.         public boolean hasValue() {
  450. >         return ((bitField0_ & 0x00000004) == 0x00000004);
  451.         }
  452.         /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:1466: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `boolean FaceProtos$Face$Embedding.hasValue()` reads without synchronization from `this.bitField0_`. Potentially races with write in method `FaceProtos$Face$Embedding.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  1464.          */
  1465.         public boolean hasValue() {
  1466. >         return ((bitField0_ & 0x00000001) == 0x00000001);
  1467.         }
  1468.         /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:1498: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `boolean FaceProtos$Face$Embedding.hasVersion()` reads without synchronization from `this.bitField0_`. Potentially races with write in method `FaceProtos$Face$Embedding.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  1496.          */
  1497.         public boolean hasVersion() {
  1498. >         return ((bitField0_ & 0x00000002) == 0x00000002);
  1499.         }
  1500.         /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:2401: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `boolean FaceProtos$Face$Landmark.hasVisibility()` reads without synchronization from `this.bitField0_`. Potentially races with write in method `FaceProtos$Face$Landmark.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  2399.          */
  2400.         public boolean hasVisibility() {
  2401. >         return ((bitField0_ & 0x00000004) == 0x00000004);
  2402.         }
  2403.         /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:2434: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `boolean FaceProtos$Face$Landmark.hasX()` reads without synchronization from `this.bitField0_`. Potentially races with write in method `FaceProtos$Face$Landmark.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  2432.          */
  2433.         public boolean hasX() {
  2434. >         return ((bitField0_ & 0x00000008) == 0x00000008);
  2435.         }
  2436.         /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:951: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `boolean FaceProtos$Face$BoundingBox.hasX1()` reads without synchronization from `this.bitField0_`. Potentially races with write in method `FaceProtos$Face$BoundingBox.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  949.          */
  950.         public boolean hasX1() {
  951. >         return ((bitField0_ & 0x00000001) == 0x00000001);
  952.         }
  953.         /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:980: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `boolean FaceProtos$Face$BoundingBox.hasX2()` reads without synchronization from `this.bitField0_`. Potentially races with write in method `FaceProtos$Face$BoundingBox.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  978.          */
  979.         public boolean hasX2() {
  980. >         return ((bitField0_ & 0x00000002) == 0x00000002);
  981.         }
  982.         /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:2463: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `boolean FaceProtos$Face$Landmark.hasY()` reads without synchronization from `this.bitField0_`. Potentially races with write in method `FaceProtos$Face$Landmark.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  2461.          */
  2462.         public boolean hasY() {
  2463. >         return ((bitField0_ & 0x00000010) == 0x00000010);
  2464.         }
  2465.         /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:1009: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `boolean FaceProtos$Face$BoundingBox.hasY1()` reads without synchronization from `this.bitField0_`. Potentially races with write in method `FaceProtos$Face$BoundingBox.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  1007.          */
  1008.         public boolean hasY1() {
  1009. >         return ((bitField0_ & 0x00000004) == 0x00000004);
  1010.         }
  1011.         /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:1038: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `boolean FaceProtos$Face$BoundingBox.hasY2()` reads without synchronization from `this.bitField0_`. Potentially races with write in method `FaceProtos$Face$BoundingBox.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  1036.          */
  1037.         public boolean hasY2() {
  1038. >         return ((bitField0_ & 0x00000008) == 0x00000008);
  1039.         }
  1040.         /**

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:2492: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `boolean FaceProtos$Face$Landmark.hasZ()` reads without synchronization from `this.bitField0_`. Potentially races with write in method `FaceProtos$Face$Landmark.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  2490.          */
  2491.         public boolean hasZ() {
  2492. >         return ((bitField0_ & 0x00000020) == 0x00000020);
  2493.         }
  2494.         /**

app/src/main/java/com/mp/android/apps/login/utils/LoginManager.java:38: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `LoginManager LoginManager.initSP(Activity)` reads without synchronization from `utils.LoginManager.loginManager`. Potentially races with write in method `LoginManager.getInstance()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  36.       public LoginManager initSP(Activity activity) {
  37.           sharedPreferences = activity.getSharedPreferences(LOGIN_SP_STATE, MODE_PRIVATE);
  38. >         return loginManager;
  39.       }
  40.   

app/src/main/java/com/mp/android/apps/monke/basemvplib/AppActivityManager.java:106: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `Boolean AppActivityManager.isExist(Class)` reads without synchronization from `basemvplib.AppActivityManager.activities`. Potentially races with write in method `AppActivityManager.getInstance()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  104.       public Boolean isExist(Class<?> activityClass){
  105.           Boolean result = false;
  106. >         for(Iterator<WeakReference<Activity>> iterator = activities.iterator();iterator.hasNext();){
  107.               WeakReference<Activity> item = iterator.next();
  108.               if(null != item && null != item.get() && item.get().getClass() == activityClass){

app/src/main/java/androidx/media/filterfw/FilterGraph.java:200: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `boolean FilterGraph.isSubGraph()` reads without synchronization from `this.mParentGraph`. Potentially races with write in method `FilterGraph.wipe()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  198.   
  199.       public boolean isSubGraph() {
  200. >         return this.mParentGraph != null;
  201.       }
  202.   

app/src/main/java/androidx/media/filterfw/RenderTarget.java:54: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `RenderTarget RenderTarget.newTarget(int,int)` indirectly writes to field `filterfw.RenderTarget.mConfiguredDisplay` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  52.           EGL10 egl = (EGL10) EGLContext.getEGL();
  53.           EGLDisplay eglDisplay = createDefaultDisplay(egl);
  54. >         EGLContext eglContext = createContext(egl, eglDisplay, chooseEglConfig(egl, eglDisplay));
  55.           EGLSurface eglSurface = createSurface(egl, eglDisplay, width, height);
  56.           RenderTarget result = new RenderTarget(eglDisplay, eglContext, eglSurface, 0, true, true);

app/src/main/java/androidx/media/filterfw/RenderTarget.java:57: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `RenderTarget RenderTarget.newTarget(int,int)` indirectly mutates container `filterfw.RenderTarget.mRefCounts` via call to `put` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  55.           EGLSurface eglSurface = createSurface(egl, eglDisplay, width, height);
  56.           RenderTarget result = new RenderTarget(eglDisplay, eglContext, eglSurface, 0, true, true);
  57. >         result.addReferenceTo(eglSurface);
  58.           return result;
  59.       }

app/src/main/java/com/mp/android/apps/monke/monkeybook/view/adapter/BookShelfAdapter.java:93: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void BookShelfAdapter.onBindViewholder(RecyclerView$ViewHolder,int)` indirectly reads without synchronization from container `this.books` via call to `size`. Potentially races with write in method `BookShelfAdapter.replaceAll(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  91.       public void onBindViewholder(RecyclerView.ViewHolder holder, int position) {
  92.           if (holder.getItemViewType() == TYPE_LASTEST) {
  93. >             bindLastestViewHolder((LastestViewHolder) holder, position);
  94.           } else {
  95.               bindOtherViewHolder((OtherViewHolder) holder, position - 1);

app/src/main/java/androidx/media/filterfw/CameraStreamer.java:1245: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void CameraStreamer$CamFrameHandlerICS.onCleanupContext(EGLContext)` reads without synchronization from container `this.mTargetSurfaceTextures` via call to `get`. Potentially races with write in method `CameraStreamer$CamFrameHandlerICS.onRegisterClient(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  1243.           protected void onCleanupContext(EGLContext context) {
  1244.               super.onCleanupContext(context);
  1245. >             SurfaceTexture surfaceTex = (SurfaceTexture) this.mTargetSurfaceTextures.get(context);
  1246.               if (surfaceTex != null) {
  1247.                   surfaceTex.release();

app/src/main/java/androidx/media/filterfw/CameraStreamer.java:1244: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void CameraStreamer$CamFrameHandlerICS.onCleanupContext(EGLContext)` indirectly mutates container `this.mTargetShaders` via call to `remove` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  1242.   
  1243.           protected void onCleanupContext(EGLContext context) {
  1244. >             super.onCleanupContext(context);
  1245.               SurfaceTexture surfaceTex = (SurfaceTexture) this.mTargetSurfaceTextures.get(context);
  1246.               if (surfaceTex != null) {

app/src/main/java/androidx/media/filterfw/CameraStreamer.java:1248: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void CameraStreamer$CamFrameHandlerICS.onCleanupContext(EGLContext)` mutates container `this.mTargetSurfaceTextures` via call to `remove` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  1246.               if (surfaceTex != null) {
  1247.                   surfaceTex.release();
  1248. >                 this.mTargetSurfaceTextures.remove(context);
  1249.               }
  1250.           }

app/src/main/java/androidx/media/filterpacks/base/CountLimitFilter.java:39: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void CountLimitFilter.onClose()` writes to field `this.mCount` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  37.   
  38.       protected void onClose() {
  39. >         this.mCount = 0;
  40.       }
  41.   

app/src/main/java/androidx/media/filterpacks/base/DispatchFilter.java:57: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void DispatchFilter.onClose()` indirectly writes to field `this.mState.state` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  55.   
  56.       protected void onClose() {
  57. >         super.onClose();
  58.           this.mOutputFrames = null;
  59.       }

app/src/main/java/androidx/media/filterpacks/image/SurfaceTextureTarget.java:113: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void SurfaceTextureTarget.onClose()` writes to field `this.mView` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  111.           if (this.mView != null) {
  112.               closeView();
  113. >             this.mView = null;
  114.           }
  115.       }

app/src/main/java/androidx/media/filterpacks/image/SurfaceTextureTarget.java:111: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void SurfaceTextureTarget.onClose()` reads without synchronization from `this.mView`. Potentially races with write in method `SurfaceTextureTarget.onBindToView(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  109.               this.mRenderTarget = null;
  110.           }
  111. >         if (this.mView != null) {
  112.               closeView();
  113.               this.mView = null;

app/src/main/java/androidx/media/filterpacks/video/CameraSource.java:63: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void CameraSource.onClose()` writes to field `this.mNewFrameAvailable` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  61.       protected void onClose() {
  62.           getContext().getCameraStreamer().removeVideoFrameConsumer(this);
  63. >         this.mNewFrameAvailable = false;
  64.       }
  65.   

app/src/main/java/androidx/media/filterpacks/video/MediaPlayerSource.java:205: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void MediaPlayerSource.onClose()` writes to field `this.mNewFrameAvailable` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  203.           this.mPaused = false;
  204.           this.mCompleted = false;
  205. >         this.mNewFrameAvailable = false;
  206.           this.mMediaPlayer.release();
  207.           this.mMediaPlayer = null;

app/src/main/java/androidx/media/filterpacks/video/MediaPlayerSource.java:203: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void MediaPlayerSource.onClose()` writes to field `this.mPaused` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  201.               this.mMediaPlayer.stop();
  202.           }
  203. >         this.mPaused = false;
  204.           this.mCompleted = false;
  205.           this.mNewFrameAvailable = false;

app/src/main/java/androidx/media/filterfw/decoder/MediaDecoder.java:564: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void MediaDecoder.onDecodedOutputAvailable(TrackDecoder)` reads without synchronization from `this.mAudioTrackDecoder`. Potentially races with write in method `MediaDecoder.run()`.
 Reporting because this access may occur on a background thread.
  562.                   }
  563.               }
  564. >         } else if (decoder == this.mAudioTrackDecoder) {
  565.               synchronized (this.mAudioConsumers) {
  566.                   this.mAvailableAudioSamples++;

app/src/main/java/androidx/media/filterfw/decoder/MediaDecoder.java:556: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void MediaDecoder.onDecodedOutputAvailable(TrackDecoder)` reads without synchronization from `this.mVideoTrackDecoder`. Potentially races with write in method `MediaDecoder.run()`.
 Reporting because this access may occur on a background thread.
  554.   
  555.       public void onDecodedOutputAvailable(TrackDecoder decoder) {
  556. >         if (decoder == this.mVideoTrackDecoder) {
  557.               synchronized (this.mVideoConsumers) {
  558.                   this.mVideoConsumerWaitCount = this.mVideoConsumers.size();

app/src/main/java/androidx/media/filterpacks/base/CountLimitFilter.java:35: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void CountLimitFilter.onOpen()` writes to field `this.mCount` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  33.   
  34.       protected void onOpen() {
  35. >         this.mCount = 0;
  36.       }
  37.   

app/src/main/java/androidx/media/filterpacks/base/GateFilter.java:34: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void GateFilter.onOpen()` writes to field `this.mPassFrames` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  32.   
  33.       protected void onOpen() {
  34. >         this.mPassFrames = 0;
  35.       }
  36.   

app/src/main/java/androidx/media/filterpacks/image/SurfaceTextureTarget.java:87: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void SurfaceTextureTarget.onOpen()` reads without synchronization from `this.mSurfaceTexture`. Potentially races with write in method `SurfaceTextureTarget.setSurfaceTexture(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  85.               openView();
  86.           }
  87. >         if (this.mSurfaceTexture == null) {
  88.               throw new NullPointerException("SurfaceTextureTarget has no SurfaceTexture!");
  89.           }

app/src/main/java/androidx/media/filterpacks/image/SurfaceTextureTarget.java:84: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void SurfaceTextureTarget.onOpen()` reads without synchronization from `this.mView`. Potentially races with write in method `SurfaceTextureTarget.onBindToView(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  82.   
  83.       protected void onOpen() {
  84. >         if (this.mView != null) {
  85.               openView();
  86.           }

app/src/main/java/androidx/media/filterpacks/performance/ThroughputFilter.java:38: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void ThroughputFilter.onOpen()` writes to field `this.mTotalFrameCount` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  36.   
  37.       protected void onOpen() {
  38. >         this.mTotalFrameCount = 0;
  39.           this.mPeriodFrameCount = 0;
  40.           this.mLastTime = 0;

app/src/main/java/androidx/media/filterpacks/performance/ThroughputFilter.java:39: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void ThroughputFilter.onOpen()` writes to field `this.mPeriodFrameCount` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  37.       protected void onOpen() {
  38.           this.mTotalFrameCount = 0;
  39. >         this.mPeriodFrameCount = 0;
  40.           this.mLastTime = 0;
  41.       }

app/src/main/java/androidx/media/filterpacks/performance/ThroughputFilter.java:40: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void ThroughputFilter.onOpen()` writes to field `this.mLastTime` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  38.           this.mTotalFrameCount = 0;
  39.           this.mPeriodFrameCount = 0;
  40. >         this.mLastTime = 0;
  41.       }
  42.   

app/src/main/java/androidx/media/filterpacks/decoder/MediaDecoderSource.java:108: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void MediaDecoderSource.onPrepare()` indirectly writes to field `backing.mIsDirty` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  106.       protected void onPrepare() {
  107.           super.onPrepare();
  108. >         this.mMediaDecoder = new MediaDecoder(getContext().getApplicationContext(), (Uri) getConnectedInputPort("uri").pullFrame().asFrameValue().getValue(), this.mStartMicros, this.mEndMicros, this.mLooping, this.mOffsetBytes);
  109.           this.mMediaDecoder.setPlaybackTimestamps(this.timestamps);
  110.           this.mMediaDecoder.setIFrameSpacing(this.iFrameSpacing);

app/src/main/java/androidx/media/filterpacks/image/DocumentaryFilter.java:39: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void DocumentaryFilter.onPrepare()` indirectly reads without synchronization from `this.mHeight`. Potentially races with write in method `DocumentaryFilter.onProcess()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  37.       protected void onPrepare() {
  38.           this.mShader = new ImageShader("precision mediump float;\nuniform sampler2D tex_sampler_0;\nuniform vec2 seed;\nuniform float stepsize;\nuniform float inv_max_dist;\nuniform vec2 center;\nvarying vec2 v_texcoord;\nfloat rand(vec2 loc) {\n  return fract(sin(dot((loc + seed), vec2(12.9898, 78.233))) * 43758.5453);\n}\nvoid main() {\n  vec4 color = texture2D(tex_sampler_0, v_texcoord);\n  float dither = rand(v_texcoord);\n  vec3 xform = clamp(2.0 * color.rgb, 0.0, 1.0);\n  vec3 temp = clamp(2.0 * (color.rgb + stepsize), 0.0, 1.0);\n  vec3 new_color = clamp(xform + (temp - xform) * (dither - 0.5), 0.0, 1.0);\n  float gray = dot(new_color, vec3(0.299, 0.587, 0.114));\n  new_color = vec3(gray, gray, gray);\n  float dist = distance(gl_FragCoord.xy, center);\n  float lumen = 0.85 / (1.0 + exp((dist * inv_max_dist - 0.83) * 20.0)) + 0.15;\n  gl_FragColor = vec4(new_color * lumen, color.a);\n}\n");
  39. >         initParameters();
  40.       }
  41.   

app/src/main/java/androidx/media/filterpacks/face/FaceTrackerFilter.java:64: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void FaceTrackerFilter.onProcess()` indirectly writes to field `backing.mIsDirty` outside of synchronization.
 Reporting because this access may occur on a background thread.
  62.           OutputPort outPort = getConnectedOutputPort("faces");
  63.           FrameImage2D imageFrame = getConnectedInputPort("image").pullFrame().asFrameImage2D();
  64. >         this.mFaceTracker.apply(imageFrame.lockTextureSource().getTextureId(), imageFrame.getWidth(), imageFrame.getHeight(), this.mIgnoreTex.getTextureId());
  65.           imageFrame.unlock();
  66.           synchronized (this) {

app/src/main/java/androidx/media/filterpacks/face/FaceTrackerFilter.java:71: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void FaceTrackerFilter.onProcess()` indirectly reads with synchronization from `backing.mDimensions`. Potentially races with unsynchronized write in method `FaceTrackerFilter.onProcess()`.
 Reporting because this access may occur on a background thread.
  69.               }
  70.               FrameValues facesFrame = outPort.fetchAvailableFrame(new int[]{this.mFaces.length}).asFrameValues();
  71. >             facesFrame.setValues(this.mFaces);
  72.               outPort.pushFrame(facesFrame);
  73.           }

app/src/main/java/androidx/media/filterpacks/sensors/MotionSensor.java:50: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void MotionSensor.onProcess()` indirectly mutates container `outPort.mFilter.mAutoReleaseFrames` via call to `add` outside of synchronization.
 Reporting because this access may occur on a background thread.
  48.       protected void onProcess() {
  49.           OutputPort outPort = getConnectedOutputPort("values");
  50. >         FrameValues outFrame = outPort.fetchAvailableFrame(null).asFrameValues();
  51.           synchronized (this.mValues) {
  52.               outFrame.setValues(this.mValues);

app/src/main/java/androidx/media/filterpacks/video/MediaPlayerSource.java:175: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void MediaPlayerSource.onProcess()` reads without synchronization from `this.mSurfaceTexture`. Potentially races with write in method `MediaPlayerSource.onClose()`.
 Reporting because this access may occur on a background thread.
  173.               int outputWidth;
  174.               int outputHeight;
  175. >             this.mSurfaceTexture.updateTexImage();
  176.               this.mSurfaceTexture.getTransformMatrix(mSurfaceTransform);
  177.               this.mFrameExtractor.setSourceTransform(mSurfaceTransform);

app/src/main/java/androidx/media/filterpacks/video/MediaPlayerSource.java:171: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void MediaPlayerSource.onProcess()` indirectly writes to field `this.mRequests` outside of synchronization.
 Reporting because this access may occur on a background thread.
  169.               throw new NullPointerException("Unexpected null media player!");
  170.           } else if (this.mCompleted) {
  171. >             requestClose();
  172.           } else if (nextFrame()) {
  173.               int outputWidth;

app/src/main/java/androidx/media/filterpacks/video/MediaPlayerSource.java:191: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void MediaPlayerSource.onProcess()` reads without synchronization from `this.mMediaPlayer`. Potentially races with write in method `MediaPlayerSource.onClose()`.
 Reporting because this access may occur on a background thread.
  189.               FrameImage2D outFrame = outPort.fetchAvailableFrame(dims).asFrameImage2D();
  190.               this.mFrameExtractor.process(this.mMediaFrame, outFrame.lockRenderTarget(), outputWidth, outputHeight);
  191. >             long timestamp = TimeUnit.NANOSECONDS.convert((long) this.mMediaPlayer.getCurrentPosition(), TimeUnit.MILLISECONDS);
  192.               vLog("Timestamp: " + (timestamp / 1000000) + " ms");
  193.               outFrame.setTimestamp(timestamp);

app/src/main/java/androidx/media/filterpacks/video/MediaPlayerSource.java:190: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void MediaPlayerSource.onProcess()` indirectly writes to field `attr.mComponents` outside of synchronization.
 Reporting because this access may occur on a background thread.
  188.               OutputPort outPort = getConnectedOutputPort("video");
  189.               FrameImage2D outFrame = outPort.fetchAvailableFrame(dims).asFrameImage2D();
  190. >             this.mFrameExtractor.process(this.mMediaFrame, outFrame.lockRenderTarget(), outputWidth, outputHeight);
  191.               long timestamp = TimeUnit.NANOSECONDS.convert((long) this.mMediaPlayer.getCurrentPosition(), TimeUnit.MILLISECONDS);
  192.               vLog("Timestamp: " + (timestamp / 1000000) + " ms");

app/src/main/java/androidx/media/filterpacks/video/MediaPlayerSource.java:170: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void MediaPlayerSource.onProcess()` reads without synchronization from `this.mCompleted`. Potentially races with write in method `MediaPlayerSource.onClose()`.
 Reporting because this access may occur on a background thread.
  168.           if (this.mMediaPlayer == null) {
  169.               throw new NullPointerException("Unexpected null media player!");
  170. >         } else if (this.mCompleted) {
  171.               requestClose();
  172.           } else if (nextFrame()) {

app/src/main/java/androidx/media/filterpacks/video/MediaPlayerSource.java:189: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void MediaPlayerSource.onProcess()` indirectly mutates container `outPort.mFilter.mAutoReleaseFrames` via call to `add` outside of synchronization.
 Reporting because this access may occur on a background thread.
  187.               int[] dims = new int[]{outputWidth, outputHeight};
  188.               OutputPort outPort = getConnectedOutputPort("video");
  189. >             FrameImage2D outFrame = outPort.fetchAvailableFrame(dims).asFrameImage2D();
  190.               this.mFrameExtractor.process(this.mMediaFrame, outFrame.lockRenderTarget(), outputWidth, outputHeight);
  191.               long timestamp = TimeUnit.NANOSECONDS.convert((long) this.mMediaPlayer.getCurrentPosition(), TimeUnit.MILLISECONDS);

app/src/main/java/androidx/media/filterpacks/video/MediaPlayerSource.java:178: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void MediaPlayerSource.onProcess()` indirectly writes to field `this.mFrameExtractor.mTargetCoords` outside of synchronization.
 Reporting because this access may occur on a background thread.
  176.               this.mSurfaceTexture.getTransformMatrix(mSurfaceTransform);
  177.               this.mFrameExtractor.setSourceTransform(mSurfaceTransform);
  178. >             this.mFrameExtractor.setTargetCoords(getRotationCoords(this.mRotation));
  179.               synchronized (this.mFrameMutex) {
  180.                   outputWidth = this.mWidth;

app/src/main/java/androidx/media/filterpacks/video/MediaPlayerSource.java:177: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void MediaPlayerSource.onProcess()` reads without synchronization from `this.mFrameExtractor`. Potentially races with write in method `MediaPlayerSource.onPrepare()`.
 Reporting because this access may occur on a background thread.
  175.               this.mSurfaceTexture.updateTexImage();
  176.               this.mSurfaceTexture.getTransformMatrix(mSurfaceTransform);
  177. >             this.mFrameExtractor.setSourceTransform(mSurfaceTransform);
  178.               this.mFrameExtractor.setTargetCoords(getRotationCoords(this.mRotation));
  179.               synchronized (this.mFrameMutex) {

app/src/main/java/androidx/media/filterfw/Filter.java:367: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void Filter.onPulledFrameWithTimestamp(long)` writes to field `this.mCurrentTimestamp` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  365.       final void onPulledFrameWithTimestamp(long timestamp) {
  366.           if (timestamp > this.mCurrentTimestamp || this.mCurrentTimestamp == -1) {
  367. >             this.mCurrentTimestamp = timestamp;
  368.           }
  369.       }

app/src/main/java/androidx/media/filterfw/Filter.java:366: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void Filter.onPulledFrameWithTimestamp(long)` reads without synchronization from `this.mCurrentTimestamp`. Potentially races with write in method `Filter.softReset()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  364.   
  365.       final void onPulledFrameWithTimestamp(long timestamp) {
  366. >         if (timestamp > this.mCurrentTimestamp || this.mCurrentTimestamp == -1) {
  367.               this.mCurrentTimestamp = timestamp;
  368.           }

app/src/main/java/androidx/media/filterpacks/image/GrainFilter.java:45: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void GrainFilter.onTearDown()` indirectly writes to field `this.mNoiseFrame.mBackingStore` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  43.       public void onTearDown() {
  44.           if (this.mNoiseFrame != null) {
  45. >             this.mNoiseFrame.release();
  46.               this.mNoiseFrame = null;
  47.           }

app/src/main/java/androidx/media/filterpacks/image/GrainFilter.java:46: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void GrainFilter.onTearDown()` writes to field `this.mNoiseFrame` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  44.           if (this.mNoiseFrame != null) {
  45.               this.mNoiseFrame.release();
  46. >             this.mNoiseFrame = null;
  47.           }
  48.       }

app/src/main/java/androidx/media/filterpacks/image/GrainFilter.java:44: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void GrainFilter.onTearDown()` reads without synchronization from `this.mNoiseFrame`. Potentially races with write in method `GrainFilter.onProcess()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  42.   
  43.       public void onTearDown() {
  44. >         if (this.mNoiseFrame != null) {
  45.               this.mNoiseFrame.release();
  46.               this.mNoiseFrame = null;

app/src/main/java/androidx/media/filterfw/Filter.java:378: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void Filter.openOutputPort(OutputPort)` indirectly writes to field `inPort.mQueueBuilder` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  376.                   InputPort inPort = outPort.getTarget();
  377.                   outPort.onOpen(builder);
  378. >                 inPort.onOpen(builder);
  379.                   Filter targetFilter = inPort.getFilter();
  380.                   String str = this.mName;

app/src/main/java/androidx/media/filterfw/Filter.java:384: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void Filter.openOutputPort(OutputPort)` indirectly writes to field `filterfw.FrameQueue.mType` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  382.                   String str2 = targetFilter.mName;
  383.                   String name2 = inPort.getName();
  384. >                 FrameQueue queue = builder.build(new StringBuilder((((String.valueOf(str).length() + 8) + String.valueOf(name).length()) + String.valueOf(str2).length()) + String.valueOf(name2).length()).append(str).append("[").append(name).append("] -> ").append(str2).append("[").append(name2).append("]").toString());
  385.                   outPort.setQueue(queue);
  386.                   inPort.setQueue(queue);

app/src/main/java/androidx/media/filterfw/Filter.java:386: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void Filter.openOutputPort(OutputPort)` indirectly writes to field `inPort.mQueue` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  384.                   FrameQueue queue = builder.build(new StringBuilder((((String.valueOf(str).length() + 8) + String.valueOf(name).length()) + String.valueOf(str2).length()) + String.valueOf(name2).length()).append(str).append("[").append(name).append("] -> ").append(str2).append("[").append(name2).append("]").toString());
  385.                   outPort.setQueue(queue);
  386. >                 inPort.setQueue(queue);
  387.               } catch (RuntimeException e) {
  388.                   name = String.valueOf(outPort);

app/src/main/java/androidx/media/filterfw/Filter.java:353: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void Filter.openPorts()` indirectly writes to field `inPort.mQueue` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  351.       final void openPorts() {
  352.           for (OutputPort outputPort : this.mConnectedOutputPorts.values()) {
  353. >             openOutputPort(outputPort);
  354.           }
  355.       }

app/src/main/java/androidx/media/filterpacks/base/DispatchFilter.java:87: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void DispatchFilter.processGraph()` writes to field `this.mState.state` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  85.       protected void processGraph() {
  86.           boolean haveOutputs = true;
  87. >         this.mState.state = 1;
  88.           if (this.mOutputFrames == null) {
  89.               haveOutputs = false;

app/src/main/java/androidx/media/filterpacks/base/DispatchFilter.java:91: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void DispatchFilter.processGraph()` reads without synchronization from `this.mCurrentGraph`. Potentially races with write in method `DispatchFilter.onProcess()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  89.               haveOutputs = false;
  90.           }
  91. >         this.mCurrentGraph.attachToRunner(this.mRunner);
  92.           this.mRunner.start(this.mCurrentGraph);
  93.           if (!haveOutputs) {

app/src/main/java/androidx/media/filterpacks/base/DispatchFilter.java:66: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void DispatchFilter.pullInputs()` mutates container `this.mInputFrames` via call to `clear` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  64.   
  65.       protected void pullInputs() {
  66. >         this.mInputFrames.clear();
  67.           FrameManager fm = this.mRunner.getFrameManager();
  68.           for (InputPort inputPort : getConnectedInputPorts()) {

app/src/main/java/androidx/media/filterpacks/base/DispatchFilter.java:71: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void DispatchFilter.pullInputs()` indirectly writes to field `this.mCurrentGraph` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  69.               this.mInputFrames.put(inputPort.getName(), fm.importFrame(inputPort.pullFrame()));
  70.           }
  71. >         assignInputs();
  72.       }
  73.   

app/src/main/java/androidx/media/filterpacks/base/DispatchFilter.java:69: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void DispatchFilter.pullInputs()` indirectly writes to field `backing.mAllocation` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  67.           FrameManager fm = this.mRunner.getFrameManager();
  68.           for (InputPort inputPort : getConnectedInputPorts()) {
  69. >             this.mInputFrames.put(inputPort.getName(), fm.importFrame(inputPort.pullFrame()));
  70.           }
  71.           assignInputs();

app/src/main/java/androidx/media/filterpacks/base/DispatchFilter.java:80: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void DispatchFilter.pushOutput(Frame,OutputPort)` indirectly writes to field `backing.mAllocation` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  78.   
  79.       protected void pushOutput(Frame frame, OutputPort outputPort) {
  80. >         Frame imported = getFrameManager().importFrame(frame);
  81.           outputPort.pushFrame(imported);
  82.           saveOutput(outputPort.getName(), imported);

app/src/main/java/com/mp/android/apps/monke/monkeybook/BitIntentDataManager.java:30: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void BitIntentDataManager.putData(String,Object)` reads without synchronization from `monkeybook.BitIntentDataManager.bigData`. Potentially races with write in method `BitIntentDataManager.getInstance()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  28.       }
  29.       public void putData(String key,Object data){
  30. >         bigData.put(key,data);
  31.       }
  32.       public void cleanData(String key){

app/src/main/java/androidx/media/filterfw/RenderTarget.java:221: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void RenderTarget.readPixelData(ByteBuffer,int,int)` indirectly reads without synchronization from `this.mContext`. Potentially races with write in method `RenderTarget.release()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  219.   
  220.       public void readPixelData(ByteBuffer pixels, int width, int height) {
  221. >         GLToolbox.readTarget(this, pixels, width, height);
  222.       }
  223.   

app/src/main/java/androidx/media/filterfw/RenderTarget.java:154: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void RenderTarget.registerAsDisplaySurface()` reads without synchronization from `this.mContext`. Potentially races with write in method `RenderTarget.release()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  152.       public void registerAsDisplaySurface() {
  153.           if (!mSupportsMultipleDisplaySurfaces) {
  154. >             EGLSurface currentSurface = (EGLSurface) mDisplaySurfaces.get(this.mContext);
  155.               if (currentSurface == null || currentSurface.equals(this.mSurface)) {
  156.                   mDisplaySurfaces.put(this.mContext, this.mSurface);

app/src/main/java/androidx/media/filterfw/RenderTarget.java:155: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void RenderTarget.registerAsDisplaySurface()` reads without synchronization from `this.mSurface`. Potentially races with write in method `RenderTarget.release()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  153.           if (!mSupportsMultipleDisplaySurfaces) {
  154.               EGLSurface currentSurface = (EGLSurface) mDisplaySurfaces.get(this.mContext);
  155. >             if (currentSurface == null || currentSurface.equals(this.mSurface)) {
  156.                   mDisplaySurfaces.put(this.mContext, this.mSurface);
  157.                   return;

app/src/main/java/androidx/media/filterfw/RenderTarget.java:203: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void RenderTarget.release()` writes to field `this.mContext` outside of synchronization.
 Reporting because this access may occur on a background thread.
  201.           if (this.mOwnsContext) {
  202.               this.mEgl.eglDestroyContext(this.mDisplay, this.mContext);
  203. >             this.mContext = EGL10.EGL_NO_CONTEXT;
  204.               this.mEgl.eglTerminate(this.mDisplay);
  205.           }

app/src/main/java/androidx/media/filterfw/RenderTarget.java:208: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void RenderTarget.release()` indirectly reads with synchronization from container `filterfw.RenderTarget.mRefCounts` via call to `get`. Potentially races with unsynchronized write in method `RenderTarget.forSurfaceTexture(...)`.
 Reporting because this access may occur on a background thread.
  206.           if (this.mOwnsSurface) {
  207.               synchronized (mSurfaceSources) {
  208. >                 if (removeReferenceTo(this.mSurface)) {
  209.                       this.mEgl.eglDestroySurface(this.mDisplay, this.mSurface);
  210.                       this.mSurface = EGL10.EGL_NO_SURFACE;

app/src/main/java/androidx/media/filterfw/RenderTarget.java:202: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void RenderTarget.release()` reads without synchronization from `this.mContext`. Potentially races with write in method `RenderTarget.release()`.
 Reporting because this access may occur on a background thread.
  200.       public void release() {
  201.           if (this.mOwnsContext) {
  202. >             this.mEgl.eglDestroyContext(this.mDisplay, this.mContext);
  203.               this.mContext = EGL10.EGL_NO_CONTEXT;
  204.               this.mEgl.eglTerminate(this.mDisplay);

app/src/main/java/androidx/media/filterfw/decoder/GpuVideoTrackDecoder.java:131: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void GpuVideoTrackDecoder.release()` indirectly writes to field `this.mIsMediaCodecStarted` outside of synchronization.
 Reporting because this access may occur on a background thread.
  129.   
  130.       public void release() {
  131. >         super.release();
  132.           synchronized (this.mFrameMonitor) {
  133.               this.mTextureSource.release();

app/src/main/java/com/mp/android/apps/monke/basemvplib/AppActivityManager.java:50: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void AppActivityManager.remove(Activity)` reads without synchronization from `basemvplib.AppActivityManager.activities`. Potentially races with write in method `AppActivityManager.getInstance()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  48.        */
  49.       public void remove(Activity activity){
  50. >         for(WeakReference<Activity> temp :activities){
  51.               if(null != temp.get() && temp.get() == activity){
  52.                   activities.remove(temp);

app/src/main/java/com/mp/android/apps/monke/basemvplib/AppActivityManager.java:62: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void AppActivityManager.remove(Class)` reads without synchronization from `basemvplib.AppActivityManager.activities`. Potentially races with write in method `AppActivityManager.getInstance()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  60.        */
  61.       public void remove(Class<?> activityClass){
  62. >         for(Iterator<WeakReference<Activity>> iterator = activities.iterator();iterator.hasNext();){
  63.               WeakReference<Activity> item = iterator.next();
  64.               if(null != item && null != item.get() && item.get().getClass() == activityClass){

app/src/main/java/androidx/media/filterfw/decoder/ImageDecoder.java:116: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void ImageDecoder.removeVideoFrameConsumer(VideoFrameConsumer)` reads without synchronization from container `this.mConsumers` via call to `size`. Potentially races with write in method `ImageDecoder.addVideoFrameConsumer(...)`.
 Reporting because this access may occur on a background thread.
  114.               this.mConsumers.remove(consumer);
  115.           }
  116. >         this.mWaitingConsumers.set(this.mConsumers.size());
  117.       }
  118.   

app/src/main/java/androidx/media/filterfw/CameraStreamer.java:1181: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `RenderTarget CameraStreamer$CamFrameHandlerICS.renderTargetFor(SurfaceTexture)` indirectly writes to field `filterfw.RenderTarget.mConfiguredDisplay` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  1179.                   return target;
  1180.               }
  1181. >             target = RenderTarget.currentTarget().forSurfaceTexture(surfaceTex);
  1182.               this.mClientRenderTargets.put(surfaceTex, target);
  1183.               return target;

app/src/main/java/androidx/media/filterfw/CameraStreamer.java:1182: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `RenderTarget CameraStreamer$CamFrameHandlerICS.renderTargetFor(SurfaceTexture)` mutates container `this.mClientRenderTargets` via call to `put` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  1180.               }
  1181.               target = RenderTarget.currentTarget().forSurfaceTexture(surfaceTex);
  1182. >             this.mClientRenderTargets.put(surfaceTex, target);
  1183.               return target;
  1184.           }

app/src/main/java/androidx/media/filterfw/CameraStreamer.java:1177: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `RenderTarget CameraStreamer$CamFrameHandlerICS.renderTargetFor(SurfaceTexture)` reads without synchronization from container `this.mClientRenderTargets` via call to `get`. Potentially races with write in method `CameraStreamer$CamFrameHandlerICS.updateServerFrame()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  1175.   
  1176.           protected RenderTarget renderTargetFor(SurfaceTexture surfaceTex) {
  1177. >             RenderTarget target = (RenderTarget) this.mClientRenderTargets.get(surfaceTex);
  1178.               if (target != null) {
  1179.                   return target;

app/src/main/java/androidx/media/filterfw/Filter.java:212: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void Filter.requestClose()` writes to field `this.mRequests` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  210.   
  211.       protected final void requestClose() {
  212. >         this.mRequests |= 1;
  213.       }
  214.   

app/src/main/java/com/google/android/apps/photolab/storyboard/pipeline/ComicCache.java:96: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void ComicCache.reset()` writes to field `this.processingCount` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  94.   
  95.       public void reset() {
  96. >         this.processingCount = 0;
  97.           this.cache.clear();
  98.       }

app/src/main/java/androidx/media/filterfw/Filter.java:348: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void Filter.resetScheduleCount()` writes to field `this.mScheduleCount` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  346.   
  347.       final void resetScheduleCount() {
  348. >         this.mScheduleCount = 0;
  349.       }
  350.   

app/src/main/java/com/mp/android/apps/monke/monkeybook/ReadBookControl.java:149: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void ReadBookControl.setTextDrawableIndex(int)` reads without synchronization from `monkeybook.ReadBookControl.textDrawable`. Potentially races with write in method `ReadBookControl.getInstance()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  147.           editor.putInt("textDrawableIndex", textDrawableIndex);
  148.           editor.commit();
  149. >         this.textColor = textDrawable.get(textDrawableIndex).get("textColor");
  150.           this.textBackground = textDrawable.get(textDrawableIndex).get("textBackground");
  151.       }

app/src/main/java/com/mp/android/apps/monke/monkeybook/ReadBookControl.java:136: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void ReadBookControl.setTextKindIndex(int)` reads without synchronization from `monkeybook.ReadBookControl.textKind`. Potentially races with write in method `ReadBookControl.getInstance()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  134.           editor.putInt("textKindIndex", textKindIndex);
  135.           editor.commit();
  136. >         this.textSize = textKind.get(textKindIndex).get("textSize");
  137.           this.textExtra = textKind.get(textKindIndex).get("textExtra");
  138.       }

app/src/main/java/androidx/media/filterfw/CameraStreamer.java:1190: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void CameraStreamer$CamFrameHandlerICS.setupPreviewTexture(Camera)` reads without synchronization from `this.mPreviewSurfaceTexture`. Potentially races with write in method `CameraStreamer$CamFrameHandlerICS.setupServerFrame()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  1188.                   this.mPreviewTexture = TextureSource.newExternalTexture();
  1189.               }
  1190. >             if (this.mPreviewSurfaceTexture == null) {
  1191.                   this.mPreviewSurfaceTexture = new SurfaceTexture(this.mPreviewTexture.getTextureId());
  1192.                   try {

app/src/main/java/androidx/media/filterfw/CameraStreamer.java:1191: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void CameraStreamer$CamFrameHandlerICS.setupPreviewTexture(Camera)` writes to field `this.mPreviewSurfaceTexture` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  1189.               }
  1190.               if (this.mPreviewSurfaceTexture == null) {
  1191. >                 this.mPreviewSurfaceTexture = new SurfaceTexture(this.mPreviewTexture.getTextureId());
  1192.                   try {
  1193.                       camera.setPreviewTexture(this.mPreviewSurfaceTexture);

app/src/main/java/androidx/media/filterfw/CameraStreamer.java:1187: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void CameraStreamer$CamFrameHandlerICS.setupPreviewTexture(Camera)` reads without synchronization from `this.mPreviewTexture`. Potentially races with write in method `CameraStreamer$CamFrameHandlerICS.setupServerFrame()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  1185.   
  1186.           protected void setupPreviewTexture(Camera camera) {
  1187. >             if (this.mPreviewTexture == null) {
  1188.                   this.mPreviewTexture = TextureSource.newExternalTexture();
  1189.               }

app/src/main/java/androidx/media/filterfw/CameraStreamer.java:1188: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void CameraStreamer$CamFrameHandlerICS.setupPreviewTexture(Camera)` writes to field `this.mPreviewTexture` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  1186.           protected void setupPreviewTexture(Camera camera) {
  1187.               if (this.mPreviewTexture == null) {
  1188. >                 this.mPreviewTexture = TextureSource.newExternalTexture();
  1189.               }
  1190.               if (this.mPreviewSurfaceTexture == null) {

app/src/main/java/androidx/media/filterfw/decoder/MediaDecoder.java:450: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void MediaDecoder.skipVideoFrame()` indirectly writes to field `this.mVideoConsumerWaitCount` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  448.   
  449.       public void skipVideoFrame() {
  450. >         decrementConsumersWaiting();
  451.           if (this.mVideoConsumerWaitCount == 0) {
  452.               this.mVideoTrackDecoder.advance();

app/src/main/java/androidx/media/filterfw/CameraStreamer.java:1210: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `SurfaceTexture CameraStreamer$CamFrameHandlerICS.surfaceTextureForContext(EGLContext)` reads without synchronization from container `this.mTargetSurfaceTextures` via call to `get`. Potentially races with write in method `CameraStreamer$CamFrameHandlerICS.onRegisterClient(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  1208.   
  1209.           protected SurfaceTexture surfaceTextureForContext(EGLContext context) {
  1210. >             SurfaceTexture surfTex = (SurfaceTexture) this.mTargetSurfaceTextures.get(context);
  1211.               if (surfTex != null) {
  1212.                   return surfTex;

app/src/main/java/androidx/media/filterfw/CameraStreamer.java:1214: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `SurfaceTexture CameraStreamer$CamFrameHandlerICS.surfaceTextureForContext(EGLContext)` indirectly mutates container `this.mTargetTextures` via call to `put` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  1212.                   return surfTex;
  1213.               }
  1214. >             TextureSource texture = textureForContext(context);
  1215.               if (texture == null) {
  1216.                   return surfTex;

app/src/main/java/androidx/media/filterfw/CameraStreamer.java:1220: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `SurfaceTexture CameraStreamer$CamFrameHandlerICS.surfaceTextureForContext(EGLContext)` mutates container `this.mTargetSurfaceTextures` via call to `put` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  1218.               surfTex = new SurfaceTexture(texture.getTextureId());
  1219.               surfTex.setDefaultBufferSize(this.mOutWidth, this.mOutHeight);
  1220. >             this.mTargetSurfaceTextures.put(context, surfTex);
  1221.               return surfTex;
  1222.           }

app/src/main/java/androidx/media/filterfw/RenderTarget.java:188: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void RenderTarget.swapBuffers()` indirectly reads without synchronization from `this.mContext`. Potentially races with write in method `RenderTarget.release()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  186.   
  187.       public void swapBuffers() {
  188. >         this.mEgl.eglSwapBuffers(this.mDisplay, surface());
  189.       }
  190.   

app/src/main/java/androidx/media/filterfw/FilterGraph.java:193: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void FilterGraph.tearDown()` reads without synchronization from `this.mParentGraph`. Potentially races with write in method `FilterGraph.wipe()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  191.   
  192.       public void tearDown() {
  193. >         if (this.mParentGraph != null) {
  194.               throw new RuntimeException("Attempting to tear down sub-graph!");
  195.           }

app/src/main/java/androidx/media/filterfw/RenderTarget.java:253: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `String RenderTarget.toString()` reads without synchronization from `this.mSurface`. Potentially races with write in method `RenderTarget.release()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  251.           String valueOf = String.valueOf(this.mDisplay);
  252.           String valueOf2 = String.valueOf(this.mContext);
  253. >         String valueOf3 = String.valueOf(this.mSurface);
  254.           return new StringBuilder(((String.valueOf(valueOf).length() + 31) + String.valueOf(valueOf2).length()) + String.valueOf(valueOf3).length()).append("RenderTarget(").append(valueOf).append(", ").append(valueOf2).append(", ").append(valueOf3).append(", ").append(this.mFbo).append(")").toString();
  255.       }

app/src/main/java/androidx/media/filterfw/RenderTarget.java:252: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `String RenderTarget.toString()` reads without synchronization from `this.mContext`. Potentially races with write in method `RenderTarget.release()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  250.       public String toString() {
  251.           String valueOf = String.valueOf(this.mDisplay);
  252. >         String valueOf2 = String.valueOf(this.mContext);
  253.           String valueOf3 = String.valueOf(this.mSurface);
  254.           return new StringBuilder(((String.valueOf(valueOf).length() + 31) + String.valueOf(valueOf2).length()) + String.valueOf(valueOf3).length()).append("RenderTarget(").append(valueOf).append(", ").append(valueOf2).append(", ").append(valueOf3).append(", ").append(this.mFbo).append(")").toString();

app/src/main/java/androidx/media/filterfw/RenderTarget.java:165: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void RenderTarget.unregisterAsDisplaySurface()` reads without synchronization from `this.mContext`. Potentially races with write in method `RenderTarget.release()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  163.       public void unregisterAsDisplaySurface() {
  164.           if (!mSupportsMultipleDisplaySurfaces) {
  165. >             mDisplaySurfaces.put(this.mContext, null);
  166.           }
  167.       }

app/src/main/java/androidx/media/filterfw/CameraStreamer.java:1239: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void CameraStreamer$CamFrameHandlerICS.updateTransform(ImageShader)` reads without synchronization from `this.mPreviewSurfaceTexture`. Potentially races with write in method `CameraStreamer$CamFrameHandlerICS.setupServerFrame()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  1237.   
  1238.           protected void updateTransform(ImageShader shader) {
  1239. >             this.mPreviewSurfaceTexture.getTransformMatrix(this.mCameraTransform);
  1240.               shader.setSourceTransform(this.mCameraTransform);
  1241.           }

app/src/main/java/androidx/media/filterfw/FilterGraph.java:345: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void FilterGraph.wipe()` writes to field `this.mParentGraph` outside of synchronization.
 Reporting because this access may occur on a background thread.
  343.           this.mAllFilters = null;
  344.           this.mFilterMap = null;
  345. >         this.mParentGraph = null;
  346.       }
  347.   

app/src/main/java/androidx/media/filterfw/FilterGraph.java:344: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void FilterGraph.wipe()` writes to field `this.mFilterMap` outside of synchronization.
 Reporting because this access may occur on a background thread.
  342.           this.mContext.removeGraph(this);
  343.           this.mAllFilters = null;
  344. >         this.mFilterMap = null;
  345.           this.mParentGraph = null;
  346.       }

app/src/main/java/androidx/media/filterfw/FilterGraph.java:343: warning: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `void FilterGraph.wipe()` writes to field `this.mAllFilters` outside of synchronization.
 Reporting because this access may occur on a background thread.
  341.           }
  342.           this.mContext.removeGraph(this);
  343. >         this.mAllFilters = null;
  344.           this.mFilterMap = null;
  345.           this.mParentGraph = null;

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceDetectionOptionsProtos.java:272: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void FaceDetectionOptionsProtos$FaceDetectionOptions.writeTo(CodedOutputStream)` reads without synchronization from `this.smoothness_`. Potentially races with write in method `FaceDetectionOptionsProtos$FaceDetectionOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  270.         }
  271.         if (((bitField0_ & 0x00000002) == 0x00000002)) {
  272. >         output.writeFloat(6, smoothness_);
  273.         }
  274.         unknownFields.writeTo(output);

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceDetectionOptionsProtos.java:256: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void FaceDetectionOptionsProtos$FaceDetectionOptions.writeTo(CodedOutputStream)` reads without synchronization from `this.bitField0_`. Potentially races with write in method `FaceDetectionOptionsProtos$FaceDetectionOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  254.       public void writeTo(com.google.protobuf.CodedOutputStream output)
  255.                           throws java.io.IOException {
  256. >       if (((bitField0_ & 0x00000010) == 0x00000010)) {
  257.           output.writeUInt32(1, minEyeDistancePixels_);
  258.         }

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceDetectionOptionsProtos.java:269: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void FaceDetectionOptionsProtos$FaceDetectionOptions.writeTo(CodedOutputStream)` reads without synchronization from `this.quality_`. Potentially races with write in method `FaceDetectionOptionsProtos$FaceDetectionOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  267.         }
  268.         if (((bitField0_ & 0x00000004) == 0x00000004)) {
  269. >         output.writeFloat(5, quality_);
  270.         }
  271.         if (((bitField0_ & 0x00000002) == 0x00000002)) {

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceDetectionOptionsProtos.java:257: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void FaceDetectionOptionsProtos$FaceDetectionOptions.writeTo(CodedOutputStream)` reads without synchronization from `this.minEyeDistancePixels_`. Potentially races with write in method `FaceDetectionOptionsProtos$FaceDetectionOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  255.                           throws java.io.IOException {
  256.         if (((bitField0_ & 0x00000010) == 0x00000010)) {
  257. >         output.writeUInt32(1, minEyeDistancePixels_);
  258.         }
  259.         if (((bitField0_ & 0x00000020) == 0x00000020)) {

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceDetectionOptionsProtos.java:263: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void FaceDetectionOptionsProtos$FaceDetectionOptions.writeTo(CodedOutputStream)` reads without synchronization from `this.maxRollAngle_`. Potentially races with write in method `FaceDetectionOptionsProtos$FaceDetectionOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  261.         }
  262.         if (((bitField0_ & 0x00000008) == 0x00000008)) {
  263. >         output.writeFloat(3, maxRollAngle_);
  264.         }
  265.         if (((bitField0_ & 0x00000001) == 0x00000001)) {

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceDetectionOptionsProtos.java:266: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void FaceDetectionOptionsProtos$FaceDetectionOptions.writeTo(CodedOutputStream)` reads without synchronization from `this.landmarkingConfidenceThreshold_`. Potentially races with write in method `FaceDetectionOptionsProtos$FaceDetectionOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  264.         }
  265.         if (((bitField0_ & 0x00000001) == 0x00000001)) {
  266. >         output.writeFloat(4, landmarkingConfidenceThreshold_);
  267.         }
  268.         if (((bitField0_ & 0x00000004) == 0x00000004)) {

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceDetectionOptionsProtos.java:260: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void FaceDetectionOptionsProtos$FaceDetectionOptions.writeTo(CodedOutputStream)` reads without synchronization from `this.maxEyeDistancePixels_`. Potentially races with write in method `FaceDetectionOptionsProtos$FaceDetectionOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  258.         }
  259.         if (((bitField0_ & 0x00000020) == 0x00000020)) {
  260. >         output.writeUInt32(2, maxEyeDistancePixels_);
  261.         }
  262.         if (((bitField0_ & 0x00000008) == 0x00000008)) {

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:3554: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void FaceProtos$Face.writeTo(CodedOutputStream)` reads without synchronization from `this.tiltAngle_`. Potentially races with write in method `FaceProtos$Face.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  3552.         }
  3553.         if (((bitField0_ & 0x00000002) == 0x00000002)) {
  3554. >         output.writeFloat(6, tiltAngle_);
  3555.         }
  3556.         for (int i = 0; i < embedding_.size(); i++) {

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:3560: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void FaceProtos$Face.writeTo(CodedOutputStream)` reads without synchronization from container `this.attribute_` via call to `get`. Potentially races with write in method `FaceProtos$Face.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  3558.         }
  3559.         for (int i = 0; i < attribute_.size(); i++) {
  3560. >         output.writeMessage(8, attribute_.get(i));
  3561.         }
  3562.         if (((bitField0_ & 0x00000008) == 0x00000008)) {

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:3548: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void FaceProtos$Face.writeTo(CodedOutputStream)` reads without synchronization from `this.rollAngle_`. Potentially races with write in method `FaceProtos$Face.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  3546.         }
  3547.         if (((bitField0_ & 0x00000001) == 0x00000001)) {
  3548. >         output.writeFloat(4, rollAngle_);
  3549.         }
  3550.         if (((bitField0_ & 0x00000010) == 0x00000010)) {

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:3542: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void FaceProtos$Face.writeTo(CodedOutputStream)` reads without synchronization from container `this.landmark_` via call to `get`. Potentially races with write in method `FaceProtos$Face.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  3540.         }
  3541.         for (int i = 0; i < landmark_.size(); i++) {
  3542. >         output.writeMessage(2, landmark_.get(i));
  3543.         }
  3544.         if (((bitField0_ & 0x00000004) == 0x00000004)) {

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:3563: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void FaceProtos$Face.writeTo(CodedOutputStream)` reads without synchronization from `this.identityId_`. Potentially races with write in method `FaceProtos$Face.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  3561.         }
  3562.         if (((bitField0_ & 0x00000008) == 0x00000008)) {
  3563. >         output.writeFloat(9, identityId_);
  3564.         }
  3565.         unknownFields.writeTo(output);

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:3545: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void FaceProtos$Face.writeTo(CodedOutputStream)` reads without synchronization from `this.confidence_`. Potentially races with write in method `FaceProtos$Face.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  3543.         }
  3544.         if (((bitField0_ & 0x00000004) == 0x00000004)) {
  3545. >         output.writeFloat(3, confidence_);
  3546.         }
  3547.         if (((bitField0_ & 0x00000001) == 0x00000001)) {

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:3539: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void FaceProtos$Face.writeTo(CodedOutputStream)` indirectly reads without synchronization from `this.boundingBox_`. Potentially races with write in method `FaceProtos$Face.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  3537.                           throws java.io.IOException {
  3538.         if (((bitField0_ & 0x00000020) == 0x00000020)) {
  3539. >         output.writeMessage(1, getBoundingBox());
  3540.         }
  3541.         for (int i = 0; i < landmark_.size(); i++) {

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:3538: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void FaceProtos$Face.writeTo(CodedOutputStream)` reads without synchronization from `this.bitField0_`. Potentially races with write in method `FaceProtos$Face.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  3536.       public void writeTo(com.google.protobuf.CodedOutputStream output)
  3537.                           throws java.io.IOException {
  3538. >       if (((bitField0_ & 0x00000020) == 0x00000020)) {
  3539.           output.writeMessage(1, getBoundingBox());
  3540.         }

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:3541: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void FaceProtos$Face.writeTo(CodedOutputStream)` reads without synchronization from `this.landmark_`. Potentially races with write in method `FaceProtos$Face.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  3539.           output.writeMessage(1, getBoundingBox());
  3540.         }
  3541. >       for (int i = 0; i < landmark_.size(); i++) {
  3542.           output.writeMessage(2, landmark_.get(i));
  3543.         }

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:3551: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void FaceProtos$Face.writeTo(CodedOutputStream)` reads without synchronization from `this.panAngle_`. Potentially races with write in method `FaceProtos$Face.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  3549.         }
  3550.         if (((bitField0_ & 0x00000010) == 0x00000010)) {
  3551. >         output.writeFloat(5, panAngle_);
  3552.         }
  3553.         if (((bitField0_ & 0x00000002) == 0x00000002)) {

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:3557: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void FaceProtos$Face.writeTo(CodedOutputStream)` reads without synchronization from container `this.embedding_` via call to `get`. Potentially races with write in method `FaceProtos$Face.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  3555.         }
  3556.         for (int i = 0; i < embedding_.size(); i++) {
  3557. >         output.writeMessage(7, embedding_.get(i));
  3558.         }
  3559.         for (int i = 0; i < attribute_.size(); i++) {

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:3556: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void FaceProtos$Face.writeTo(CodedOutputStream)` reads without synchronization from `this.embedding_`. Potentially races with write in method `FaceProtos$Face.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  3554.           output.writeFloat(6, tiltAngle_);
  3555.         }
  3556. >       for (int i = 0; i < embedding_.size(); i++) {
  3557.           output.writeMessage(7, embedding_.get(i));
  3558.         }

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:3559: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void FaceProtos$Face.writeTo(CodedOutputStream)` reads without synchronization from `this.attribute_`. Potentially races with write in method `FaceProtos$Face.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  3557.           output.writeMessage(7, embedding_.get(i));
  3558.         }
  3559. >       for (int i = 0; i < attribute_.size(); i++) {
  3560.           output.writeMessage(8, attribute_.get(i));
  3561.         }

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:512: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void FaceProtos$Face$Attribute.writeTo(CodedOutputStream)` indirectly reads without synchronization from `this.name_`. Potentially races with write in method `FaceProtos$Face$Attribute.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  510.           }
  511.           if (((bitField0_ & 0x00000002) == 0x00000002)) {
  512. >           output.writeString(2, getName());
  513.           }
  514.           if (((bitField0_ & 0x00000001) == 0x00000001)) {

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:509: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void FaceProtos$Face$Attribute.writeTo(CodedOutputStream)` reads without synchronization from `this.type_`. Potentially races with write in method `FaceProtos$Face$Attribute.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  507.                             throws java.io.IOException {
  508.           if (((bitField0_ & 0x00000008) == 0x00000008)) {
  509. >           output.writeEnum(1, type_);
  510.           }
  511.           if (((bitField0_ & 0x00000002) == 0x00000002)) {

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:515: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void FaceProtos$Face$Attribute.writeTo(CodedOutputStream)` reads without synchronization from `this.confidence_`. Potentially races with write in method `FaceProtos$Face$Attribute.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  513.           }
  514.           if (((bitField0_ & 0x00000001) == 0x00000001)) {
  515. >           output.writeFloat(3, confidence_);
  516.           }
  517.           if (((bitField0_ & 0x00000004) == 0x00000004)) {

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:508: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void FaceProtos$Face$Attribute.writeTo(CodedOutputStream)` reads without synchronization from `this.bitField0_`. Potentially races with write in method `FaceProtos$Face$Attribute.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  506.         public void writeTo(com.google.protobuf.CodedOutputStream output)
  507.                             throws java.io.IOException {
  508. >         if (((bitField0_ & 0x00000008) == 0x00000008)) {
  509.             output.writeEnum(1, type_);
  510.           }

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:518: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void FaceProtos$Face$Attribute.writeTo(CodedOutputStream)` reads without synchronization from `this.value_`. Potentially races with write in method `FaceProtos$Face$Attribute.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  516.           }
  517.           if (((bitField0_ & 0x00000004) == 0x00000004)) {
  518. >           output.writeFloat(4, value_);
  519.           }
  520.           unknownFields.writeTo(output);

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:1064: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void FaceProtos$Face$BoundingBox.writeTo(CodedOutputStream)` reads without synchronization from `this.x1_`. Potentially races with write in method `FaceProtos$Face$BoundingBox.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  1062.                             throws java.io.IOException {
  1063.           if (((bitField0_ & 0x00000001) == 0x00000001)) {
  1064. >           output.writeFloat(1, x1_);
  1065.           }
  1066.           if (((bitField0_ & 0x00000004) == 0x00000004)) {

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:1073: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void FaceProtos$Face$BoundingBox.writeTo(CodedOutputStream)` reads without synchronization from `this.y2_`. Potentially races with write in method `FaceProtos$Face$BoundingBox.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  1071.           }
  1072.           if (((bitField0_ & 0x00000008) == 0x00000008)) {
  1073. >           output.writeFloat(4, y2_);
  1074.           }
  1075.           unknownFields.writeTo(output);

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:1067: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void FaceProtos$Face$BoundingBox.writeTo(CodedOutputStream)` reads without synchronization from `this.y1_`. Potentially races with write in method `FaceProtos$Face$BoundingBox.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  1065.           }
  1066.           if (((bitField0_ & 0x00000004) == 0x00000004)) {
  1067. >           output.writeFloat(2, y1_);
  1068.           }
  1069.           if (((bitField0_ & 0x00000002) == 0x00000002)) {

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:1070: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void FaceProtos$Face$BoundingBox.writeTo(CodedOutputStream)` reads without synchronization from `this.x2_`. Potentially races with write in method `FaceProtos$Face$BoundingBox.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  1068.           }
  1069.           if (((bitField0_ & 0x00000002) == 0x00000002)) {
  1070. >           output.writeFloat(3, x2_);
  1071.           }
  1072.           if (((bitField0_ & 0x00000008) == 0x00000008)) {

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:1063: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void FaceProtos$Face$BoundingBox.writeTo(CodedOutputStream)` reads without synchronization from `this.bitField0_`. Potentially races with write in method `FaceProtos$Face$BoundingBox.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  1061.         public void writeTo(com.google.protobuf.CodedOutputStream output)
  1062.                             throws java.io.IOException {
  1063. >         if (((bitField0_ & 0x00000001) == 0x00000001)) {
  1064.             output.writeFloat(1, x1_);
  1065.           }

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:1527: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void FaceProtos$Face$Embedding.writeTo(CodedOutputStream)` reads without synchronization from `this.value_`. Potentially races with write in method `FaceProtos$Face$Embedding.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  1525.           }
  1526.           if (((bitField0_ & 0x00000001) == 0x00000001)) {
  1527. >           output.writeBytes(2, value_);
  1528.           }
  1529.           unknownFields.writeTo(output);

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:1524: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void FaceProtos$Face$Embedding.writeTo(CodedOutputStream)` reads without synchronization from `this.version_`. Potentially races with write in method `FaceProtos$Face$Embedding.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  1522.                             throws java.io.IOException {
  1523.           if (((bitField0_ & 0x00000002) == 0x00000002)) {
  1524. >           output.writeInt32(1, version_);
  1525.           }
  1526.           if (((bitField0_ & 0x00000001) == 0x00000001)) {

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:1523: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void FaceProtos$Face$Embedding.writeTo(CodedOutputStream)` reads without synchronization from `this.bitField0_`. Potentially races with write in method `FaceProtos$Face$Embedding.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  1521.         public void writeTo(com.google.protobuf.CodedOutputStream output)
  1522.                             throws java.io.IOException {
  1523. >         if (((bitField0_ & 0x00000002) == 0x00000002)) {
  1524.             output.writeInt32(1, version_);
  1525.           }

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:2518: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void FaceProtos$Face$Landmark.writeTo(CodedOutputStream)` reads without synchronization from `this.x_`. Potentially races with write in method `FaceProtos$Face$Landmark.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  2516.                             throws java.io.IOException {
  2517.           if (((bitField0_ & 0x00000008) == 0x00000008)) {
  2518. >           output.writeFloat(1, x_);
  2519.           }
  2520.           if (((bitField0_ & 0x00000010) == 0x00000010)) {

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:2521: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void FaceProtos$Face$Landmark.writeTo(CodedOutputStream)` reads without synchronization from `this.y_`. Potentially races with write in method `FaceProtos$Face$Landmark.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  2519.           }
  2520.           if (((bitField0_ & 0x00000010) == 0x00000010)) {
  2521. >           output.writeFloat(2, y_);
  2522.           }
  2523.           if (((bitField0_ & 0x00000020) == 0x00000020)) {

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:2527: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void FaceProtos$Face$Landmark.writeTo(CodedOutputStream)` reads without synchronization from `this.type_`. Potentially races with write in method `FaceProtos$Face$Landmark.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  2525.           }
  2526.           if (((bitField0_ & 0x00000002) == 0x00000002)) {
  2527. >           output.writeEnum(4, type_);
  2528.           }
  2529.           if (((bitField0_ & 0x00000004) == 0x00000004)) {

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:2517: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void FaceProtos$Face$Landmark.writeTo(CodedOutputStream)` reads without synchronization from `this.bitField0_`. Potentially races with write in method `FaceProtos$Face$Landmark.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  2515.         public void writeTo(com.google.protobuf.CodedOutputStream output)
  2516.                             throws java.io.IOException {
  2517. >         if (((bitField0_ & 0x00000008) == 0x00000008)) {
  2518.             output.writeFloat(1, x_);
  2519.           }

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:2524: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void FaceProtos$Face$Landmark.writeTo(CodedOutputStream)` reads without synchronization from `this.z_`. Potentially races with write in method `FaceProtos$Face$Landmark.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  2522.           }
  2523.           if (((bitField0_ & 0x00000020) == 0x00000020)) {
  2524. >           output.writeFloat(3, z_);
  2525.           }
  2526.           if (((bitField0_ & 0x00000002) == 0x00000002)) {

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:2530: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void FaceProtos$Face$Landmark.writeTo(CodedOutputStream)` reads without synchronization from `this.visibility_`. Potentially races with write in method `FaceProtos$Face$Landmark.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  2528.           }
  2529.           if (((bitField0_ & 0x00000004) == 0x00000004)) {
  2530. >           output.writeEnum(5, visibility_);
  2531.           }
  2532.           if (((bitField0_ & 0x00000001) == 0x00000001)) {

app/src/generated/debug/javalite/com/google/protos/humansensing/FaceProtos.java:2533: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void FaceProtos$Face$Landmark.writeTo(CodedOutputStream)` reads without synchronization from `this.confidence_`. Potentially races with write in method `FaceProtos$Face$Landmark.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  2531.           }
  2532.           if (((bitField0_ & 0x00000001) == 0x00000001)) {
  2533. >           output.writeFloat(6, confidence_);
  2534.           }
  2535.           unknownFields.writeTo(output);

app/src/generated/debug/javalite/com/google/protos/humansensing/FacesProtos.java:163: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void FacesProtos$Faces.writeTo(CodedOutputStream)` reads without synchronization from container `this.face_` via call to `get`. Potentially races with write in method `FacesProtos$Faces.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  161.                           throws java.io.IOException {
  162.         for (int i = 0; i < face_.size(); i++) {
  163. >         output.writeMessage(1, face_.get(i));
  164.         }
  165.         unknownFields.writeTo(output);

app/src/generated/debug/javalite/com/google/protos/humansensing/FacesProtos.java:162: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void FacesProtos$Faces.writeTo(CodedOutputStream)` reads without synchronization from `this.face_`. Potentially races with write in method `FacesProtos$Faces.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  160.       public void writeTo(com.google.protobuf.CodedOutputStream output)
  161.                           throws java.io.IOException {
  162. >       for (int i = 0; i < face_.size(); i++) {
  163.           output.writeMessage(1, face_.get(i));
  164.         }

app/src/generated/debug/javalite/com/google/protos/mobilessd/MobileSSDClientOptionsProto.java:356: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void MobileSSDClientOptionsProto$MobileSSDClientOptions.writeTo(CodedOutputStream)` reads without synchronization from `this.maxCategories_`. Potentially races with write in method `MobileSSDClientOptionsProto$MobileSSDClientOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  354.         }
  355.         if (((bitField0_ & 0x00000002) == 0x00000002)) {
  356. >         output.writeUInt32(3, maxCategories_);
  357.         }
  358.         if (((bitField0_ & 0x00000010) == 0x00000010)) {

app/src/generated/debug/javalite/com/google/protos/mobilessd/MobileSSDClientOptionsProto.java:349: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void MobileSSDClientOptionsProto$MobileSSDClientOptions.writeTo(CodedOutputStream)` reads without synchronization from `this.bitField0_`. Potentially races with write in method `MobileSSDClientOptionsProto$MobileSSDClientOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  347.       public void writeTo(com.google.protobuf.CodedOutputStream output)
  348.                           throws java.io.IOException {
  349. >       if (((bitField0_ & 0x00000008) == 0x00000008)) {
  350.           output.writeString(1, getMobileSsdClientName());
  351.         }

app/src/generated/debug/javalite/com/google/protos/mobilessd/MobileSSDClientOptionsProto.java:362: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void MobileSSDClientOptionsProto$MobileSSDClientOptions.writeTo(CodedOutputStream)` reads without synchronization from `this.iouThreshold_`. Potentially races with write in method `MobileSSDClientOptionsProto$MobileSSDClientOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  360.         }
  361.         if (((bitField0_ & 0x00000001) == 0x00000001)) {
  362. >         output.writeFloat(5, iouThreshold_);
  363.         }
  364.         for (int i = 0; i < classNameWhitelist_.size(); i++) {

app/src/generated/debug/javalite/com/google/protos/mobilessd/MobileSSDClientOptionsProto.java:350: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void MobileSSDClientOptionsProto$MobileSSDClientOptions.writeTo(CodedOutputStream)` indirectly reads without synchronization from `this.mobileSsdClientName_`. Potentially races with write in method `MobileSSDClientOptionsProto$MobileSSDClientOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  348.                           throws java.io.IOException {
  349.         if (((bitField0_ & 0x00000008) == 0x00000008)) {
  350. >         output.writeString(1, getMobileSsdClientName());
  351.         }
  352.         if (((bitField0_ & 0x00000004) == 0x00000004)) {

app/src/generated/debug/javalite/com/google/protos/mobilessd/MobileSSDClientOptionsProto.java:364: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void MobileSSDClientOptionsProto$MobileSSDClientOptions.writeTo(CodedOutputStream)` reads without synchronization from `this.classNameWhitelist_`. Potentially races with write in method `MobileSSDClientOptionsProto$MobileSSDClientOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  362.           output.writeFloat(5, iouThreshold_);
  363.         }
  364. >       for (int i = 0; i < classNameWhitelist_.size(); i++) {
  365.           output.writeString(6, classNameWhitelist_.get(i));
  366.         }

app/src/generated/debug/javalite/com/google/protos/mobilessd/MobileSSDClientOptionsProto.java:365: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void MobileSSDClientOptionsProto$MobileSSDClientOptions.writeTo(CodedOutputStream)` reads without synchronization from container `this.classNameWhitelist_` via call to `get`. Potentially races with write in method `MobileSSDClientOptionsProto$MobileSSDClientOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  363.         }
  364.         for (int i = 0; i < classNameWhitelist_.size(); i++) {
  365. >         output.writeString(6, classNameWhitelist_.get(i));
  366.         }
  367.         unknownFields.writeTo(output);

app/src/generated/debug/javalite/com/google/protos/mobilessd/MobileSSDClientOptionsProto.java:359: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void MobileSSDClientOptionsProto$MobileSSDClientOptions.writeTo(CodedOutputStream)` reads without synchronization from `this.scoreThreshold_`. Potentially races with write in method `MobileSSDClientOptionsProto$MobileSSDClientOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  357.         }
  358.         if (((bitField0_ & 0x00000010) == 0x00000010)) {
  359. >         output.writeFloat(4, scoreThreshold_);
  360.         }
  361.         if (((bitField0_ & 0x00000001) == 0x00000001)) {

app/src/generated/debug/javalite/com/google/protos/mobilessd/MobileSSDClientOptionsProto.java:353: warning: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `void MobileSSDClientOptionsProto$MobileSSDClientOptions.writeTo(CodedOutputStream)` reads without synchronization from `this.maxDetections_`. Potentially races with write in method `MobileSSDClientOptionsProto$MobileSSDClientOptions.dynamicMethod(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  351.         }
  352.         if (((bitField0_ & 0x00000004) == 0x00000004)) {
  353. >         output.writeUInt32(2, maxDetections_);
  354.         }
  355.         if (((bitField0_ & 0x00000002) == 0x00000002)) {

Summary of the reports

      THREAD_SAFETY_VIOLATION: 418
             NULL_DEREFERENCE: 211
                RESOURCE_LEAK: 16
  INEFFICIENT_KEYSET_ITERATOR: 1
        STRICT_MODE_VIOLATION: 1